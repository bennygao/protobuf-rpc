// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.yingshibao.app.idl;

@SuppressWarnings("hiding")
public final class TestAllTypes extends
    com.google.protobuf.nano.MessageNano {

  // enum NestedEnum
  public static final int FOO = 1;
  public static final int BAR = 2;
  public static final int BAZ = 3;
  public static final int NEG = -1;

  public static final class NestedMessage extends
      com.google.protobuf.nano.MessageNano {

    private static volatile NestedMessage[] _emptyArray;
    public static NestedMessage[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new NestedMessage[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 bb = 1;
    public int bb;

    public NestedMessage() {
      clear();
    }

    public NestedMessage clear() {
      bb = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.bb != 0) {
        output.writeInt32(1, this.bb);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.bb != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.bb);
      }
      return size;
    }

    @Override
    public NestedMessage mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.bb = input.readInt32();
            break;
          }
        }
      }
    }

    public static NestedMessage parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new NestedMessage(), data);
    }

    public static NestedMessage parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new NestedMessage().mergeFrom(input);
    }
  }

  public static final class OptionalGroup extends
      com.google.protobuf.nano.MessageNano {

    private static volatile OptionalGroup[] _emptyArray;
    public static OptionalGroup[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new OptionalGroup[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 a = 17;
    public int a;

    public OptionalGroup() {
      clear();
    }

    public OptionalGroup clear() {
      a = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.a != 0) {
        output.writeInt32(17, this.a);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.a != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(17, this.a);
      }
      return size;
    }

    @Override
    public OptionalGroup mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 136: {
            this.a = input.readInt32();
            break;
          }
        }
      }
    }

    public static OptionalGroup parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new OptionalGroup(), data);
    }

    public static OptionalGroup parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new OptionalGroup().mergeFrom(input);
    }
  }

  public static final class RepeatedGroup extends
      com.google.protobuf.nano.MessageNano {

    private static volatile RepeatedGroup[] _emptyArray;
    public static RepeatedGroup[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new RepeatedGroup[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 a = 47;
    public int a;

    public RepeatedGroup() {
      clear();
    }

    public RepeatedGroup clear() {
      a = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.a != 0) {
        output.writeInt32(47, this.a);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.a != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(47, this.a);
      }
      return size;
    }

    @Override
    public RepeatedGroup mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 376: {
            this.a = input.readInt32();
            break;
          }
        }
      }
    }

    public static RepeatedGroup parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new RepeatedGroup(), data);
    }

    public static RepeatedGroup parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new RepeatedGroup().mergeFrom(input);
    }
  }

  private static volatile TestAllTypes[] _emptyArray;
  public static TestAllTypes[] emptyArray() {
    // Lazily initializes the empty array
    if (_emptyArray == null) {
      synchronized (
          com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (_emptyArray == null) {
          _emptyArray = new TestAllTypes[0];
        }
      }
    }
    return _emptyArray;
  }

  // optional int32 optional_int32 = 1;
  public int optionalInt32;

  // optional int64 optional_int64 = 2;
  public long optionalInt64;

  // optional uint32 optional_uint32 = 3;
  public int optionalUint32;

  // optional uint64 optional_uint64 = 4;
  public long optionalUint64;

  // optional sint32 optional_sint32 = 5;
  public int optionalSint32;

  // optional sint64 optional_sint64 = 6;
  public long optionalSint64;

  // optional fixed32 optional_fixed32 = 7;
  public int optionalFixed32;

  // optional fixed64 optional_fixed64 = 8;
  public long optionalFixed64;

  // optional sfixed32 optional_sfixed32 = 9;
  public int optionalSfixed32;

  // optional sfixed64 optional_sfixed64 = 10;
  public long optionalSfixed64;

  // optional float optional_float = 11;
  public float optionalFloat;

  // optional double optional_double = 12;
  public double optionalDouble;

  // optional bool optional_bool = 13;
  public boolean optionalBool;

  // optional string optional_string = 14;
  public java.lang.String optionalString;

  // optional bytes optional_bytes = 15;
  public byte[] optionalBytes;

  // optional group OptionalGroup = 16 {
  public com.yingshibao.app.idl.TestAllTypes.OptionalGroup optionalGroup;

  // optional .yingshibao.TestAllTypes.NestedMessage optional_nested_message = 18;
  public com.yingshibao.app.idl.TestAllTypes.NestedMessage optionalNestedMessage;

  // optional .yingshibao.TestAllTypes.NestedEnum optional_nested_enum = 21;
  public int optionalNestedEnum;

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  public java.lang.String optionalStringPiece;

  // optional string optional_cord = 25 [ctype = CORD];
  public java.lang.String optionalCord;

  // optional .yingshibao.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
  public com.yingshibao.app.idl.TestAllTypes.NestedMessage optionalLazyMessage;

  // repeated int32 repeated_int32 = 31;
  public int[] repeatedInt32;

  // repeated int64 repeated_int64 = 32;
  public long[] repeatedInt64;

  // repeated uint32 repeated_uint32 = 33;
  public int[] repeatedUint32;

  // repeated uint64 repeated_uint64 = 34;
  public long[] repeatedUint64;

  // repeated sint32 repeated_sint32 = 35;
  public int[] repeatedSint32;

  // repeated sint64 repeated_sint64 = 36;
  public long[] repeatedSint64;

  // repeated fixed32 repeated_fixed32 = 37;
  public int[] repeatedFixed32;

  // repeated fixed64 repeated_fixed64 = 38;
  public long[] repeatedFixed64;

  // repeated sfixed32 repeated_sfixed32 = 39;
  public int[] repeatedSfixed32;

  // repeated sfixed64 repeated_sfixed64 = 40;
  public long[] repeatedSfixed64;

  // repeated float repeated_float = 41;
  public float[] repeatedFloat;

  // repeated double repeated_double = 42;
  public double[] repeatedDouble;

  // repeated bool repeated_bool = 43;
  public boolean[] repeatedBool;

  // repeated string repeated_string = 44;
  public java.lang.String[] repeatedString;

  // repeated bytes repeated_bytes = 45;
  public byte[][] repeatedBytes;

  // repeated group RepeatedGroup = 46 {
  public com.yingshibao.app.idl.TestAllTypes.RepeatedGroup[] repeatedGroup;

  // repeated .yingshibao.TestAllTypes.NestedMessage repeated_nested_message = 48;
  public com.yingshibao.app.idl.TestAllTypes.NestedMessage[] repeatedNestedMessage;

  // repeated .yingshibao.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  public int[] repeatedNestedEnum;

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  public java.lang.String[] repeatedStringPiece;

  // repeated string repeated_cord = 55 [ctype = CORD];
  public java.lang.String[] repeatedCord;

  // repeated .yingshibao.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
  public com.yingshibao.app.idl.TestAllTypes.NestedMessage[] repeatedLazyMessage;

  // optional int32 default_int32 = 61 [default = 41];
  public int defaultInt32;

  // optional int64 default_int64 = 62 [default = 42];
  public long defaultInt64;

  // optional uint32 default_uint32 = 63 [default = 43];
  public int defaultUint32;

  // optional uint64 default_uint64 = 64 [default = 44];
  public long defaultUint64;

  // optional sint32 default_sint32 = 65 [default = -45];
  public int defaultSint32;

  // optional sint64 default_sint64 = 66 [default = 46];
  public long defaultSint64;

  // optional fixed32 default_fixed32 = 67 [default = 47];
  public int defaultFixed32;

  // optional fixed64 default_fixed64 = 68 [default = 48];
  public long defaultFixed64;

  // optional sfixed32 default_sfixed32 = 69 [default = 49];
  public int defaultSfixed32;

  // optional sfixed64 default_sfixed64 = 70 [default = -50];
  public long defaultSfixed64;

  // optional float default_float = 71 [default = 51.5];
  public float defaultFloat;

  // optional double default_double = 72 [default = 52000];
  public double defaultDouble;

  // optional bool default_bool = 73 [default = true];
  public boolean defaultBool;

  // optional string default_string = 74 [default = "hello"];
  public java.lang.String defaultString;

  // optional bytes default_bytes = 75 [default = "world"];
  private static byte[] _defaultBytesDefault;
  public byte[] defaultBytes;

  // optional .yingshibao.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
  public int defaultNestedEnum;

  // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
  public java.lang.String defaultStringPiece;

  // optional string default_cord = 85 [default = "123", ctype = CORD];
  public java.lang.String defaultCord;

  // optional uint32 oneof_uint32 = 111;
  public int oneofUint32;

  // optional .yingshibao.TestAllTypes.NestedMessage oneof_nested_message = 112;
  public com.yingshibao.app.idl.TestAllTypes.NestedMessage oneofNestedMessage;

  // optional string oneof_string = 113;
  public java.lang.String oneofString;

  // optional bytes oneof_bytes = 114;
  public byte[] oneofBytes;

  private static volatile boolean _classInitialized;

  public TestAllTypes() {
    // Lazily initializes the field defaults
    if (!_classInitialized) {
      synchronized (
          com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (!_classInitialized) {
          _defaultBytesDefault = com.google.protobuf.nano.InternalNano.bytesDefaultValue("world");
          _classInitialized = true;
        }
      }
    }
    clear();
  }

  public TestAllTypes clear() {
    optionalInt32 = 0;
    optionalInt64 = 0L;
    optionalUint32 = 0;
    optionalUint64 = 0L;
    optionalSint32 = 0;
    optionalSint64 = 0L;
    optionalFixed32 = 0;
    optionalFixed64 = 0L;
    optionalSfixed32 = 0;
    optionalSfixed64 = 0L;
    optionalFloat = 0F;
    optionalDouble = 0D;
    optionalBool = false;
    optionalString = "";
    optionalBytes = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES;
    optionalGroup = null;
    optionalNestedMessage = null;
    optionalNestedEnum = com.yingshibao.app.idl.TestAllTypes.FOO;
    optionalStringPiece = "";
    optionalCord = "";
    optionalLazyMessage = null;
    repeatedInt32 = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
    repeatedInt64 = com.google.protobuf.nano.WireFormatNano.EMPTY_LONG_ARRAY;
    repeatedUint32 = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
    repeatedUint64 = com.google.protobuf.nano.WireFormatNano.EMPTY_LONG_ARRAY;
    repeatedSint32 = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
    repeatedSint64 = com.google.protobuf.nano.WireFormatNano.EMPTY_LONG_ARRAY;
    repeatedFixed32 = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
    repeatedFixed64 = com.google.protobuf.nano.WireFormatNano.EMPTY_LONG_ARRAY;
    repeatedSfixed32 = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
    repeatedSfixed64 = com.google.protobuf.nano.WireFormatNano.EMPTY_LONG_ARRAY;
    repeatedFloat = com.google.protobuf.nano.WireFormatNano.EMPTY_FLOAT_ARRAY;
    repeatedDouble = com.google.protobuf.nano.WireFormatNano.EMPTY_DOUBLE_ARRAY;
    repeatedBool = com.google.protobuf.nano.WireFormatNano.EMPTY_BOOLEAN_ARRAY;
    repeatedString = com.google.protobuf.nano.WireFormatNano.EMPTY_STRING_ARRAY;
    repeatedBytes = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES_ARRAY;
    repeatedGroup = com.yingshibao.app.idl.TestAllTypes.RepeatedGroup.emptyArray();
    repeatedNestedMessage = com.yingshibao.app.idl.TestAllTypes.NestedMessage.emptyArray();
    repeatedNestedEnum = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
    repeatedStringPiece = com.google.protobuf.nano.WireFormatNano.EMPTY_STRING_ARRAY;
    repeatedCord = com.google.protobuf.nano.WireFormatNano.EMPTY_STRING_ARRAY;
    repeatedLazyMessage = com.yingshibao.app.idl.TestAllTypes.NestedMessage.emptyArray();
    defaultInt32 = 41;
    defaultInt64 = 42L;
    defaultUint32 = 43;
    defaultUint64 = 44L;
    defaultSint32 = -45;
    defaultSint64 = 46L;
    defaultFixed32 = 47;
    defaultFixed64 = 48L;
    defaultSfixed32 = 49;
    defaultSfixed64 = -50L;
    defaultFloat = 51.5F;
    defaultDouble = 52000D;
    defaultBool = true;
    defaultString = "hello";
    defaultBytes = _defaultBytesDefault.clone();
    defaultNestedEnum = com.yingshibao.app.idl.TestAllTypes.BAR;
    defaultStringPiece = "abc";
    defaultCord = "123";
    oneofUint32 = 0;
    oneofNestedMessage = null;
    oneofString = "";
    oneofBytes = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES;
    cachedSize = -1;
    return this;
  }

  @Override
  public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
      throws java.io.IOException {
    if (this.optionalInt32 != 0) {
      output.writeInt32(1, this.optionalInt32);
    }
    if (this.optionalInt64 != 0L) {
      output.writeInt64(2, this.optionalInt64);
    }
    if (this.optionalUint32 != 0) {
      output.writeUInt32(3, this.optionalUint32);
    }
    if (this.optionalUint64 != 0L) {
      output.writeUInt64(4, this.optionalUint64);
    }
    if (this.optionalSint32 != 0) {
      output.writeSInt32(5, this.optionalSint32);
    }
    if (this.optionalSint64 != 0L) {
      output.writeSInt64(6, this.optionalSint64);
    }
    if (this.optionalFixed32 != 0) {
      output.writeFixed32(7, this.optionalFixed32);
    }
    if (this.optionalFixed64 != 0L) {
      output.writeFixed64(8, this.optionalFixed64);
    }
    if (this.optionalSfixed32 != 0) {
      output.writeSFixed32(9, this.optionalSfixed32);
    }
    if (this.optionalSfixed64 != 0L) {
      output.writeSFixed64(10, this.optionalSfixed64);
    }
    if (java.lang.Float.floatToIntBits(this.optionalFloat)
        != java.lang.Float.floatToIntBits(0F)) {
      output.writeFloat(11, this.optionalFloat);
    }
    if (java.lang.Double.doubleToLongBits(this.optionalDouble)
        != java.lang.Double.doubleToLongBits(0D)) {
      output.writeDouble(12, this.optionalDouble);
    }
    if (this.optionalBool != false) {
      output.writeBool(13, this.optionalBool);
    }
    if (!this.optionalString.equals("")) {
      output.writeString(14, this.optionalString);
    }
    if (!java.util.Arrays.equals(this.optionalBytes, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
      output.writeBytes(15, this.optionalBytes);
    }
    if (this.optionalGroup != null) {
      output.writeGroup(16, this.optionalGroup);
    }
    if (this.optionalNestedMessage != null) {
      output.writeMessage(18, this.optionalNestedMessage);
    }
    if (this.optionalNestedEnum != com.yingshibao.app.idl.TestAllTypes.FOO) {
      output.writeInt32(21, this.optionalNestedEnum);
    }
    if (!this.optionalStringPiece.equals("")) {
      output.writeString(24, this.optionalStringPiece);
    }
    if (!this.optionalCord.equals("")) {
      output.writeString(25, this.optionalCord);
    }
    if (this.optionalLazyMessage != null) {
      output.writeMessage(27, this.optionalLazyMessage);
    }
    if (this.repeatedInt32 != null && this.repeatedInt32.length > 0) {
      for (int i = 0; i < this.repeatedInt32.length; i++) {
        output.writeInt32(31, this.repeatedInt32[i]);
      }
    }
    if (this.repeatedInt64 != null && this.repeatedInt64.length > 0) {
      for (int i = 0; i < this.repeatedInt64.length; i++) {
        output.writeInt64(32, this.repeatedInt64[i]);
      }
    }
    if (this.repeatedUint32 != null && this.repeatedUint32.length > 0) {
      for (int i = 0; i < this.repeatedUint32.length; i++) {
        output.writeUInt32(33, this.repeatedUint32[i]);
      }
    }
    if (this.repeatedUint64 != null && this.repeatedUint64.length > 0) {
      for (int i = 0; i < this.repeatedUint64.length; i++) {
        output.writeUInt64(34, this.repeatedUint64[i]);
      }
    }
    if (this.repeatedSint32 != null && this.repeatedSint32.length > 0) {
      for (int i = 0; i < this.repeatedSint32.length; i++) {
        output.writeSInt32(35, this.repeatedSint32[i]);
      }
    }
    if (this.repeatedSint64 != null && this.repeatedSint64.length > 0) {
      for (int i = 0; i < this.repeatedSint64.length; i++) {
        output.writeSInt64(36, this.repeatedSint64[i]);
      }
    }
    if (this.repeatedFixed32 != null && this.repeatedFixed32.length > 0) {
      for (int i = 0; i < this.repeatedFixed32.length; i++) {
        output.writeFixed32(37, this.repeatedFixed32[i]);
      }
    }
    if (this.repeatedFixed64 != null && this.repeatedFixed64.length > 0) {
      for (int i = 0; i < this.repeatedFixed64.length; i++) {
        output.writeFixed64(38, this.repeatedFixed64[i]);
      }
    }
    if (this.repeatedSfixed32 != null && this.repeatedSfixed32.length > 0) {
      for (int i = 0; i < this.repeatedSfixed32.length; i++) {
        output.writeSFixed32(39, this.repeatedSfixed32[i]);
      }
    }
    if (this.repeatedSfixed64 != null && this.repeatedSfixed64.length > 0) {
      for (int i = 0; i < this.repeatedSfixed64.length; i++) {
        output.writeSFixed64(40, this.repeatedSfixed64[i]);
      }
    }
    if (this.repeatedFloat != null && this.repeatedFloat.length > 0) {
      for (int i = 0; i < this.repeatedFloat.length; i++) {
        output.writeFloat(41, this.repeatedFloat[i]);
      }
    }
    if (this.repeatedDouble != null && this.repeatedDouble.length > 0) {
      for (int i = 0; i < this.repeatedDouble.length; i++) {
        output.writeDouble(42, this.repeatedDouble[i]);
      }
    }
    if (this.repeatedBool != null && this.repeatedBool.length > 0) {
      for (int i = 0; i < this.repeatedBool.length; i++) {
        output.writeBool(43, this.repeatedBool[i]);
      }
    }
    if (this.repeatedString != null && this.repeatedString.length > 0) {
      for (int i = 0; i < this.repeatedString.length; i++) {
        java.lang.String element = this.repeatedString[i];
        if (element != null) {
          output.writeString(44, element);
        }
      }
    }
    if (this.repeatedBytes != null && this.repeatedBytes.length > 0) {
      for (int i = 0; i < this.repeatedBytes.length; i++) {
        byte[] element = this.repeatedBytes[i];
        if (element != null) {
          output.writeBytes(45, element);
        }
      }
    }
    if (this.repeatedGroup != null && this.repeatedGroup.length > 0) {
      for (int i = 0; i < this.repeatedGroup.length; i++) {
        com.yingshibao.app.idl.TestAllTypes.RepeatedGroup element = this.repeatedGroup[i];
        if (element != null) {
          output.writeGroup(46, element);
        }
      }
    }
    if (this.repeatedNestedMessage != null && this.repeatedNestedMessage.length > 0) {
      for (int i = 0; i < this.repeatedNestedMessage.length; i++) {
        com.yingshibao.app.idl.TestAllTypes.NestedMessage element = this.repeatedNestedMessage[i];
        if (element != null) {
          output.writeMessage(48, element);
        }
      }
    }
    if (this.repeatedNestedEnum != null && this.repeatedNestedEnum.length > 0) {
      for (int i = 0; i < this.repeatedNestedEnum.length; i++) {
        output.writeInt32(51, this.repeatedNestedEnum[i]);
      }
    }
    if (this.repeatedStringPiece != null && this.repeatedStringPiece.length > 0) {
      for (int i = 0; i < this.repeatedStringPiece.length; i++) {
        java.lang.String element = this.repeatedStringPiece[i];
        if (element != null) {
          output.writeString(54, element);
        }
      }
    }
    if (this.repeatedCord != null && this.repeatedCord.length > 0) {
      for (int i = 0; i < this.repeatedCord.length; i++) {
        java.lang.String element = this.repeatedCord[i];
        if (element != null) {
          output.writeString(55, element);
        }
      }
    }
    if (this.repeatedLazyMessage != null && this.repeatedLazyMessage.length > 0) {
      for (int i = 0; i < this.repeatedLazyMessage.length; i++) {
        com.yingshibao.app.idl.TestAllTypes.NestedMessage element = this.repeatedLazyMessage[i];
        if (element != null) {
          output.writeMessage(57, element);
        }
      }
    }
    if (this.defaultInt32 != 41) {
      output.writeInt32(61, this.defaultInt32);
    }
    if (this.defaultInt64 != 42L) {
      output.writeInt64(62, this.defaultInt64);
    }
    if (this.defaultUint32 != 43) {
      output.writeUInt32(63, this.defaultUint32);
    }
    if (this.defaultUint64 != 44L) {
      output.writeUInt64(64, this.defaultUint64);
    }
    if (this.defaultSint32 != -45) {
      output.writeSInt32(65, this.defaultSint32);
    }
    if (this.defaultSint64 != 46L) {
      output.writeSInt64(66, this.defaultSint64);
    }
    if (this.defaultFixed32 != 47) {
      output.writeFixed32(67, this.defaultFixed32);
    }
    if (this.defaultFixed64 != 48L) {
      output.writeFixed64(68, this.defaultFixed64);
    }
    if (this.defaultSfixed32 != 49) {
      output.writeSFixed32(69, this.defaultSfixed32);
    }
    if (this.defaultSfixed64 != -50L) {
      output.writeSFixed64(70, this.defaultSfixed64);
    }
    if (java.lang.Float.floatToIntBits(this.defaultFloat)
        != java.lang.Float.floatToIntBits(51.5F)) {
      output.writeFloat(71, this.defaultFloat);
    }
    if (java.lang.Double.doubleToLongBits(this.defaultDouble)
        != java.lang.Double.doubleToLongBits(52000D)) {
      output.writeDouble(72, this.defaultDouble);
    }
    if (this.defaultBool != true) {
      output.writeBool(73, this.defaultBool);
    }
    if (!this.defaultString.equals("hello")) {
      output.writeString(74, this.defaultString);
    }
    if (!java.util.Arrays.equals(this.defaultBytes, _defaultBytesDefault)) {
      output.writeBytes(75, this.defaultBytes);
    }
    if (this.defaultNestedEnum != com.yingshibao.app.idl.TestAllTypes.BAR) {
      output.writeInt32(81, this.defaultNestedEnum);
    }
    if (!this.defaultStringPiece.equals("abc")) {
      output.writeString(84, this.defaultStringPiece);
    }
    if (!this.defaultCord.equals("123")) {
      output.writeString(85, this.defaultCord);
    }
    if (this.oneofUint32 != 0) {
      output.writeUInt32(111, this.oneofUint32);
    }
    if (this.oneofNestedMessage != null) {
      output.writeMessage(112, this.oneofNestedMessage);
    }
    if (!this.oneofString.equals("")) {
      output.writeString(113, this.oneofString);
    }
    if (!java.util.Arrays.equals(this.oneofBytes, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
      output.writeBytes(114, this.oneofBytes);
    }
    super.writeTo(output);
  }

  @Override
  protected int computeSerializedSize() {
    int size = super.computeSerializedSize();
    if (this.optionalInt32 != 0) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(1, this.optionalInt32);
    }
    if (this.optionalInt64 != 0L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt64Size(2, this.optionalInt64);
    }
    if (this.optionalUint32 != 0) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt32Size(3, this.optionalUint32);
    }
    if (this.optionalUint64 != 0L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt64Size(4, this.optionalUint64);
    }
    if (this.optionalSint32 != 0) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeSInt32Size(5, this.optionalSint32);
    }
    if (this.optionalSint64 != 0L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeSInt64Size(6, this.optionalSint64);
    }
    if (this.optionalFixed32 != 0) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeFixed32Size(7, this.optionalFixed32);
    }
    if (this.optionalFixed64 != 0L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeFixed64Size(8, this.optionalFixed64);
    }
    if (this.optionalSfixed32 != 0) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeSFixed32Size(9, this.optionalSfixed32);
    }
    if (this.optionalSfixed64 != 0L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeSFixed64Size(10, this.optionalSfixed64);
    }
    if (java.lang.Float.floatToIntBits(this.optionalFloat)
        != java.lang.Float.floatToIntBits(0F)) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeFloatSize(11, this.optionalFloat);
    }
    if (java.lang.Double.doubleToLongBits(this.optionalDouble)
        != java.lang.Double.doubleToLongBits(0D)) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeDoubleSize(12, this.optionalDouble);
    }
    if (this.optionalBool != false) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeBoolSize(13, this.optionalBool);
    }
    if (!this.optionalString.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(14, this.optionalString);
    }
    if (!java.util.Arrays.equals(this.optionalBytes, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeBytesSize(15, this.optionalBytes);
    }
    if (this.optionalGroup != null) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeGroupSize(16, this.optionalGroup);
    }
    if (this.optionalNestedMessage != null) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeMessageSize(18, this.optionalNestedMessage);
    }
    if (this.optionalNestedEnum != com.yingshibao.app.idl.TestAllTypes.FOO) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(21, this.optionalNestedEnum);
    }
    if (!this.optionalStringPiece.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(24, this.optionalStringPiece);
    }
    if (!this.optionalCord.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(25, this.optionalCord);
    }
    if (this.optionalLazyMessage != null) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeMessageSize(27, this.optionalLazyMessage);
    }
    if (this.repeatedInt32 != null && this.repeatedInt32.length > 0) {
      int dataSize = 0;
      for (int i = 0; i < this.repeatedInt32.length; i++) {
        int element = this.repeatedInt32[i];
        dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * this.repeatedInt32.length;
    }
    if (this.repeatedInt64 != null && this.repeatedInt64.length > 0) {
      int dataSize = 0;
      for (int i = 0; i < this.repeatedInt64.length; i++) {
        long element = this.repeatedInt64[i];
        dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * this.repeatedInt64.length;
    }
    if (this.repeatedUint32 != null && this.repeatedUint32.length > 0) {
      int dataSize = 0;
      for (int i = 0; i < this.repeatedUint32.length; i++) {
        int element = this.repeatedUint32[i];
        dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * this.repeatedUint32.length;
    }
    if (this.repeatedUint64 != null && this.repeatedUint64.length > 0) {
      int dataSize = 0;
      for (int i = 0; i < this.repeatedUint64.length; i++) {
        long element = this.repeatedUint64[i];
        dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * this.repeatedUint64.length;
    }
    if (this.repeatedSint32 != null && this.repeatedSint32.length > 0) {
      int dataSize = 0;
      for (int i = 0; i < this.repeatedSint32.length; i++) {
        int element = this.repeatedSint32[i];
        dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeSInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * this.repeatedSint32.length;
    }
    if (this.repeatedSint64 != null && this.repeatedSint64.length > 0) {
      int dataSize = 0;
      for (int i = 0; i < this.repeatedSint64.length; i++) {
        long element = this.repeatedSint64[i];
        dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeSInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * this.repeatedSint64.length;
    }
    if (this.repeatedFixed32 != null && this.repeatedFixed32.length > 0) {
      int dataSize = 4 * this.repeatedFixed32.length;
      size += dataSize;
      size += 2 * this.repeatedFixed32.length;
    }
    if (this.repeatedFixed64 != null && this.repeatedFixed64.length > 0) {
      int dataSize = 8 * this.repeatedFixed64.length;
      size += dataSize;
      size += 2 * this.repeatedFixed64.length;
    }
    if (this.repeatedSfixed32 != null && this.repeatedSfixed32.length > 0) {
      int dataSize = 4 * this.repeatedSfixed32.length;
      size += dataSize;
      size += 2 * this.repeatedSfixed32.length;
    }
    if (this.repeatedSfixed64 != null && this.repeatedSfixed64.length > 0) {
      int dataSize = 8 * this.repeatedSfixed64.length;
      size += dataSize;
      size += 2 * this.repeatedSfixed64.length;
    }
    if (this.repeatedFloat != null && this.repeatedFloat.length > 0) {
      int dataSize = 4 * this.repeatedFloat.length;
      size += dataSize;
      size += 2 * this.repeatedFloat.length;
    }
    if (this.repeatedDouble != null && this.repeatedDouble.length > 0) {
      int dataSize = 8 * this.repeatedDouble.length;
      size += dataSize;
      size += 2 * this.repeatedDouble.length;
    }
    if (this.repeatedBool != null && this.repeatedBool.length > 0) {
      int dataSize = 1 * this.repeatedBool.length;
      size += dataSize;
      size += 2 * this.repeatedBool.length;
    }
    if (this.repeatedString != null && this.repeatedString.length > 0) {
      int dataCount = 0;
      int dataSize = 0;
      for (int i = 0; i < this.repeatedString.length; i++) {
        java.lang.String element = this.repeatedString[i];
        if (element != null) {
          dataCount++;
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSizeNoTag(element);
        }
      }
      size += dataSize;
      size += 2 * dataCount;
    }
    if (this.repeatedBytes != null && this.repeatedBytes.length > 0) {
      int dataCount = 0;
      int dataSize = 0;
      for (int i = 0; i < this.repeatedBytes.length; i++) {
        byte[] element = this.repeatedBytes[i];
        if (element != null) {
          dataCount++;
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeBytesSizeNoTag(element);
        }
      }
      size += dataSize;
      size += 2 * dataCount;
    }
    if (this.repeatedGroup != null && this.repeatedGroup.length > 0) {
      for (int i = 0; i < this.repeatedGroup.length; i++) {
        com.yingshibao.app.idl.TestAllTypes.RepeatedGroup element = this.repeatedGroup[i];
        if (element != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeGroupSize(46, element);
        }
      }
    }
    if (this.repeatedNestedMessage != null && this.repeatedNestedMessage.length > 0) {
      for (int i = 0; i < this.repeatedNestedMessage.length; i++) {
        com.yingshibao.app.idl.TestAllTypes.NestedMessage element = this.repeatedNestedMessage[i];
        if (element != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(48, element);
        }
      }
    }
    if (this.repeatedNestedEnum != null && this.repeatedNestedEnum.length > 0) {
      int dataSize = 0;
      for (int i = 0; i < this.repeatedNestedEnum.length; i++) {
        int element = this.repeatedNestedEnum[i];
        dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * this.repeatedNestedEnum.length;
    }
    if (this.repeatedStringPiece != null && this.repeatedStringPiece.length > 0) {
      int dataCount = 0;
      int dataSize = 0;
      for (int i = 0; i < this.repeatedStringPiece.length; i++) {
        java.lang.String element = this.repeatedStringPiece[i];
        if (element != null) {
          dataCount++;
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSizeNoTag(element);
        }
      }
      size += dataSize;
      size += 2 * dataCount;
    }
    if (this.repeatedCord != null && this.repeatedCord.length > 0) {
      int dataCount = 0;
      int dataSize = 0;
      for (int i = 0; i < this.repeatedCord.length; i++) {
        java.lang.String element = this.repeatedCord[i];
        if (element != null) {
          dataCount++;
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSizeNoTag(element);
        }
      }
      size += dataSize;
      size += 2 * dataCount;
    }
    if (this.repeatedLazyMessage != null && this.repeatedLazyMessage.length > 0) {
      for (int i = 0; i < this.repeatedLazyMessage.length; i++) {
        com.yingshibao.app.idl.TestAllTypes.NestedMessage element = this.repeatedLazyMessage[i];
        if (element != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(57, element);
        }
      }
    }
    if (this.defaultInt32 != 41) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(61, this.defaultInt32);
    }
    if (this.defaultInt64 != 42L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt64Size(62, this.defaultInt64);
    }
    if (this.defaultUint32 != 43) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt32Size(63, this.defaultUint32);
    }
    if (this.defaultUint64 != 44L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt64Size(64, this.defaultUint64);
    }
    if (this.defaultSint32 != -45) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeSInt32Size(65, this.defaultSint32);
    }
    if (this.defaultSint64 != 46L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeSInt64Size(66, this.defaultSint64);
    }
    if (this.defaultFixed32 != 47) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeFixed32Size(67, this.defaultFixed32);
    }
    if (this.defaultFixed64 != 48L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeFixed64Size(68, this.defaultFixed64);
    }
    if (this.defaultSfixed32 != 49) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeSFixed32Size(69, this.defaultSfixed32);
    }
    if (this.defaultSfixed64 != -50L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeSFixed64Size(70, this.defaultSfixed64);
    }
    if (java.lang.Float.floatToIntBits(this.defaultFloat)
        != java.lang.Float.floatToIntBits(51.5F)) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeFloatSize(71, this.defaultFloat);
    }
    if (java.lang.Double.doubleToLongBits(this.defaultDouble)
        != java.lang.Double.doubleToLongBits(52000D)) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeDoubleSize(72, this.defaultDouble);
    }
    if (this.defaultBool != true) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeBoolSize(73, this.defaultBool);
    }
    if (!this.defaultString.equals("hello")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(74, this.defaultString);
    }
    if (!java.util.Arrays.equals(this.defaultBytes, _defaultBytesDefault)) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeBytesSize(75, this.defaultBytes);
    }
    if (this.defaultNestedEnum != com.yingshibao.app.idl.TestAllTypes.BAR) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(81, this.defaultNestedEnum);
    }
    if (!this.defaultStringPiece.equals("abc")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(84, this.defaultStringPiece);
    }
    if (!this.defaultCord.equals("123")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(85, this.defaultCord);
    }
    if (this.oneofUint32 != 0) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt32Size(111, this.oneofUint32);
    }
    if (this.oneofNestedMessage != null) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeMessageSize(112, this.oneofNestedMessage);
    }
    if (!this.oneofString.equals("")) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeStringSize(113, this.oneofString);
    }
    if (!java.util.Arrays.equals(this.oneofBytes, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeBytesSize(114, this.oneofBytes);
    }
    return size;
  }

  @Override
  public TestAllTypes mergeFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return this;
        default: {
          if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
            return this;
          }
          break;
        }
        case 8: {
          this.optionalInt32 = input.readInt32();
          break;
        }
        case 16: {
          this.optionalInt64 = input.readInt64();
          break;
        }
        case 24: {
          this.optionalUint32 = input.readUInt32();
          break;
        }
        case 32: {
          this.optionalUint64 = input.readUInt64();
          break;
        }
        case 40: {
          this.optionalSint32 = input.readSInt32();
          break;
        }
        case 48: {
          this.optionalSint64 = input.readSInt64();
          break;
        }
        case 61: {
          this.optionalFixed32 = input.readFixed32();
          break;
        }
        case 65: {
          this.optionalFixed64 = input.readFixed64();
          break;
        }
        case 77: {
          this.optionalSfixed32 = input.readSFixed32();
          break;
        }
        case 81: {
          this.optionalSfixed64 = input.readSFixed64();
          break;
        }
        case 93: {
          this.optionalFloat = input.readFloat();
          break;
        }
        case 97: {
          this.optionalDouble = input.readDouble();
          break;
        }
        case 104: {
          this.optionalBool = input.readBool();
          break;
        }
        case 114: {
          this.optionalString = input.readString();
          break;
        }
        case 122: {
          this.optionalBytes = input.readBytes();
          break;
        }
        case 131: {
          if (this.optionalGroup == null) {
            this.optionalGroup = new com.yingshibao.app.idl.TestAllTypes.OptionalGroup();
          }
          input.readGroup(this.optionalGroup, 16);
          break;
        }
        case 146: {
          if (this.optionalNestedMessage == null) {
            this.optionalNestedMessage = new com.yingshibao.app.idl.TestAllTypes.NestedMessage();
          }
          input.readMessage(this.optionalNestedMessage);
          break;
        }
        case 168: {
          int value = input.readInt32();
          switch (value) {
            case com.yingshibao.app.idl.TestAllTypes.FOO:
            case com.yingshibao.app.idl.TestAllTypes.BAR:
            case com.yingshibao.app.idl.TestAllTypes.BAZ:
            case com.yingshibao.app.idl.TestAllTypes.NEG:
              this.optionalNestedEnum = value;
              break;
          }
          break;
        }
        case 194: {
          this.optionalStringPiece = input.readString();
          break;
        }
        case 202: {
          this.optionalCord = input.readString();
          break;
        }
        case 218: {
          if (this.optionalLazyMessage == null) {
            this.optionalLazyMessage = new com.yingshibao.app.idl.TestAllTypes.NestedMessage();
          }
          input.readMessage(this.optionalLazyMessage);
          break;
        }
        case 248: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 248);
          int i = this.repeatedInt32 == null ? 0 : this.repeatedInt32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedInt32, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readInt32();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readInt32();
          this.repeatedInt32 = newArray;
          break;
        }
        case 250: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          // First pass to compute array length.
          int arrayLength = 0;
          int startPos = input.getPosition();
          while (input.getBytesUntilLimit() > 0) {
            input.readInt32();
            arrayLength++;
          }
          input.rewindToPosition(startPos);
          int i = this.repeatedInt32 == null ? 0 : this.repeatedInt32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedInt32, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readInt32();
          }
          this.repeatedInt32 = newArray;
          input.popLimit(limit);
          break;
        }
        case 256: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 256);
          int i = this.repeatedInt64 == null ? 0 : this.repeatedInt64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedInt64, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readInt64();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readInt64();
          this.repeatedInt64 = newArray;
          break;
        }
        case 258: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          // First pass to compute array length.
          int arrayLength = 0;
          int startPos = input.getPosition();
          while (input.getBytesUntilLimit() > 0) {
            input.readInt64();
            arrayLength++;
          }
          input.rewindToPosition(startPos);
          int i = this.repeatedInt64 == null ? 0 : this.repeatedInt64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedInt64, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readInt64();
          }
          this.repeatedInt64 = newArray;
          input.popLimit(limit);
          break;
        }
        case 264: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 264);
          int i = this.repeatedUint32 == null ? 0 : this.repeatedUint32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedUint32, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readUInt32();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readUInt32();
          this.repeatedUint32 = newArray;
          break;
        }
        case 266: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          // First pass to compute array length.
          int arrayLength = 0;
          int startPos = input.getPosition();
          while (input.getBytesUntilLimit() > 0) {
            input.readUInt32();
            arrayLength++;
          }
          input.rewindToPosition(startPos);
          int i = this.repeatedUint32 == null ? 0 : this.repeatedUint32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedUint32, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readUInt32();
          }
          this.repeatedUint32 = newArray;
          input.popLimit(limit);
          break;
        }
        case 272: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 272);
          int i = this.repeatedUint64 == null ? 0 : this.repeatedUint64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedUint64, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readUInt64();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readUInt64();
          this.repeatedUint64 = newArray;
          break;
        }
        case 274: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          // First pass to compute array length.
          int arrayLength = 0;
          int startPos = input.getPosition();
          while (input.getBytesUntilLimit() > 0) {
            input.readUInt64();
            arrayLength++;
          }
          input.rewindToPosition(startPos);
          int i = this.repeatedUint64 == null ? 0 : this.repeatedUint64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedUint64, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readUInt64();
          }
          this.repeatedUint64 = newArray;
          input.popLimit(limit);
          break;
        }
        case 280: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 280);
          int i = this.repeatedSint32 == null ? 0 : this.repeatedSint32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedSint32, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readSInt32();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readSInt32();
          this.repeatedSint32 = newArray;
          break;
        }
        case 282: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          // First pass to compute array length.
          int arrayLength = 0;
          int startPos = input.getPosition();
          while (input.getBytesUntilLimit() > 0) {
            input.readSInt32();
            arrayLength++;
          }
          input.rewindToPosition(startPos);
          int i = this.repeatedSint32 == null ? 0 : this.repeatedSint32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedSint32, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readSInt32();
          }
          this.repeatedSint32 = newArray;
          input.popLimit(limit);
          break;
        }
        case 288: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 288);
          int i = this.repeatedSint64 == null ? 0 : this.repeatedSint64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedSint64, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readSInt64();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readSInt64();
          this.repeatedSint64 = newArray;
          break;
        }
        case 290: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          // First pass to compute array length.
          int arrayLength = 0;
          int startPos = input.getPosition();
          while (input.getBytesUntilLimit() > 0) {
            input.readSInt64();
            arrayLength++;
          }
          input.rewindToPosition(startPos);
          int i = this.repeatedSint64 == null ? 0 : this.repeatedSint64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedSint64, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readSInt64();
          }
          this.repeatedSint64 = newArray;
          input.popLimit(limit);
          break;
        }
        case 301: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 301);
          int i = this.repeatedFixed32 == null ? 0 : this.repeatedFixed32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedFixed32, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readFixed32();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readFixed32();
          this.repeatedFixed32 = newArray;
          break;
        }
        case 298: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          int arrayLength = length / 4;
          int i = this.repeatedFixed32 == null ? 0 : this.repeatedFixed32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedFixed32, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readFixed32();
          }
          this.repeatedFixed32 = newArray;
          input.popLimit(limit);
          break;
        }
        case 305: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 305);
          int i = this.repeatedFixed64 == null ? 0 : this.repeatedFixed64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedFixed64, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readFixed64();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readFixed64();
          this.repeatedFixed64 = newArray;
          break;
        }
        case 306: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          int arrayLength = length / 8;
          int i = this.repeatedFixed64 == null ? 0 : this.repeatedFixed64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedFixed64, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readFixed64();
          }
          this.repeatedFixed64 = newArray;
          input.popLimit(limit);
          break;
        }
        case 317: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 317);
          int i = this.repeatedSfixed32 == null ? 0 : this.repeatedSfixed32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedSfixed32, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readSFixed32();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readSFixed32();
          this.repeatedSfixed32 = newArray;
          break;
        }
        case 314: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          int arrayLength = length / 4;
          int i = this.repeatedSfixed32 == null ? 0 : this.repeatedSfixed32.length;
          int[] newArray = new int[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedSfixed32, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readSFixed32();
          }
          this.repeatedSfixed32 = newArray;
          input.popLimit(limit);
          break;
        }
        case 321: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 321);
          int i = this.repeatedSfixed64 == null ? 0 : this.repeatedSfixed64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedSfixed64, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readSFixed64();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readSFixed64();
          this.repeatedSfixed64 = newArray;
          break;
        }
        case 322: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          int arrayLength = length / 8;
          int i = this.repeatedSfixed64 == null ? 0 : this.repeatedSfixed64.length;
          long[] newArray = new long[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedSfixed64, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readSFixed64();
          }
          this.repeatedSfixed64 = newArray;
          input.popLimit(limit);
          break;
        }
        case 333: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 333);
          int i = this.repeatedFloat == null ? 0 : this.repeatedFloat.length;
          float[] newArray = new float[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedFloat, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readFloat();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readFloat();
          this.repeatedFloat = newArray;
          break;
        }
        case 330: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          int arrayLength = length / 4;
          int i = this.repeatedFloat == null ? 0 : this.repeatedFloat.length;
          float[] newArray = new float[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedFloat, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readFloat();
          }
          this.repeatedFloat = newArray;
          input.popLimit(limit);
          break;
        }
        case 337: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 337);
          int i = this.repeatedDouble == null ? 0 : this.repeatedDouble.length;
          double[] newArray = new double[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedDouble, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readDouble();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readDouble();
          this.repeatedDouble = newArray;
          break;
        }
        case 338: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          int arrayLength = length / 8;
          int i = this.repeatedDouble == null ? 0 : this.repeatedDouble.length;
          double[] newArray = new double[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedDouble, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readDouble();
          }
          this.repeatedDouble = newArray;
          input.popLimit(limit);
          break;
        }
        case 344: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 344);
          int i = this.repeatedBool == null ? 0 : this.repeatedBool.length;
          boolean[] newArray = new boolean[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedBool, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readBool();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readBool();
          this.repeatedBool = newArray;
          break;
        }
        case 346: {
          int length = input.readRawVarint32();
          int limit = input.pushLimit(length);
          // First pass to compute array length.
          int arrayLength = 0;
          int startPos = input.getPosition();
          while (input.getBytesUntilLimit() > 0) {
            input.readBool();
            arrayLength++;
          }
          input.rewindToPosition(startPos);
          int i = this.repeatedBool == null ? 0 : this.repeatedBool.length;
          boolean[] newArray = new boolean[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedBool, 0, newArray, 0, i);
          }
          for (; i < newArray.length; i++) {
            newArray[i] = input.readBool();
          }
          this.repeatedBool = newArray;
          input.popLimit(limit);
          break;
        }
        case 354: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 354);
          int i = this.repeatedString == null ? 0 : this.repeatedString.length;
          java.lang.String[] newArray = new java.lang.String[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedString, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readString();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readString();
          this.repeatedString = newArray;
          break;
        }
        case 362: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 362);
          int i = this.repeatedBytes == null ? 0 : this.repeatedBytes.length;
          byte[][] newArray = new byte[i + arrayLength][];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedBytes, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readBytes();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readBytes();
          this.repeatedBytes = newArray;
          break;
        }
        case 371: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 371);
          int i = this.repeatedGroup == null ? 0 : this.repeatedGroup.length;
          com.yingshibao.app.idl.TestAllTypes.RepeatedGroup[] newArray =
              new com.yingshibao.app.idl.TestAllTypes.RepeatedGroup[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedGroup, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = new com.yingshibao.app.idl.TestAllTypes.RepeatedGroup();
            input.readGroup(newArray[i], 46);
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = new com.yingshibao.app.idl.TestAllTypes.RepeatedGroup();
          input.readGroup(newArray[i], 46);
          this.repeatedGroup = newArray;
          break;
        }
        case 386: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 386);
          int i = this.repeatedNestedMessage == null ? 0 : this.repeatedNestedMessage.length;
          com.yingshibao.app.idl.TestAllTypes.NestedMessage[] newArray =
              new com.yingshibao.app.idl.TestAllTypes.NestedMessage[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedNestedMessage, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = new com.yingshibao.app.idl.TestAllTypes.NestedMessage();
            input.readMessage(newArray[i]);
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = new com.yingshibao.app.idl.TestAllTypes.NestedMessage();
          input.readMessage(newArray[i]);
          this.repeatedNestedMessage = newArray;
          break;
        }
        case 408: {
          int length = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 408);
          int[] validValues = new int[length];
          int validCount = 0;
          for (int i = 0; i < length; i++) {
            if (i != 0) { // tag for first value already consumed.
              input.readTag();
            }
            int value = input.readInt32();
            switch (value) {
              case com.yingshibao.app.idl.TestAllTypes.FOO:
              case com.yingshibao.app.idl.TestAllTypes.BAR:
              case com.yingshibao.app.idl.TestAllTypes.BAZ:
              case com.yingshibao.app.idl.TestAllTypes.NEG:
                validValues[validCount++] = value;
                break;
            }
          }
          if (validCount != 0) {
            int i = this.repeatedNestedEnum == null ? 0 : this.repeatedNestedEnum.length;
            if (i == 0 && validCount == validValues.length) {
              this.repeatedNestedEnum = validValues;
            } else {
              int[] newArray = new int[i + validCount];
              if (i != 0) {
                java.lang.System.arraycopy(this.repeatedNestedEnum, 0, newArray, 0, i);
              }
              java.lang.System.arraycopy(validValues, 0, newArray, i, validCount);
              this.repeatedNestedEnum = newArray;
            }
          }
          break;
        }
        case 410: {
          int bytes = input.readRawVarint32();
          int limit = input.pushLimit(bytes);
          // First pass to compute array length.
          int arrayLength = 0;
          int startPos = input.getPosition();
          while (input.getBytesUntilLimit() > 0) {
            switch (input.readInt32()) {
              case com.yingshibao.app.idl.TestAllTypes.FOO:
              case com.yingshibao.app.idl.TestAllTypes.BAR:
              case com.yingshibao.app.idl.TestAllTypes.BAZ:
              case com.yingshibao.app.idl.TestAllTypes.NEG:
                arrayLength++;
                break;
            }
          }
          if (arrayLength != 0) {
            input.rewindToPosition(startPos);
            int i = this.repeatedNestedEnum == null ? 0 : this.repeatedNestedEnum.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.repeatedNestedEnum, 0, newArray, 0, i);
            }
            while (input.getBytesUntilLimit() > 0) {
              int value = input.readInt32();
              switch (value) {
                case com.yingshibao.app.idl.TestAllTypes.FOO:
                case com.yingshibao.app.idl.TestAllTypes.BAR:
                case com.yingshibao.app.idl.TestAllTypes.BAZ:
                case com.yingshibao.app.idl.TestAllTypes.NEG:
                  newArray[i++] = value;
                  break;
              }
            }
            this.repeatedNestedEnum = newArray;
          }
          input.popLimit(limit);
          break;
        }
        case 434: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 434);
          int i = this.repeatedStringPiece == null ? 0 : this.repeatedStringPiece.length;
          java.lang.String[] newArray = new java.lang.String[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedStringPiece, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readString();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readString();
          this.repeatedStringPiece = newArray;
          break;
        }
        case 442: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 442);
          int i = this.repeatedCord == null ? 0 : this.repeatedCord.length;
          java.lang.String[] newArray = new java.lang.String[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedCord, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readString();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readString();
          this.repeatedCord = newArray;
          break;
        }
        case 458: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 458);
          int i = this.repeatedLazyMessage == null ? 0 : this.repeatedLazyMessage.length;
          com.yingshibao.app.idl.TestAllTypes.NestedMessage[] newArray =
              new com.yingshibao.app.idl.TestAllTypes.NestedMessage[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.repeatedLazyMessage, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = new com.yingshibao.app.idl.TestAllTypes.NestedMessage();
            input.readMessage(newArray[i]);
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = new com.yingshibao.app.idl.TestAllTypes.NestedMessage();
          input.readMessage(newArray[i]);
          this.repeatedLazyMessage = newArray;
          break;
        }
        case 488: {
          this.defaultInt32 = input.readInt32();
          break;
        }
        case 496: {
          this.defaultInt64 = input.readInt64();
          break;
        }
        case 504: {
          this.defaultUint32 = input.readUInt32();
          break;
        }
        case 512: {
          this.defaultUint64 = input.readUInt64();
          break;
        }
        case 520: {
          this.defaultSint32 = input.readSInt32();
          break;
        }
        case 528: {
          this.defaultSint64 = input.readSInt64();
          break;
        }
        case 541: {
          this.defaultFixed32 = input.readFixed32();
          break;
        }
        case 545: {
          this.defaultFixed64 = input.readFixed64();
          break;
        }
        case 557: {
          this.defaultSfixed32 = input.readSFixed32();
          break;
        }
        case 561: {
          this.defaultSfixed64 = input.readSFixed64();
          break;
        }
        case 573: {
          this.defaultFloat = input.readFloat();
          break;
        }
        case 577: {
          this.defaultDouble = input.readDouble();
          break;
        }
        case 584: {
          this.defaultBool = input.readBool();
          break;
        }
        case 594: {
          this.defaultString = input.readString();
          break;
        }
        case 602: {
          this.defaultBytes = input.readBytes();
          break;
        }
        case 648: {
          int value = input.readInt32();
          switch (value) {
            case com.yingshibao.app.idl.TestAllTypes.FOO:
            case com.yingshibao.app.idl.TestAllTypes.BAR:
            case com.yingshibao.app.idl.TestAllTypes.BAZ:
            case com.yingshibao.app.idl.TestAllTypes.NEG:
              this.defaultNestedEnum = value;
              break;
          }
          break;
        }
        case 674: {
          this.defaultStringPiece = input.readString();
          break;
        }
        case 682: {
          this.defaultCord = input.readString();
          break;
        }
        case 888: {
          this.oneofUint32 = input.readUInt32();
          break;
        }
        case 898: {
          if (this.oneofNestedMessage == null) {
            this.oneofNestedMessage = new com.yingshibao.app.idl.TestAllTypes.NestedMessage();
          }
          input.readMessage(this.oneofNestedMessage);
          break;
        }
        case 906: {
          this.oneofString = input.readString();
          break;
        }
        case 914: {
          this.oneofBytes = input.readBytes();
          break;
        }
      }
    }
  }

  public static TestAllTypes parseFrom(byte[] data)
      throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
    return com.google.protobuf.nano.MessageNano.mergeFrom(new TestAllTypes(), data);
  }

  public static TestAllTypes parseFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    return new TestAllTypes().mergeFrom(input);
  }
}
