// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Module.pb.h"
// @@protoc_insertion_point(imports)

@implementation ModuleRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ModuleRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CourseType ()
@property UInt32 courseType;
@property UInt32 num;
@property UInt32 pageNum;
@end

@implementation CourseType

- (BOOL) hasCourseType {
  return !!hasCourseType_;
}
- (void) setHasCourseType:(BOOL) _value_ {
  hasCourseType_ = !!_value_;
}
@synthesize courseType;
- (BOOL) hasNum {
  return !!hasNum_;
}
- (void) setHasNum:(BOOL) _value_ {
  hasNum_ = !!_value_;
}
@synthesize num;
- (BOOL) hasPageNum {
  return !!hasPageNum_;
}
- (void) setHasPageNum:(BOOL) _value_ {
  hasPageNum_ = !!_value_;
}
@synthesize pageNum;
- (instancetype) init {
  if ((self = [super init])) {
    self.courseType = 0;
    self.num = 0;
    self.pageNum = 0;
  }
  return self;
}
static CourseType* defaultCourseTypeInstance = nil;
+ (void) initialize {
  if (self == [CourseType class]) {
    defaultCourseTypeInstance = [[CourseType alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCourseTypeInstance;
}
- (instancetype) defaultInstance {
  return defaultCourseTypeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCourseType) {
    return NO;
  }
  if (!self.hasNum) {
    return NO;
  }
  if (!self.hasPageNum) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCourseType) {
    [output writeUInt32:1 value:self.courseType];
  }
  if (self.hasNum) {
    [output writeUInt32:2 value:self.num];
  }
  if (self.hasPageNum) {
    [output writeUInt32:3 value:self.pageNum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCourseType) {
    size_ += computeUInt32Size(1, self.courseType);
  }
  if (self.hasNum) {
    size_ += computeUInt32Size(2, self.num);
  }
  if (self.hasPageNum) {
    size_ += computeUInt32Size(3, self.pageNum);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CourseType*) parseFromData:(NSData*) data {
  return (CourseType*)[[[CourseType builder] mergeFromData:data] build];
}
+ (CourseType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseType*)[[[CourseType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CourseType*) parseFromInputStream:(NSInputStream*) input {
  return (CourseType*)[[[CourseType builder] mergeFromInputStream:input] build];
}
+ (CourseType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseType*)[[[CourseType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CourseType*)[[[CourseType builder] mergeFromCodedInputStream:input] build];
}
+ (CourseType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseType*)[[[CourseType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseTypeBuilder*) builder {
  return [[CourseTypeBuilder alloc] init];
}
+ (CourseTypeBuilder*) builderWithPrototype:(CourseType*) prototype {
  return [[CourseType builder] mergeFrom:prototype];
}
- (CourseTypeBuilder*) builder {
  return [CourseType builder];
}
- (CourseTypeBuilder*) toBuilder {
  return [CourseType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCourseType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"courseType", [NSNumber numberWithInteger:self.courseType]];
  }
  if (self.hasNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"num", [NSNumber numberWithInteger:self.num]];
  }
  if (self.hasPageNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pageNum", [NSNumber numberWithInteger:self.pageNum]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCourseType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.courseType] forKey: @"courseType"];
  }
  if (self.hasNum) {
    [dictionary setObject: [NSNumber numberWithInteger:self.num] forKey: @"num"];
  }
  if (self.hasPageNum) {
    [dictionary setObject: [NSNumber numberWithInteger:self.pageNum] forKey: @"pageNum"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CourseType class]]) {
    return NO;
  }
  CourseType *otherMessage = other;
  return
      self.hasCourseType == otherMessage.hasCourseType &&
      (!self.hasCourseType || self.courseType == otherMessage.courseType) &&
      self.hasNum == otherMessage.hasNum &&
      (!self.hasNum || self.num == otherMessage.num) &&
      self.hasPageNum == otherMessage.hasPageNum &&
      (!self.hasPageNum || self.pageNum == otherMessage.pageNum) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCourseType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.courseType] hash];
  }
  if (self.hasNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.num] hash];
  }
  if (self.hasPageNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pageNum] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CourseTypeBuilder()
@property (strong) CourseType* resultCourseType;
@end

@implementation CourseTypeBuilder
@synthesize resultCourseType;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCourseType = [[CourseType alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCourseType;
}
- (CourseTypeBuilder*) clear {
  self.resultCourseType = [[CourseType alloc] init];
  return self;
}
- (CourseTypeBuilder*) clone {
  return [CourseType builderWithPrototype:resultCourseType];
}
- (CourseType*) defaultInstance {
  return [CourseType defaultInstance];
}
- (CourseType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CourseType*) buildPartial {
  CourseType* returnMe = resultCourseType;
  self.resultCourseType = nil;
  return returnMe;
}
- (CourseTypeBuilder*) mergeFrom:(CourseType*) other {
  if (other == [CourseType defaultInstance]) {
    return self;
  }
  if (other.hasCourseType) {
    [self setCourseType:other.courseType];
  }
  if (other.hasNum) {
    [self setNum:other.num];
  }
  if (other.hasPageNum) {
    [self setPageNum:other.pageNum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CourseTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CourseTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCourseType:[input readUInt32]];
        break;
      }
      case 16: {
        [self setNum:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPageNum:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCourseType {
  return resultCourseType.hasCourseType;
}
- (UInt32) courseType {
  return resultCourseType.courseType;
}
- (CourseTypeBuilder*) setCourseType:(UInt32) value {
  resultCourseType.hasCourseType = YES;
  resultCourseType.courseType = value;
  return self;
}
- (CourseTypeBuilder*) clearCourseType {
  resultCourseType.hasCourseType = NO;
  resultCourseType.courseType = 0;
  return self;
}
- (BOOL) hasNum {
  return resultCourseType.hasNum;
}
- (UInt32) num {
  return resultCourseType.num;
}
- (CourseTypeBuilder*) setNum:(UInt32) value {
  resultCourseType.hasNum = YES;
  resultCourseType.num = value;
  return self;
}
- (CourseTypeBuilder*) clearNum {
  resultCourseType.hasNum = NO;
  resultCourseType.num = 0;
  return self;
}
- (BOOL) hasPageNum {
  return resultCourseType.hasPageNum;
}
- (UInt32) pageNum {
  return resultCourseType.pageNum;
}
- (CourseTypeBuilder*) setPageNum:(UInt32) value {
  resultCourseType.hasPageNum = YES;
  resultCourseType.pageNum = value;
  return self;
}
- (CourseTypeBuilder*) clearPageNum {
  resultCourseType.hasPageNum = NO;
  resultCourseType.pageNum = 0;
  return self;
}
@end

@interface CourseInfo ()
@property SInt32 id;
@property (strong) NSString* name;
@property (strong) NSString* teacherName;
@property SInt32 price;
@property (strong) NSString* descritpion;
@end

@implementation CourseInfo

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasTeacherName {
  return !!hasTeacherName_;
}
- (void) setHasTeacherName:(BOOL) _value_ {
  hasTeacherName_ = !!_value_;
}
@synthesize teacherName;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (BOOL) hasDescritpion {
  return !!hasDescritpion_;
}
- (void) setHasDescritpion:(BOOL) _value_ {
  hasDescritpion_ = !!_value_;
}
@synthesize descritpion;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.teacherName = @"";
    self.price = 0;
    self.descritpion = @"";
  }
  return self;
}
static CourseInfo* defaultCourseInfoInstance = nil;
+ (void) initialize {
  if (self == [CourseInfo class]) {
    defaultCourseInfoInstance = [[CourseInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCourseInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultCourseInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasTeacherName) {
    return NO;
  }
  if (!self.hasPrice) {
    return NO;
  }
  if (!self.hasDescritpion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasTeacherName) {
    [output writeString:3 value:self.teacherName];
  }
  if (self.hasPrice) {
    [output writeInt32:4 value:self.price];
  }
  if (self.hasDescritpion) {
    [output writeString:5 value:self.descritpion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasTeacherName) {
    size_ += computeStringSize(3, self.teacherName);
  }
  if (self.hasPrice) {
    size_ += computeInt32Size(4, self.price);
  }
  if (self.hasDescritpion) {
    size_ += computeStringSize(5, self.descritpion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CourseInfo*) parseFromData:(NSData*) data {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromData:data] build];
}
+ (CourseInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CourseInfo*) parseFromInputStream:(NSInputStream*) input {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromInputStream:input] build];
}
+ (CourseInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromCodedInputStream:input] build];
}
+ (CourseInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseInfoBuilder*) builder {
  return [[CourseInfoBuilder alloc] init];
}
+ (CourseInfoBuilder*) builderWithPrototype:(CourseInfo*) prototype {
  return [[CourseInfo builder] mergeFrom:prototype];
}
- (CourseInfoBuilder*) builder {
  return [CourseInfo builder];
}
- (CourseInfoBuilder*) toBuilder {
  return [CourseInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasTeacherName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teacherName", self.teacherName];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInteger:self.price]];
  }
  if (self.hasDescritpion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"descritpion", self.descritpion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasTeacherName) {
    [dictionary setObject: self.teacherName forKey: @"teacherName"];
  }
  if (self.hasPrice) {
    [dictionary setObject: [NSNumber numberWithInteger:self.price] forKey: @"price"];
  }
  if (self.hasDescritpion) {
    [dictionary setObject: self.descritpion forKey: @"descritpion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CourseInfo class]]) {
    return NO;
  }
  CourseInfo *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasTeacherName == otherMessage.hasTeacherName &&
      (!self.hasTeacherName || [self.teacherName isEqual:otherMessage.teacherName]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasDescritpion == otherMessage.hasDescritpion &&
      (!self.hasDescritpion || [self.descritpion isEqual:otherMessage.descritpion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasTeacherName) {
    hashCode = hashCode * 31 + [self.teacherName hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.price] hash];
  }
  if (self.hasDescritpion) {
    hashCode = hashCode * 31 + [self.descritpion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CourseInfoBuilder()
@property (strong) CourseInfo* resultCourseInfo;
@end

@implementation CourseInfoBuilder
@synthesize resultCourseInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCourseInfo = [[CourseInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCourseInfo;
}
- (CourseInfoBuilder*) clear {
  self.resultCourseInfo = [[CourseInfo alloc] init];
  return self;
}
- (CourseInfoBuilder*) clone {
  return [CourseInfo builderWithPrototype:resultCourseInfo];
}
- (CourseInfo*) defaultInstance {
  return [CourseInfo defaultInstance];
}
- (CourseInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CourseInfo*) buildPartial {
  CourseInfo* returnMe = resultCourseInfo;
  self.resultCourseInfo = nil;
  return returnMe;
}
- (CourseInfoBuilder*) mergeFrom:(CourseInfo*) other {
  if (other == [CourseInfo defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTeacherName) {
    [self setTeacherName:other.teacherName];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasDescritpion) {
    [self setDescritpion:other.descritpion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CourseInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CourseInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setTeacherName:[input readString]];
        break;
      }
      case 32: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 42: {
        [self setDescritpion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultCourseInfo.hasId;
}
- (SInt32) id {
  return resultCourseInfo.id;
}
- (CourseInfoBuilder*) setId:(SInt32) value {
  resultCourseInfo.hasId = YES;
  resultCourseInfo.id = value;
  return self;
}
- (CourseInfoBuilder*) clearId {
  resultCourseInfo.hasId = NO;
  resultCourseInfo.id = 0;
  return self;
}
- (BOOL) hasName {
  return resultCourseInfo.hasName;
}
- (NSString*) name {
  return resultCourseInfo.name;
}
- (CourseInfoBuilder*) setName:(NSString*) value {
  resultCourseInfo.hasName = YES;
  resultCourseInfo.name = value;
  return self;
}
- (CourseInfoBuilder*) clearName {
  resultCourseInfo.hasName = NO;
  resultCourseInfo.name = @"";
  return self;
}
- (BOOL) hasTeacherName {
  return resultCourseInfo.hasTeacherName;
}
- (NSString*) teacherName {
  return resultCourseInfo.teacherName;
}
- (CourseInfoBuilder*) setTeacherName:(NSString*) value {
  resultCourseInfo.hasTeacherName = YES;
  resultCourseInfo.teacherName = value;
  return self;
}
- (CourseInfoBuilder*) clearTeacherName {
  resultCourseInfo.hasTeacherName = NO;
  resultCourseInfo.teacherName = @"";
  return self;
}
- (BOOL) hasPrice {
  return resultCourseInfo.hasPrice;
}
- (SInt32) price {
  return resultCourseInfo.price;
}
- (CourseInfoBuilder*) setPrice:(SInt32) value {
  resultCourseInfo.hasPrice = YES;
  resultCourseInfo.price = value;
  return self;
}
- (CourseInfoBuilder*) clearPrice {
  resultCourseInfo.hasPrice = NO;
  resultCourseInfo.price = 0;
  return self;
}
- (BOOL) hasDescritpion {
  return resultCourseInfo.hasDescritpion;
}
- (NSString*) descritpion {
  return resultCourseInfo.descritpion;
}
- (CourseInfoBuilder*) setDescritpion:(NSString*) value {
  resultCourseInfo.hasDescritpion = YES;
  resultCourseInfo.descritpion = value;
  return self;
}
- (CourseInfoBuilder*) clearDescritpion {
  resultCourseInfo.hasDescritpion = NO;
  resultCourseInfo.descritpion = @"";
  return self;
}
@end

@interface CourseList ()
@property SInt32 num;
@property (strong) NSMutableArray * listArray;
@end

@implementation CourseList

- (BOOL) hasNum {
  return !!hasNum_;
}
- (void) setHasNum:(BOOL) _value_ {
  hasNum_ = !!_value_;
}
@synthesize num;
@synthesize listArray;
@dynamic list;
- (instancetype) init {
  if ((self = [super init])) {
    self.num = 0;
  }
  return self;
}
static CourseList* defaultCourseListInstance = nil;
+ (void) initialize {
  if (self == [CourseList class]) {
    defaultCourseListInstance = [[CourseList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCourseListInstance;
}
- (instancetype) defaultInstance {
  return defaultCourseListInstance;
}
- (NSArray *)list {
  return listArray;
}
- (CourseInfo*)listAtIndex:(NSUInteger)index {
  return [listArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasNum) {
    return NO;
  }
  __block BOOL isInitlist = YES;
   [self.list enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitlist = NO;
      *stop = YES;
    }
  }];
  if (!isInitlist) return isInitlist;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNum) {
    [output writeInt32:1 value:self.num];
  }
  [self.listArray enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNum) {
    size_ += computeInt32Size(1, self.num);
  }
  [self.listArray enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CourseList*) parseFromData:(NSData*) data {
  return (CourseList*)[[[CourseList builder] mergeFromData:data] build];
}
+ (CourseList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseList*)[[[CourseList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CourseList*) parseFromInputStream:(NSInputStream*) input {
  return (CourseList*)[[[CourseList builder] mergeFromInputStream:input] build];
}
+ (CourseList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseList*)[[[CourseList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CourseList*)[[[CourseList builder] mergeFromCodedInputStream:input] build];
}
+ (CourseList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseList*)[[[CourseList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseListBuilder*) builder {
  return [[CourseListBuilder alloc] init];
}
+ (CourseListBuilder*) builderWithPrototype:(CourseList*) prototype {
  return [[CourseList builder] mergeFrom:prototype];
}
- (CourseListBuilder*) builder {
  return [CourseList builder];
}
- (CourseListBuilder*) toBuilder {
  return [CourseList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"num", [NSNumber numberWithInteger:self.num]];
  }
  [self.listArray enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"list"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNum) {
    [dictionary setObject: [NSNumber numberWithInteger:self.num] forKey: @"num"];
  }
  for (CourseInfo* element in self.listArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"list"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CourseList class]]) {
    return NO;
  }
  CourseList *otherMessage = other;
  return
      self.hasNum == otherMessage.hasNum &&
      (!self.hasNum || self.num == otherMessage.num) &&
      [self.listArray isEqualToArray:otherMessage.listArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.num] hash];
  }
  [self.listArray enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CourseListBuilder()
@property (strong) CourseList* resultCourseList;
@end

@implementation CourseListBuilder
@synthesize resultCourseList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCourseList = [[CourseList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCourseList;
}
- (CourseListBuilder*) clear {
  self.resultCourseList = [[CourseList alloc] init];
  return self;
}
- (CourseListBuilder*) clone {
  return [CourseList builderWithPrototype:resultCourseList];
}
- (CourseList*) defaultInstance {
  return [CourseList defaultInstance];
}
- (CourseList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CourseList*) buildPartial {
  CourseList* returnMe = resultCourseList;
  self.resultCourseList = nil;
  return returnMe;
}
- (CourseListBuilder*) mergeFrom:(CourseList*) other {
  if (other == [CourseList defaultInstance]) {
    return self;
  }
  if (other.hasNum) {
    [self setNum:other.num];
  }
  if (other.listArray.count > 0) {
    if (resultCourseList.listArray == nil) {
      resultCourseList.listArray = [[NSMutableArray alloc] initWithArray:other.listArray];
    } else {
      [resultCourseList.listArray addObjectsFromArray:other.listArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CourseListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CourseListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNum:[input readInt32]];
        break;
      }
      case 18: {
        CourseInfoBuilder* subBuilder = [CourseInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNum {
  return resultCourseList.hasNum;
}
- (SInt32) num {
  return resultCourseList.num;
}
- (CourseListBuilder*) setNum:(SInt32) value {
  resultCourseList.hasNum = YES;
  resultCourseList.num = value;
  return self;
}
- (CourseListBuilder*) clearNum {
  resultCourseList.hasNum = NO;
  resultCourseList.num = 0;
  return self;
}
- (NSMutableArray *)list {
  return resultCourseList.listArray;
}
- (CourseInfo*)listAtIndex:(NSUInteger)index {
  return [resultCourseList listAtIndex:index];
}
- (CourseListBuilder *)addList:(CourseInfo*)value {
  if (resultCourseList.listArray == nil) {
    resultCourseList.listArray = [[NSMutableArray alloc]init];
  }
  [resultCourseList.listArray addObject:value];
  return self;
}
- (CourseListBuilder *)setListArray:(NSArray *)array {
  resultCourseList.listArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (CourseListBuilder *)clearList {
  resultCourseList.listArray = nil;
  return self;
}
@end

@interface TestAllTypes ()
@property SInt32 optionalInt32;
@property SInt64 optionalInt64;
@property UInt32 optionalUint32;
@property UInt64 optionalUint64;
@property SInt32 optionalSint32;
@property SInt64 optionalSint64;
@property UInt32 optionalFixed32;
@property UInt64 optionalFixed64;
@property SInt32 optionalSfixed32;
@property SInt64 optionalSfixed64;
@property Float32 optionalFloat;
@property Float64 optionalDouble;
@property BOOL optionalBool;
@property (strong) NSString* optionalString;
@property (strong) NSData* optionalBytes;
@property (strong) TestAllTypesOptionalGroup* optionalGroup;
@property (strong) TestAllTypesNestedMessage* optionalNestedMessage;
@property TestAllTypesNestedEnum optionalNestedEnum;
@property (strong) NSString* optionalStringPiece;
@property (strong) NSString* optionalCord;
@property (strong) TestAllTypesNestedMessage* optionalLazyMessage;
@property (strong) PBAppendableArray * repeatedInt32Array;
@property (strong) PBAppendableArray * repeatedInt64Array;
@property (strong) PBAppendableArray * repeatedUint32Array;
@property (strong) PBAppendableArray * repeatedUint64Array;
@property (strong) PBAppendableArray * repeatedSint32Array;
@property (strong) PBAppendableArray * repeatedSint64Array;
@property (strong) PBAppendableArray * repeatedFixed32Array;
@property (strong) PBAppendableArray * repeatedFixed64Array;
@property (strong) PBAppendableArray * repeatedSfixed32Array;
@property (strong) PBAppendableArray * repeatedSfixed64Array;
@property (strong) PBAppendableArray * repeatedFloatArray;
@property (strong) PBAppendableArray * repeatedDoubleArray;
@property (strong) PBAppendableArray * repeatedBoolArray;
@property (strong) NSMutableArray * repeatedStringArray;
@property (strong) NSMutableArray * repeatedBytesArray;
@property (strong) NSMutableArray * repeatedGroupArray;
@property (strong) NSMutableArray * repeatedNestedMessageArray;
@property (strong) PBAppendableArray * repeatedNestedEnumArray;
@property (strong) NSMutableArray * repeatedStringPieceArray;
@property (strong) NSMutableArray * repeatedCordArray;
@property (strong) NSMutableArray * repeatedLazyMessageArray;
@property SInt32 defaultInt32;
@property SInt64 defaultInt64;
@property UInt32 defaultUint32;
@property UInt64 defaultUint64;
@property SInt32 defaultSint32;
@property SInt64 defaultSint64;
@property UInt32 defaultFixed32;
@property UInt64 defaultFixed64;
@property SInt32 defaultSfixed32;
@property SInt64 defaultSfixed64;
@property Float32 defaultFloat;
@property Float64 defaultDouble;
@property BOOL defaultBool;
@property (strong) NSString* defaultString;
@property (strong) NSData* defaultBytes;
@property TestAllTypesNestedEnum defaultNestedEnum;
@property (strong) NSString* defaultStringPiece;
@property (strong) NSString* defaultCord;
@property UInt32 oneofUint32;
@property (strong) TestAllTypesNestedMessage* oneofNestedMessage;
@property (strong) NSString* oneofString;
@property (strong) NSData* oneofBytes;
@end

@implementation TestAllTypes

- (BOOL) hasOptionalInt32 {
  return !!hasOptionalInt32_;
}
- (void) setHasOptionalInt32:(BOOL) _value_ {
  hasOptionalInt32_ = !!_value_;
}
@synthesize optionalInt32;
- (BOOL) hasOptionalInt64 {
  return !!hasOptionalInt64_;
}
- (void) setHasOptionalInt64:(BOOL) _value_ {
  hasOptionalInt64_ = !!_value_;
}
@synthesize optionalInt64;
- (BOOL) hasOptionalUint32 {
  return !!hasOptionalUint32_;
}
- (void) setHasOptionalUint32:(BOOL) _value_ {
  hasOptionalUint32_ = !!_value_;
}
@synthesize optionalUint32;
- (BOOL) hasOptionalUint64 {
  return !!hasOptionalUint64_;
}
- (void) setHasOptionalUint64:(BOOL) _value_ {
  hasOptionalUint64_ = !!_value_;
}
@synthesize optionalUint64;
- (BOOL) hasOptionalSint32 {
  return !!hasOptionalSint32_;
}
- (void) setHasOptionalSint32:(BOOL) _value_ {
  hasOptionalSint32_ = !!_value_;
}
@synthesize optionalSint32;
- (BOOL) hasOptionalSint64 {
  return !!hasOptionalSint64_;
}
- (void) setHasOptionalSint64:(BOOL) _value_ {
  hasOptionalSint64_ = !!_value_;
}
@synthesize optionalSint64;
- (BOOL) hasOptionalFixed32 {
  return !!hasOptionalFixed32_;
}
- (void) setHasOptionalFixed32:(BOOL) _value_ {
  hasOptionalFixed32_ = !!_value_;
}
@synthesize optionalFixed32;
- (BOOL) hasOptionalFixed64 {
  return !!hasOptionalFixed64_;
}
- (void) setHasOptionalFixed64:(BOOL) _value_ {
  hasOptionalFixed64_ = !!_value_;
}
@synthesize optionalFixed64;
- (BOOL) hasOptionalSfixed32 {
  return !!hasOptionalSfixed32_;
}
- (void) setHasOptionalSfixed32:(BOOL) _value_ {
  hasOptionalSfixed32_ = !!_value_;
}
@synthesize optionalSfixed32;
- (BOOL) hasOptionalSfixed64 {
  return !!hasOptionalSfixed64_;
}
- (void) setHasOptionalSfixed64:(BOOL) _value_ {
  hasOptionalSfixed64_ = !!_value_;
}
@synthesize optionalSfixed64;
- (BOOL) hasOptionalFloat {
  return !!hasOptionalFloat_;
}
- (void) setHasOptionalFloat:(BOOL) _value_ {
  hasOptionalFloat_ = !!_value_;
}
@synthesize optionalFloat;
- (BOOL) hasOptionalDouble {
  return !!hasOptionalDouble_;
}
- (void) setHasOptionalDouble:(BOOL) _value_ {
  hasOptionalDouble_ = !!_value_;
}
@synthesize optionalDouble;
- (BOOL) hasOptionalBool {
  return !!hasOptionalBool_;
}
- (void) setHasOptionalBool:(BOOL) _value_ {
  hasOptionalBool_ = !!_value_;
}
- (BOOL) optionalBool {
  return !!optionalBool_;
}
- (void) setOptionalBool:(BOOL) _value_ {
  optionalBool_ = !!_value_;
}
- (BOOL) hasOptionalString {
  return !!hasOptionalString_;
}
- (void) setHasOptionalString:(BOOL) _value_ {
  hasOptionalString_ = !!_value_;
}
@synthesize optionalString;
- (BOOL) hasOptionalBytes {
  return !!hasOptionalBytes_;
}
- (void) setHasOptionalBytes:(BOOL) _value_ {
  hasOptionalBytes_ = !!_value_;
}
@synthesize optionalBytes;
- (BOOL) hasOptionalGroup {
  return !!hasOptionalGroup_;
}
- (void) setHasOptionalGroup:(BOOL) _value_ {
  hasOptionalGroup_ = !!_value_;
}
@synthesize optionalGroup;
- (BOOL) hasOptionalNestedMessage {
  return !!hasOptionalNestedMessage_;
}
- (void) setHasOptionalNestedMessage:(BOOL) _value_ {
  hasOptionalNestedMessage_ = !!_value_;
}
@synthesize optionalNestedMessage;
- (BOOL) hasOptionalNestedEnum {
  return !!hasOptionalNestedEnum_;
}
- (void) setHasOptionalNestedEnum:(BOOL) _value_ {
  hasOptionalNestedEnum_ = !!_value_;
}
@synthesize optionalNestedEnum;
- (BOOL) hasOptionalStringPiece {
  return !!hasOptionalStringPiece_;
}
- (void) setHasOptionalStringPiece:(BOOL) _value_ {
  hasOptionalStringPiece_ = !!_value_;
}
@synthesize optionalStringPiece;
- (BOOL) hasOptionalCord {
  return !!hasOptionalCord_;
}
- (void) setHasOptionalCord:(BOOL) _value_ {
  hasOptionalCord_ = !!_value_;
}
@synthesize optionalCord;
- (BOOL) hasOptionalLazyMessage {
  return !!hasOptionalLazyMessage_;
}
- (void) setHasOptionalLazyMessage:(BOOL) _value_ {
  hasOptionalLazyMessage_ = !!_value_;
}
@synthesize optionalLazyMessage;
@synthesize repeatedInt32Array;
@dynamic repeatedInt32;
@synthesize repeatedInt64Array;
@dynamic repeatedInt64;
@synthesize repeatedUint32Array;
@dynamic repeatedUint32;
@synthesize repeatedUint64Array;
@dynamic repeatedUint64;
@synthesize repeatedSint32Array;
@dynamic repeatedSint32;
@synthesize repeatedSint64Array;
@dynamic repeatedSint64;
@synthesize repeatedFixed32Array;
@dynamic repeatedFixed32;
@synthesize repeatedFixed64Array;
@dynamic repeatedFixed64;
@synthesize repeatedSfixed32Array;
@dynamic repeatedSfixed32;
@synthesize repeatedSfixed64Array;
@dynamic repeatedSfixed64;
@synthesize repeatedFloatArray;
@dynamic repeatedFloat;
@synthesize repeatedDoubleArray;
@dynamic repeatedDouble;
@synthesize repeatedBoolArray;
@dynamic repeatedBool;
@synthesize repeatedStringArray;
@dynamic repeatedString;
@synthesize repeatedBytesArray;
@dynamic repeatedBytes;
@synthesize repeatedGroupArray;
@dynamic repeatedGroup;
@synthesize repeatedNestedMessageArray;
@dynamic repeatedNestedMessage;
@synthesize repeatedNestedEnumArray;
@dynamic repeatedNestedEnum;
@synthesize repeatedStringPieceArray;
@dynamic repeatedStringPiece;
@synthesize repeatedCordArray;
@dynamic repeatedCord;
@synthesize repeatedLazyMessageArray;
@dynamic repeatedLazyMessage;
- (BOOL) hasDefaultInt32 {
  return !!hasDefaultInt32_;
}
- (void) setHasDefaultInt32:(BOOL) _value_ {
  hasDefaultInt32_ = !!_value_;
}
@synthesize defaultInt32;
- (BOOL) hasDefaultInt64 {
  return !!hasDefaultInt64_;
}
- (void) setHasDefaultInt64:(BOOL) _value_ {
  hasDefaultInt64_ = !!_value_;
}
@synthesize defaultInt64;
- (BOOL) hasDefaultUint32 {
  return !!hasDefaultUint32_;
}
- (void) setHasDefaultUint32:(BOOL) _value_ {
  hasDefaultUint32_ = !!_value_;
}
@synthesize defaultUint32;
- (BOOL) hasDefaultUint64 {
  return !!hasDefaultUint64_;
}
- (void) setHasDefaultUint64:(BOOL) _value_ {
  hasDefaultUint64_ = !!_value_;
}
@synthesize defaultUint64;
- (BOOL) hasDefaultSint32 {
  return !!hasDefaultSint32_;
}
- (void) setHasDefaultSint32:(BOOL) _value_ {
  hasDefaultSint32_ = !!_value_;
}
@synthesize defaultSint32;
- (BOOL) hasDefaultSint64 {
  return !!hasDefaultSint64_;
}
- (void) setHasDefaultSint64:(BOOL) _value_ {
  hasDefaultSint64_ = !!_value_;
}
@synthesize defaultSint64;
- (BOOL) hasDefaultFixed32 {
  return !!hasDefaultFixed32_;
}
- (void) setHasDefaultFixed32:(BOOL) _value_ {
  hasDefaultFixed32_ = !!_value_;
}
@synthesize defaultFixed32;
- (BOOL) hasDefaultFixed64 {
  return !!hasDefaultFixed64_;
}
- (void) setHasDefaultFixed64:(BOOL) _value_ {
  hasDefaultFixed64_ = !!_value_;
}
@synthesize defaultFixed64;
- (BOOL) hasDefaultSfixed32 {
  return !!hasDefaultSfixed32_;
}
- (void) setHasDefaultSfixed32:(BOOL) _value_ {
  hasDefaultSfixed32_ = !!_value_;
}
@synthesize defaultSfixed32;
- (BOOL) hasDefaultSfixed64 {
  return !!hasDefaultSfixed64_;
}
- (void) setHasDefaultSfixed64:(BOOL) _value_ {
  hasDefaultSfixed64_ = !!_value_;
}
@synthesize defaultSfixed64;
- (BOOL) hasDefaultFloat {
  return !!hasDefaultFloat_;
}
- (void) setHasDefaultFloat:(BOOL) _value_ {
  hasDefaultFloat_ = !!_value_;
}
@synthesize defaultFloat;
- (BOOL) hasDefaultDouble {
  return !!hasDefaultDouble_;
}
- (void) setHasDefaultDouble:(BOOL) _value_ {
  hasDefaultDouble_ = !!_value_;
}
@synthesize defaultDouble;
- (BOOL) hasDefaultBool {
  return !!hasDefaultBool_;
}
- (void) setHasDefaultBool:(BOOL) _value_ {
  hasDefaultBool_ = !!_value_;
}
- (BOOL) defaultBool {
  return !!defaultBool_;
}
- (void) setDefaultBool:(BOOL) _value_ {
  defaultBool_ = !!_value_;
}
- (BOOL) hasDefaultString {
  return !!hasDefaultString_;
}
- (void) setHasDefaultString:(BOOL) _value_ {
  hasDefaultString_ = !!_value_;
}
@synthesize defaultString;
- (BOOL) hasDefaultBytes {
  return !!hasDefaultBytes_;
}
- (void) setHasDefaultBytes:(BOOL) _value_ {
  hasDefaultBytes_ = !!_value_;
}
@synthesize defaultBytes;
- (BOOL) hasDefaultNestedEnum {
  return !!hasDefaultNestedEnum_;
}
- (void) setHasDefaultNestedEnum:(BOOL) _value_ {
  hasDefaultNestedEnum_ = !!_value_;
}
@synthesize defaultNestedEnum;
- (BOOL) hasDefaultStringPiece {
  return !!hasDefaultStringPiece_;
}
- (void) setHasDefaultStringPiece:(BOOL) _value_ {
  hasDefaultStringPiece_ = !!_value_;
}
@synthesize defaultStringPiece;
- (BOOL) hasDefaultCord {
  return !!hasDefaultCord_;
}
- (void) setHasDefaultCord:(BOOL) _value_ {
  hasDefaultCord_ = !!_value_;
}
@synthesize defaultCord;
- (BOOL) hasOneofUint32 {
  return !!hasOneofUint32_;
}
- (void) setHasOneofUint32:(BOOL) _value_ {
  hasOneofUint32_ = !!_value_;
}
@synthesize oneofUint32;
- (BOOL) hasOneofNestedMessage {
  return !!hasOneofNestedMessage_;
}
- (void) setHasOneofNestedMessage:(BOOL) _value_ {
  hasOneofNestedMessage_ = !!_value_;
}
@synthesize oneofNestedMessage;
- (BOOL) hasOneofString {
  return !!hasOneofString_;
}
- (void) setHasOneofString:(BOOL) _value_ {
  hasOneofString_ = !!_value_;
}
@synthesize oneofString;
- (BOOL) hasOneofBytes {
  return !!hasOneofBytes_;
}
- (void) setHasOneofBytes:(BOOL) _value_ {
  hasOneofBytes_ = !!_value_;
}
@synthesize oneofBytes;
- (instancetype) init {
  if ((self = [super init])) {
    self.optionalInt32 = 0;
    self.optionalInt64 = 0L;
    self.optionalUint32 = 0;
    self.optionalUint64 = 0L;
    self.optionalSint32 = 0;
    self.optionalSint64 = 0L;
    self.optionalFixed32 = 0;
    self.optionalFixed64 = 0L;
    self.optionalSfixed32 = 0;
    self.optionalSfixed64 = 0L;
    self.optionalFloat = 0;
    self.optionalDouble = 0;
    self.optionalBool = NO;
    self.optionalString = @"";
    self.optionalBytes = [NSData data];
    self.optionalGroup = [TestAllTypesOptionalGroup defaultInstance];
    self.optionalNestedMessage = [TestAllTypesNestedMessage defaultInstance];
    self.optionalNestedEnum = TestAllTypesNestedEnumFoo;
    self.optionalStringPiece = @"";
    self.optionalCord = @"";
    self.optionalLazyMessage = [TestAllTypesNestedMessage defaultInstance];
    self.defaultInt32 = 41;
    self.defaultInt64 = 42L;
    self.defaultUint32 = 43;
    self.defaultUint64 = 44L;
    self.defaultSint32 = -45;
    self.defaultSint64 = 46L;
    self.defaultFixed32 = 47;
    self.defaultFixed64 = 48L;
    self.defaultSfixed32 = 49;
    self.defaultSfixed64 = -50L;
    self.defaultFloat = 51.5;
    self.defaultDouble = 52000;
    self.defaultBool = YES;
    self.defaultString = @"hello";
    self.defaultBytes = [NSData dataWithBytes:"world" length:5];
    self.defaultNestedEnum = TestAllTypesNestedEnumBar;
    self.defaultStringPiece = @"abc";
    self.defaultCord = @"123";
    self.oneofUint32 = 0;
    self.oneofNestedMessage = [TestAllTypesNestedMessage defaultInstance];
    self.oneofString = @"";
    self.oneofBytes = [NSData data];
  }
  return self;
}
static TestAllTypes* defaultTestAllTypesInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypes class]) {
    defaultTestAllTypesInstance = [[TestAllTypes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesInstance;
}
- (PBArray *)repeatedInt32 {
  return repeatedInt32Array;
}
- (SInt32)repeatedInt32AtIndex:(NSUInteger)index {
  return [repeatedInt32Array int32AtIndex:index];
}
- (PBArray *)repeatedInt64 {
  return repeatedInt64Array;
}
- (SInt64)repeatedInt64AtIndex:(NSUInteger)index {
  return [repeatedInt64Array int64AtIndex:index];
}
- (PBArray *)repeatedUint32 {
  return repeatedUint32Array;
}
- (UInt32)repeatedUint32AtIndex:(NSUInteger)index {
  return [repeatedUint32Array uint32AtIndex:index];
}
- (PBArray *)repeatedUint64 {
  return repeatedUint64Array;
}
- (UInt64)repeatedUint64AtIndex:(NSUInteger)index {
  return [repeatedUint64Array uint64AtIndex:index];
}
- (PBArray *)repeatedSint32 {
  return repeatedSint32Array;
}
- (SInt32)repeatedSint32AtIndex:(NSUInteger)index {
  return [repeatedSint32Array int32AtIndex:index];
}
- (PBArray *)repeatedSint64 {
  return repeatedSint64Array;
}
- (SInt64)repeatedSint64AtIndex:(NSUInteger)index {
  return [repeatedSint64Array int64AtIndex:index];
}
- (PBArray *)repeatedFixed32 {
  return repeatedFixed32Array;
}
- (UInt32)repeatedFixed32AtIndex:(NSUInteger)index {
  return [repeatedFixed32Array uint32AtIndex:index];
}
- (PBArray *)repeatedFixed64 {
  return repeatedFixed64Array;
}
- (UInt64)repeatedFixed64AtIndex:(NSUInteger)index {
  return [repeatedFixed64Array uint64AtIndex:index];
}
- (PBArray *)repeatedSfixed32 {
  return repeatedSfixed32Array;
}
- (SInt32)repeatedSfixed32AtIndex:(NSUInteger)index {
  return [repeatedSfixed32Array int32AtIndex:index];
}
- (PBArray *)repeatedSfixed64 {
  return repeatedSfixed64Array;
}
- (SInt64)repeatedSfixed64AtIndex:(NSUInteger)index {
  return [repeatedSfixed64Array int64AtIndex:index];
}
- (PBArray *)repeatedFloat {
  return repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [repeatedFloatArray floatAtIndex:index];
}
- (PBArray *)repeatedDouble {
  return repeatedDoubleArray;
}
- (Float64)repeatedDoubleAtIndex:(NSUInteger)index {
  return [repeatedDoubleArray doubleAtIndex:index];
}
- (PBArray *)repeatedBool {
  return repeatedBoolArray;
}
- (BOOL)repeatedBoolAtIndex:(NSUInteger)index {
  return [repeatedBoolArray boolAtIndex:index];
}
- (NSArray *)repeatedString {
  return repeatedStringArray;
}
- (NSString*)repeatedStringAtIndex:(NSUInteger)index {
  return [repeatedStringArray objectAtIndex:index];
}
- (NSArray *)repeatedBytes {
  return repeatedBytesArray;
}
- (NSData*)repeatedBytesAtIndex:(NSUInteger)index {
  return [repeatedBytesArray objectAtIndex:index];
}
- (NSArray *)repeatedGroup {
  return repeatedGroupArray;
}
- (TestAllTypesRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [repeatedGroupArray objectAtIndex:index];
}
- (NSArray *)repeatedNestedMessage {
  return repeatedNestedMessageArray;
}
- (TestAllTypesNestedMessage*)repeatedNestedMessageAtIndex:(NSUInteger)index {
  return [repeatedNestedMessageArray objectAtIndex:index];
}
- (PBArray *)repeatedNestedEnum {
  return repeatedNestedEnumArray;
}
- (TestAllTypesNestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index {
  return (TestAllTypesNestedEnum)[repeatedNestedEnumArray enumAtIndex:index];
}
- (NSArray *)repeatedStringPiece {
  return repeatedStringPieceArray;
}
- (NSString*)repeatedStringPieceAtIndex:(NSUInteger)index {
  return [repeatedStringPieceArray objectAtIndex:index];
}
- (NSArray *)repeatedCord {
  return repeatedCordArray;
}
- (NSString*)repeatedCordAtIndex:(NSUInteger)index {
  return [repeatedCordArray objectAtIndex:index];
}
- (NSArray *)repeatedLazyMessage {
  return repeatedLazyMessageArray;
}
- (TestAllTypesNestedMessage*)repeatedLazyMessageAtIndex:(NSUInteger)index {
  return [repeatedLazyMessageArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOptionalInt32) {
    [output writeInt32:1 value:self.optionalInt32];
  }
  if (self.hasOptionalInt64) {
    [output writeInt64:2 value:self.optionalInt64];
  }
  if (self.hasOptionalUint32) {
    [output writeUInt32:3 value:self.optionalUint32];
  }
  if (self.hasOptionalUint64) {
    [output writeUInt64:4 value:self.optionalUint64];
  }
  if (self.hasOptionalSint32) {
    [output writeSInt32:5 value:self.optionalSint32];
  }
  if (self.hasOptionalSint64) {
    [output writeSInt64:6 value:self.optionalSint64];
  }
  if (self.hasOptionalFixed32) {
    [output writeFixed32:7 value:self.optionalFixed32];
  }
  if (self.hasOptionalFixed64) {
    [output writeFixed64:8 value:self.optionalFixed64];
  }
  if (self.hasOptionalSfixed32) {
    [output writeSFixed32:9 value:self.optionalSfixed32];
  }
  if (self.hasOptionalSfixed64) {
    [output writeSFixed64:10 value:self.optionalSfixed64];
  }
  if (self.hasOptionalFloat) {
    [output writeFloat:11 value:self.optionalFloat];
  }
  if (self.hasOptionalDouble) {
    [output writeDouble:12 value:self.optionalDouble];
  }
  if (self.hasOptionalBool) {
    [output writeBool:13 value:self.optionalBool];
  }
  if (self.hasOptionalString) {
    [output writeString:14 value:self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output writeData:15 value:self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output writeGroup:16 value:self.optionalGroup];
  }
  if (self.hasOptionalNestedMessage) {
    [output writeMessage:18 value:self.optionalNestedMessage];
  }
  if (self.hasOptionalNestedEnum) {
    [output writeEnum:21 value:self.optionalNestedEnum];
  }
  if (self.hasOptionalStringPiece) {
    [output writeString:24 value:self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output writeString:25 value:self.optionalCord];
  }
  if (self.hasOptionalLazyMessage) {
    [output writeMessage:27 value:self.optionalLazyMessage];
  }
  const NSUInteger repeatedInt32ArrayCount = self.repeatedInt32Array.count;
  if (repeatedInt32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < repeatedInt32ArrayCount; ++i) {
      [output writeInt32:31 value:values[i]];
    }
  }
  const NSUInteger repeatedInt64ArrayCount = self.repeatedInt64Array.count;
  if (repeatedInt64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < repeatedInt64ArrayCount; ++i) {
      [output writeInt64:32 value:values[i]];
    }
  }
  const NSUInteger repeatedUint32ArrayCount = self.repeatedUint32Array.count;
  if (repeatedUint32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.repeatedUint32Array.data;
    for (NSUInteger i = 0; i < repeatedUint32ArrayCount; ++i) {
      [output writeUInt32:33 value:values[i]];
    }
  }
  const NSUInteger repeatedUint64ArrayCount = self.repeatedUint64Array.count;
  if (repeatedUint64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < repeatedUint64ArrayCount; ++i) {
      [output writeUInt64:34 value:values[i]];
    }
  }
  const NSUInteger repeatedSint32ArrayCount = self.repeatedSint32Array.count;
  if (repeatedSint32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedSint32Array.data;
    for (NSUInteger i = 0; i < repeatedSint32ArrayCount; ++i) {
      [output writeSInt32:35 value:values[i]];
    }
  }
  const NSUInteger repeatedSint64ArrayCount = self.repeatedSint64Array.count;
  if (repeatedSint64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedSint64Array.data;
    for (NSUInteger i = 0; i < repeatedSint64ArrayCount; ++i) {
      [output writeSInt64:36 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed32ArrayCount = self.repeatedFixed32Array.count;
  if (repeatedFixed32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.repeatedFixed32Array.data;
    for (NSUInteger i = 0; i < repeatedFixed32ArrayCount; ++i) {
      [output writeFixed32:37 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed64ArrayCount = self.repeatedFixed64Array.count;
  if (repeatedFixed64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.repeatedFixed64Array.data;
    for (NSUInteger i = 0; i < repeatedFixed64ArrayCount; ++i) {
      [output writeFixed64:38 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed32ArrayCount = self.repeatedSfixed32Array.count;
  if (repeatedSfixed32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedSfixed32Array.data;
    for (NSUInteger i = 0; i < repeatedSfixed32ArrayCount; ++i) {
      [output writeSFixed32:39 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed64ArrayCount = self.repeatedSfixed64Array.count;
  if (repeatedSfixed64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedSfixed64Array.data;
    for (NSUInteger i = 0; i < repeatedSfixed64ArrayCount; ++i) {
      [output writeSFixed64:40 value:values[i]];
    }
  }
  const NSUInteger repeatedFloatArrayCount = self.repeatedFloatArray.count;
  if (repeatedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.repeatedFloatArray.data;
    for (NSUInteger i = 0; i < repeatedFloatArrayCount; ++i) {
      [output writeFloat:41 value:values[i]];
    }
  }
  const NSUInteger repeatedDoubleArrayCount = self.repeatedDoubleArray.count;
  if (repeatedDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.repeatedDoubleArray.data;
    for (NSUInteger i = 0; i < repeatedDoubleArrayCount; ++i) {
      [output writeDouble:42 value:values[i]];
    }
  }
  const NSUInteger repeatedBoolArrayCount = self.repeatedBoolArray.count;
  if (repeatedBoolArrayCount > 0) {
    const BOOL *values = (const BOOL *)self.repeatedBoolArray.data;
    for (NSUInteger i = 0; i < repeatedBoolArrayCount; ++i) {
      [output writeBool:43 value:values[i]];
    }
  }
  [self.repeatedStringArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:44 value:element];
  }];
  [self.repeatedBytesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:45 value:element];
  }];
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeGroup:46 value:element];
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:48 value:element];
  }];
  const NSUInteger repeatedNestedEnumArrayCount = self.repeatedNestedEnumArray.count;
  const TestAllTypesNestedEnum *repeatedNestedEnumArrayValues = (const TestAllTypesNestedEnum *)self.repeatedNestedEnumArray.data;
  for (NSUInteger i = 0; i < repeatedNestedEnumArrayCount; ++i) {
    [output writeEnum:51 value:repeatedNestedEnumArrayValues[i]];
  }
  [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:54 value:element];
  }];
  [self.repeatedCordArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:55 value:element];
  }];
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:57 value:element];
  }];
  if (self.hasDefaultInt32) {
    [output writeInt32:61 value:self.defaultInt32];
  }
  if (self.hasDefaultInt64) {
    [output writeInt64:62 value:self.defaultInt64];
  }
  if (self.hasDefaultUint32) {
    [output writeUInt32:63 value:self.defaultUint32];
  }
  if (self.hasDefaultUint64) {
    [output writeUInt64:64 value:self.defaultUint64];
  }
  if (self.hasDefaultSint32) {
    [output writeSInt32:65 value:self.defaultSint32];
  }
  if (self.hasDefaultSint64) {
    [output writeSInt64:66 value:self.defaultSint64];
  }
  if (self.hasDefaultFixed32) {
    [output writeFixed32:67 value:self.defaultFixed32];
  }
  if (self.hasDefaultFixed64) {
    [output writeFixed64:68 value:self.defaultFixed64];
  }
  if (self.hasDefaultSfixed32) {
    [output writeSFixed32:69 value:self.defaultSfixed32];
  }
  if (self.hasDefaultSfixed64) {
    [output writeSFixed64:70 value:self.defaultSfixed64];
  }
  if (self.hasDefaultFloat) {
    [output writeFloat:71 value:self.defaultFloat];
  }
  if (self.hasDefaultDouble) {
    [output writeDouble:72 value:self.defaultDouble];
  }
  if (self.hasDefaultBool) {
    [output writeBool:73 value:self.defaultBool];
  }
  if (self.hasDefaultString) {
    [output writeString:74 value:self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output writeData:75 value:self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output writeEnum:81 value:self.defaultNestedEnum];
  }
  if (self.hasDefaultStringPiece) {
    [output writeString:84 value:self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output writeString:85 value:self.defaultCord];
  }
  if (self.hasOneofUint32) {
    [output writeUInt32:111 value:self.oneofUint32];
  }
  if (self.hasOneofNestedMessage) {
    [output writeMessage:112 value:self.oneofNestedMessage];
  }
  if (self.hasOneofString) {
    [output writeString:113 value:self.oneofString];
  }
  if (self.hasOneofBytes) {
    [output writeData:114 value:self.oneofBytes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalInt32) {
    size_ += computeInt32Size(1, self.optionalInt32);
  }
  if (self.hasOptionalInt64) {
    size_ += computeInt64Size(2, self.optionalInt64);
  }
  if (self.hasOptionalUint32) {
    size_ += computeUInt32Size(3, self.optionalUint32);
  }
  if (self.hasOptionalUint64) {
    size_ += computeUInt64Size(4, self.optionalUint64);
  }
  if (self.hasOptionalSint32) {
    size_ += computeSInt32Size(5, self.optionalSint32);
  }
  if (self.hasOptionalSint64) {
    size_ += computeSInt64Size(6, self.optionalSint64);
  }
  if (self.hasOptionalFixed32) {
    size_ += computeFixed32Size(7, self.optionalFixed32);
  }
  if (self.hasOptionalFixed64) {
    size_ += computeFixed64Size(8, self.optionalFixed64);
  }
  if (self.hasOptionalSfixed32) {
    size_ += computeSFixed32Size(9, self.optionalSfixed32);
  }
  if (self.hasOptionalSfixed64) {
    size_ += computeSFixed64Size(10, self.optionalSfixed64);
  }
  if (self.hasOptionalFloat) {
    size_ += computeFloatSize(11, self.optionalFloat);
  }
  if (self.hasOptionalDouble) {
    size_ += computeDoubleSize(12, self.optionalDouble);
  }
  if (self.hasOptionalBool) {
    size_ += computeBoolSize(13, self.optionalBool);
  }
  if (self.hasOptionalString) {
    size_ += computeStringSize(14, self.optionalString);
  }
  if (self.hasOptionalBytes) {
    size_ += computeDataSize(15, self.optionalBytes);
  }
  if (self.hasOptionalGroup) {
    size_ += computeGroupSize(16, self.optionalGroup);
  }
  if (self.hasOptionalNestedMessage) {
    size_ += computeMessageSize(18, self.optionalNestedMessage);
  }
  if (self.hasOptionalNestedEnum) {
    size_ += computeEnumSize(21, self.optionalNestedEnum);
  }
  if (self.hasOptionalStringPiece) {
    size_ += computeStringSize(24, self.optionalStringPiece);
  }
  if (self.hasOptionalCord) {
    size_ += computeStringSize(25, self.optionalCord);
  }
  if (self.hasOptionalLazyMessage) {
    size_ += computeMessageSize(27, self.optionalLazyMessage);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedInt32Array.count;
    const SInt32 *values = (const SInt32 *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedInt64Array.count;
    const SInt64 *values = (const SInt64 *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedUint32Array.count;
    const UInt32 *values = (const UInt32 *)self.repeatedUint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedUint64Array.count;
    const UInt64 *values = (const UInt64 *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSint32Array.count;
    const SInt32 *values = (const SInt32 *)self.repeatedSint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSint64Array.count;
    const SInt64 *values = (const SInt64 *)self.repeatedSint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSfixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSfixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFloatArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedDoubleArray.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedBoolArray.count;
    dataSize = (SInt32)(1 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedStringArray.count;
    [self.repeatedStringArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedBytesArray.count;
    [self.repeatedBytesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeGroupSize(46, element);
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(48, element);
  }];
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedNestedEnumArray.count;
    const TestAllTypesNestedEnum *values = (const TestAllTypesNestedEnum *)self.repeatedNestedEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedStringPieceArray.count;
    [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedCordArray.count;
    [self.repeatedCordArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(57, element);
  }];
  if (self.hasDefaultInt32) {
    size_ += computeInt32Size(61, self.defaultInt32);
  }
  if (self.hasDefaultInt64) {
    size_ += computeInt64Size(62, self.defaultInt64);
  }
  if (self.hasDefaultUint32) {
    size_ += computeUInt32Size(63, self.defaultUint32);
  }
  if (self.hasDefaultUint64) {
    size_ += computeUInt64Size(64, self.defaultUint64);
  }
  if (self.hasDefaultSint32) {
    size_ += computeSInt32Size(65, self.defaultSint32);
  }
  if (self.hasDefaultSint64) {
    size_ += computeSInt64Size(66, self.defaultSint64);
  }
  if (self.hasDefaultFixed32) {
    size_ += computeFixed32Size(67, self.defaultFixed32);
  }
  if (self.hasDefaultFixed64) {
    size_ += computeFixed64Size(68, self.defaultFixed64);
  }
  if (self.hasDefaultSfixed32) {
    size_ += computeSFixed32Size(69, self.defaultSfixed32);
  }
  if (self.hasDefaultSfixed64) {
    size_ += computeSFixed64Size(70, self.defaultSfixed64);
  }
  if (self.hasDefaultFloat) {
    size_ += computeFloatSize(71, self.defaultFloat);
  }
  if (self.hasDefaultDouble) {
    size_ += computeDoubleSize(72, self.defaultDouble);
  }
  if (self.hasDefaultBool) {
    size_ += computeBoolSize(73, self.defaultBool);
  }
  if (self.hasDefaultString) {
    size_ += computeStringSize(74, self.defaultString);
  }
  if (self.hasDefaultBytes) {
    size_ += computeDataSize(75, self.defaultBytes);
  }
  if (self.hasDefaultNestedEnum) {
    size_ += computeEnumSize(81, self.defaultNestedEnum);
  }
  if (self.hasDefaultStringPiece) {
    size_ += computeStringSize(84, self.defaultStringPiece);
  }
  if (self.hasDefaultCord) {
    size_ += computeStringSize(85, self.defaultCord);
  }
  if (self.hasOneofUint32) {
    size_ += computeUInt32Size(111, self.oneofUint32);
  }
  if (self.hasOneofNestedMessage) {
    size_ += computeMessageSize(112, self.oneofNestedMessage);
  }
  if (self.hasOneofString) {
    size_ += computeStringSize(113, self.oneofString);
  }
  if (self.hasOneofBytes) {
    size_ += computeDataSize(114, self.oneofBytes);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypes*) parseFromData:(NSData*) data {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromData:data] build];
}
+ (TestAllTypes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypes*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromInputStream:input] build];
}
+ (TestAllTypes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesBuilder*) builder {
  return [[TestAllTypesBuilder alloc] init];
}
+ (TestAllTypesBuilder*) builderWithPrototype:(TestAllTypes*) prototype {
  return [[TestAllTypes builder] mergeFrom:prototype];
}
- (TestAllTypesBuilder*) builder {
  return [TestAllTypes builder];
}
- (TestAllTypesBuilder*) toBuilder {
  return [TestAllTypes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOptionalInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt32", [NSNumber numberWithInteger:self.optionalInt32]];
  }
  if (self.hasOptionalInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt64", [NSNumber numberWithLongLong:self.optionalInt64]];
  }
  if (self.hasOptionalUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint32", [NSNumber numberWithInteger:self.optionalUint32]];
  }
  if (self.hasOptionalUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint64", [NSNumber numberWithLongLong:self.optionalUint64]];
  }
  if (self.hasOptionalSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint32", [NSNumber numberWithInteger:self.optionalSint32]];
  }
  if (self.hasOptionalSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint64", [NSNumber numberWithLongLong:self.optionalSint64]];
  }
  if (self.hasOptionalFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed32", [NSNumber numberWithInteger:self.optionalFixed32]];
  }
  if (self.hasOptionalFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed64", [NSNumber numberWithLongLong:self.optionalFixed64]];
  }
  if (self.hasOptionalSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed32", [NSNumber numberWithInteger:self.optionalSfixed32]];
  }
  if (self.hasOptionalSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed64", [NSNumber numberWithLongLong:self.optionalSfixed64]];
  }
  if (self.hasOptionalFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFloat", [NSNumber numberWithFloat:self.optionalFloat]];
  }
  if (self.hasOptionalDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalDouble", [NSNumber numberWithDouble:self.optionalDouble]];
  }
  if (self.hasOptionalBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBool", [NSNumber numberWithBool:self.optionalBool]];
  }
  if (self.hasOptionalString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalString", self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBytes", self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroup"];
    [self.optionalGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalNestedMessage"];
    [self.optionalNestedMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalNestedEnum", NSStringFromTestAllTypesNestedEnum(self.optionalNestedEnum)];
  }
  if (self.hasOptionalStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalStringPiece", self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalCord", self.optionalCord];
  }
  if (self.hasOptionalLazyMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalLazyMessage"];
    [self.optionalLazyMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.repeatedInt32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt32", obj];
  }];
  [self.repeatedInt64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt64", obj];
  }];
  [self.repeatedUint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint32", obj];
  }];
  [self.repeatedUint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint64", obj];
  }];
  [self.repeatedSint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint32", obj];
  }];
  [self.repeatedSint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint64", obj];
  }];
  [self.repeatedFixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed32", obj];
  }];
  [self.repeatedFixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed64", obj];
  }];
  [self.repeatedSfixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed32", obj];
  }];
  [self.repeatedSfixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed64", obj];
  }];
  [self.repeatedFloatArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFloat", obj];
  }];
  [self.repeatedDoubleArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedDouble", obj];
  }];
  [self.repeatedBoolArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBool", obj];
  }];
  [self.repeatedStringArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedString", obj];
  }];
  [self.repeatedBytesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBytes", obj];
  }];
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedNestedMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedNestedEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedNestedEnum", NSStringFromTestAllTypesNestedEnum([(NSNumber *)element intValue])];
  }];
  [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringPiece", obj];
  }];
  [self.repeatedCordArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedCord", obj];
  }];
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedLazyMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDefaultInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt32", [NSNumber numberWithInteger:self.defaultInt32]];
  }
  if (self.hasDefaultInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt64", [NSNumber numberWithLongLong:self.defaultInt64]];
  }
  if (self.hasDefaultUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint32", [NSNumber numberWithInteger:self.defaultUint32]];
  }
  if (self.hasDefaultUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint64", [NSNumber numberWithLongLong:self.defaultUint64]];
  }
  if (self.hasDefaultSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint32", [NSNumber numberWithInteger:self.defaultSint32]];
  }
  if (self.hasDefaultSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint64", [NSNumber numberWithLongLong:self.defaultSint64]];
  }
  if (self.hasDefaultFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed32", [NSNumber numberWithInteger:self.defaultFixed32]];
  }
  if (self.hasDefaultFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed64", [NSNumber numberWithLongLong:self.defaultFixed64]];
  }
  if (self.hasDefaultSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed32", [NSNumber numberWithInteger:self.defaultSfixed32]];
  }
  if (self.hasDefaultSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed64", [NSNumber numberWithLongLong:self.defaultSfixed64]];
  }
  if (self.hasDefaultFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFloat", [NSNumber numberWithFloat:self.defaultFloat]];
  }
  if (self.hasDefaultDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultDouble", [NSNumber numberWithDouble:self.defaultDouble]];
  }
  if (self.hasDefaultBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBool", [NSNumber numberWithBool:self.defaultBool]];
  }
  if (self.hasDefaultString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultString", self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBytes", self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultNestedEnum", NSStringFromTestAllTypesNestedEnum(self.defaultNestedEnum)];
  }
  if (self.hasDefaultStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultStringPiece", self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultCord", self.defaultCord];
  }
  if (self.hasOneofUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofUint32", [NSNumber numberWithInteger:self.oneofUint32]];
  }
  if (self.hasOneofNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"oneofNestedMessage"];
    [self.oneofNestedMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOneofString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofString", self.oneofString];
  }
  if (self.hasOneofBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofBytes", self.oneofBytes];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOptionalInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalInt32] forKey: @"optionalInt32"];
  }
  if (self.hasOptionalInt64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalInt64] forKey: @"optionalInt64"];
  }
  if (self.hasOptionalUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalUint32] forKey: @"optionalUint32"];
  }
  if (self.hasOptionalUint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalUint64] forKey: @"optionalUint64"];
  }
  if (self.hasOptionalSint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalSint32] forKey: @"optionalSint32"];
  }
  if (self.hasOptionalSint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalSint64] forKey: @"optionalSint64"];
  }
  if (self.hasOptionalFixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalFixed32] forKey: @"optionalFixed32"];
  }
  if (self.hasOptionalFixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalFixed64] forKey: @"optionalFixed64"];
  }
  if (self.hasOptionalSfixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalSfixed32] forKey: @"optionalSfixed32"];
  }
  if (self.hasOptionalSfixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalSfixed64] forKey: @"optionalSfixed64"];
  }
  if (self.hasOptionalFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.optionalFloat] forKey: @"optionalFloat"];
  }
  if (self.hasOptionalDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.optionalDouble] forKey: @"optionalDouble"];
  }
  if (self.hasOptionalBool) {
    [dictionary setObject: [NSNumber numberWithBool:self.optionalBool] forKey: @"optionalBool"];
  }
  if (self.hasOptionalString) {
    [dictionary setObject: self.optionalString forKey: @"optionalString"];
  }
  if (self.hasOptionalBytes) {
    [dictionary setObject: self.optionalBytes forKey: @"optionalBytes"];
  }
  if (self.hasOptionalGroup) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalGroup storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalGroup"];
  }
  if (self.hasOptionalNestedMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalNestedMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalNestedMessage"];
  }
  if (self.hasOptionalNestedEnum) {
    [dictionary setObject: @(self.optionalNestedEnum) forKey: @"optionalNestedEnum"];
  }
  if (self.hasOptionalStringPiece) {
    [dictionary setObject: self.optionalStringPiece forKey: @"optionalStringPiece"];
  }
  if (self.hasOptionalCord) {
    [dictionary setObject: self.optionalCord forKey: @"optionalCord"];
  }
  if (self.hasOptionalLazyMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalLazyMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalLazyMessage"];
  }
  NSMutableArray * repeatedInt32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedInt32ArrayCount=self.repeatedInt32Array.count;
  for(int i=0;i<repeatedInt32ArrayCount;i++){
    [repeatedInt32ArrayArray addObject: @([self.repeatedInt32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedInt32ArrayArray forKey: @"repeatedInt32"];
  NSMutableArray * repeatedInt64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedInt64ArrayCount=self.repeatedInt64Array.count;
  for(int i=0;i<repeatedInt64ArrayCount;i++){
    [repeatedInt64ArrayArray addObject: @([self.repeatedInt64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedInt64ArrayArray forKey: @"repeatedInt64"];
  NSMutableArray * repeatedUint32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedUint32ArrayCount=self.repeatedUint32Array.count;
  for(int i=0;i<repeatedUint32ArrayCount;i++){
    [repeatedUint32ArrayArray addObject: @([self.repeatedUint32Array uint32AtIndex:i])];
  }
  [dictionary setObject: repeatedUint32ArrayArray forKey: @"repeatedUint32"];
  NSMutableArray * repeatedUint64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedUint64ArrayCount=self.repeatedUint64Array.count;
  for(int i=0;i<repeatedUint64ArrayCount;i++){
    [repeatedUint64ArrayArray addObject: @([self.repeatedUint64Array uint64AtIndex:i])];
  }
  [dictionary setObject: repeatedUint64ArrayArray forKey: @"repeatedUint64"];
  NSMutableArray * repeatedSint32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSint32ArrayCount=self.repeatedSint32Array.count;
  for(int i=0;i<repeatedSint32ArrayCount;i++){
    [repeatedSint32ArrayArray addObject: @([self.repeatedSint32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedSint32ArrayArray forKey: @"repeatedSint32"];
  NSMutableArray * repeatedSint64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSint64ArrayCount=self.repeatedSint64Array.count;
  for(int i=0;i<repeatedSint64ArrayCount;i++){
    [repeatedSint64ArrayArray addObject: @([self.repeatedSint64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedSint64ArrayArray forKey: @"repeatedSint64"];
  NSMutableArray * repeatedFixed32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedFixed32ArrayCount=self.repeatedFixed32Array.count;
  for(int i=0;i<repeatedFixed32ArrayCount;i++){
    [repeatedFixed32ArrayArray addObject: @([self.repeatedFixed32Array uint32AtIndex:i])];
  }
  [dictionary setObject: repeatedFixed32ArrayArray forKey: @"repeatedFixed32"];
  NSMutableArray * repeatedFixed64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedFixed64ArrayCount=self.repeatedFixed64Array.count;
  for(int i=0;i<repeatedFixed64ArrayCount;i++){
    [repeatedFixed64ArrayArray addObject: @([self.repeatedFixed64Array uint64AtIndex:i])];
  }
  [dictionary setObject: repeatedFixed64ArrayArray forKey: @"repeatedFixed64"];
  NSMutableArray * repeatedSfixed32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSfixed32ArrayCount=self.repeatedSfixed32Array.count;
  for(int i=0;i<repeatedSfixed32ArrayCount;i++){
    [repeatedSfixed32ArrayArray addObject: @([self.repeatedSfixed32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedSfixed32ArrayArray forKey: @"repeatedSfixed32"];
  NSMutableArray * repeatedSfixed64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSfixed64ArrayCount=self.repeatedSfixed64Array.count;
  for(int i=0;i<repeatedSfixed64ArrayCount;i++){
    [repeatedSfixed64ArrayArray addObject: @([self.repeatedSfixed64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedSfixed64ArrayArray forKey: @"repeatedSfixed64"];
  NSMutableArray * repeatedFloatArrayArray = [NSMutableArray new];
  NSUInteger repeatedFloatArrayCount=self.repeatedFloatArray.count;
  for(int i=0;i<repeatedFloatArrayCount;i++){
    [repeatedFloatArrayArray addObject: @([self.repeatedFloatArray floatAtIndex:i])];
  }
  [dictionary setObject: repeatedFloatArrayArray forKey: @"repeatedFloat"];
  NSMutableArray * repeatedDoubleArrayArray = [NSMutableArray new];
  NSUInteger repeatedDoubleArrayCount=self.repeatedDoubleArray.count;
  for(int i=0;i<repeatedDoubleArrayCount;i++){
    [repeatedDoubleArrayArray addObject: @([self.repeatedDoubleArray doubleAtIndex:i])];
  }
  [dictionary setObject: repeatedDoubleArrayArray forKey: @"repeatedDouble"];
  NSMutableArray * repeatedBoolArrayArray = [NSMutableArray new];
  NSUInteger repeatedBoolArrayCount=self.repeatedBoolArray.count;
  for(int i=0;i<repeatedBoolArrayCount;i++){
    [repeatedBoolArrayArray addObject: @([self.repeatedBoolArray boolAtIndex:i])];
  }
  [dictionary setObject: repeatedBoolArrayArray forKey: @"repeatedBool"];
  [dictionary setObject:self.repeatedString forKey: @"repeatedString"];
  [dictionary setObject:self.repeatedBytes forKey: @"repeatedBytes"];
  for (TestAllTypesRepeatedGroup* element in self.repeatedGroupArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedGroup"];
  }
  for (TestAllTypesNestedMessage* element in self.repeatedNestedMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedNestedMessage"];
  }
  const NSUInteger repeatedNestedEnumArrayCount = self.repeatedNestedEnumArray.count;
  if (repeatedNestedEnumArrayCount > 0) {
    const TestAllTypesNestedEnum *repeatedNestedEnumArrayValues = (const TestAllTypesNestedEnum *)self.repeatedNestedEnumArray.data;
    NSMutableArray * repeatedNestedEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < repeatedNestedEnumArrayCount; ++i) {
      [repeatedNestedEnumArrayArray addObject: @(repeatedNestedEnumArrayValues[i])];
    }
    [dictionary setObject: repeatedNestedEnumArrayArray forKey: @"repeatedNestedEnum"];
  }
  [dictionary setObject:self.repeatedStringPiece forKey: @"repeatedStringPiece"];
  [dictionary setObject:self.repeatedCord forKey: @"repeatedCord"];
  for (TestAllTypesNestedMessage* element in self.repeatedLazyMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedLazyMessage"];
  }
  if (self.hasDefaultInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultInt32] forKey: @"defaultInt32"];
  }
  if (self.hasDefaultInt64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultInt64] forKey: @"defaultInt64"];
  }
  if (self.hasDefaultUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultUint32] forKey: @"defaultUint32"];
  }
  if (self.hasDefaultUint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultUint64] forKey: @"defaultUint64"];
  }
  if (self.hasDefaultSint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultSint32] forKey: @"defaultSint32"];
  }
  if (self.hasDefaultSint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultSint64] forKey: @"defaultSint64"];
  }
  if (self.hasDefaultFixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultFixed32] forKey: @"defaultFixed32"];
  }
  if (self.hasDefaultFixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultFixed64] forKey: @"defaultFixed64"];
  }
  if (self.hasDefaultSfixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultSfixed32] forKey: @"defaultSfixed32"];
  }
  if (self.hasDefaultSfixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultSfixed64] forKey: @"defaultSfixed64"];
  }
  if (self.hasDefaultFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.defaultFloat] forKey: @"defaultFloat"];
  }
  if (self.hasDefaultDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.defaultDouble] forKey: @"defaultDouble"];
  }
  if (self.hasDefaultBool) {
    [dictionary setObject: [NSNumber numberWithBool:self.defaultBool] forKey: @"defaultBool"];
  }
  if (self.hasDefaultString) {
    [dictionary setObject: self.defaultString forKey: @"defaultString"];
  }
  if (self.hasDefaultBytes) {
    [dictionary setObject: self.defaultBytes forKey: @"defaultBytes"];
  }
  if (self.hasDefaultNestedEnum) {
    [dictionary setObject: @(self.defaultNestedEnum) forKey: @"defaultNestedEnum"];
  }
  if (self.hasDefaultStringPiece) {
    [dictionary setObject: self.defaultStringPiece forKey: @"defaultStringPiece"];
  }
  if (self.hasDefaultCord) {
    [dictionary setObject: self.defaultCord forKey: @"defaultCord"];
  }
  if (self.hasOneofUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.oneofUint32] forKey: @"oneofUint32"];
  }
  if (self.hasOneofNestedMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.oneofNestedMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"oneofNestedMessage"];
  }
  if (self.hasOneofString) {
    [dictionary setObject: self.oneofString forKey: @"oneofString"];
  }
  if (self.hasOneofBytes) {
    [dictionary setObject: self.oneofBytes forKey: @"oneofBytes"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes class]]) {
    return NO;
  }
  TestAllTypes *otherMessage = other;
  return
      self.hasOptionalInt32 == otherMessage.hasOptionalInt32 &&
      (!self.hasOptionalInt32 || self.optionalInt32 == otherMessage.optionalInt32) &&
      self.hasOptionalInt64 == otherMessage.hasOptionalInt64 &&
      (!self.hasOptionalInt64 || self.optionalInt64 == otherMessage.optionalInt64) &&
      self.hasOptionalUint32 == otherMessage.hasOptionalUint32 &&
      (!self.hasOptionalUint32 || self.optionalUint32 == otherMessage.optionalUint32) &&
      self.hasOptionalUint64 == otherMessage.hasOptionalUint64 &&
      (!self.hasOptionalUint64 || self.optionalUint64 == otherMessage.optionalUint64) &&
      self.hasOptionalSint32 == otherMessage.hasOptionalSint32 &&
      (!self.hasOptionalSint32 || self.optionalSint32 == otherMessage.optionalSint32) &&
      self.hasOptionalSint64 == otherMessage.hasOptionalSint64 &&
      (!self.hasOptionalSint64 || self.optionalSint64 == otherMessage.optionalSint64) &&
      self.hasOptionalFixed32 == otherMessage.hasOptionalFixed32 &&
      (!self.hasOptionalFixed32 || self.optionalFixed32 == otherMessage.optionalFixed32) &&
      self.hasOptionalFixed64 == otherMessage.hasOptionalFixed64 &&
      (!self.hasOptionalFixed64 || self.optionalFixed64 == otherMessage.optionalFixed64) &&
      self.hasOptionalSfixed32 == otherMessage.hasOptionalSfixed32 &&
      (!self.hasOptionalSfixed32 || self.optionalSfixed32 == otherMessage.optionalSfixed32) &&
      self.hasOptionalSfixed64 == otherMessage.hasOptionalSfixed64 &&
      (!self.hasOptionalSfixed64 || self.optionalSfixed64 == otherMessage.optionalSfixed64) &&
      self.hasOptionalFloat == otherMessage.hasOptionalFloat &&
      (!self.hasOptionalFloat || self.optionalFloat == otherMessage.optionalFloat) &&
      self.hasOptionalDouble == otherMessage.hasOptionalDouble &&
      (!self.hasOptionalDouble || self.optionalDouble == otherMessage.optionalDouble) &&
      self.hasOptionalBool == otherMessage.hasOptionalBool &&
      (!self.hasOptionalBool || self.optionalBool == otherMessage.optionalBool) &&
      self.hasOptionalString == otherMessage.hasOptionalString &&
      (!self.hasOptionalString || [self.optionalString isEqual:otherMessage.optionalString]) &&
      self.hasOptionalBytes == otherMessage.hasOptionalBytes &&
      (!self.hasOptionalBytes || [self.optionalBytes isEqual:otherMessage.optionalBytes]) &&
      self.hasOptionalGroup == otherMessage.hasOptionalGroup &&
      (!self.hasOptionalGroup || [self.optionalGroup isEqual:otherMessage.optionalGroup]) &&
      self.hasOptionalNestedMessage == otherMessage.hasOptionalNestedMessage &&
      (!self.hasOptionalNestedMessage || [self.optionalNestedMessage isEqual:otherMessage.optionalNestedMessage]) &&
      self.hasOptionalNestedEnum == otherMessage.hasOptionalNestedEnum &&
      (!self.hasOptionalNestedEnum || self.optionalNestedEnum == otherMessage.optionalNestedEnum) &&
      self.hasOptionalStringPiece == otherMessage.hasOptionalStringPiece &&
      (!self.hasOptionalStringPiece || [self.optionalStringPiece isEqual:otherMessage.optionalStringPiece]) &&
      self.hasOptionalCord == otherMessage.hasOptionalCord &&
      (!self.hasOptionalCord || [self.optionalCord isEqual:otherMessage.optionalCord]) &&
      self.hasOptionalLazyMessage == otherMessage.hasOptionalLazyMessage &&
      (!self.hasOptionalLazyMessage || [self.optionalLazyMessage isEqual:otherMessage.optionalLazyMessage]) &&
      [self.repeatedInt32Array isEqualToArray:otherMessage.repeatedInt32Array] &&
      [self.repeatedInt64Array isEqualToArray:otherMessage.repeatedInt64Array] &&
      [self.repeatedUint32Array isEqualToArray:otherMessage.repeatedUint32Array] &&
      [self.repeatedUint64Array isEqualToArray:otherMessage.repeatedUint64Array] &&
      [self.repeatedSint32Array isEqualToArray:otherMessage.repeatedSint32Array] &&
      [self.repeatedSint64Array isEqualToArray:otherMessage.repeatedSint64Array] &&
      [self.repeatedFixed32Array isEqualToArray:otherMessage.repeatedFixed32Array] &&
      [self.repeatedFixed64Array isEqualToArray:otherMessage.repeatedFixed64Array] &&
      [self.repeatedSfixed32Array isEqualToArray:otherMessage.repeatedSfixed32Array] &&
      [self.repeatedSfixed64Array isEqualToArray:otherMessage.repeatedSfixed64Array] &&
      [self.repeatedFloatArray isEqualToArray:otherMessage.repeatedFloatArray] &&
      [self.repeatedDoubleArray isEqualToArray:otherMessage.repeatedDoubleArray] &&
      [self.repeatedBoolArray isEqualToArray:otherMessage.repeatedBoolArray] &&
      [self.repeatedStringArray isEqualToArray:otherMessage.repeatedStringArray] &&
      [self.repeatedBytesArray isEqualToArray:otherMessage.repeatedBytesArray] &&
      [self.repeatedGroupArray isEqualToArray:otherMessage.repeatedGroupArray] &&
      [self.repeatedNestedMessageArray isEqualToArray:otherMessage.repeatedNestedMessageArray] &&
      [self.repeatedNestedEnumArray isEqualToArray:otherMessage.repeatedNestedEnumArray] &&
      [self.repeatedStringPieceArray isEqualToArray:otherMessage.repeatedStringPieceArray] &&
      [self.repeatedCordArray isEqualToArray:otherMessage.repeatedCordArray] &&
      [self.repeatedLazyMessageArray isEqualToArray:otherMessage.repeatedLazyMessageArray] &&
      self.hasDefaultInt32 == otherMessage.hasDefaultInt32 &&
      (!self.hasDefaultInt32 || self.defaultInt32 == otherMessage.defaultInt32) &&
      self.hasDefaultInt64 == otherMessage.hasDefaultInt64 &&
      (!self.hasDefaultInt64 || self.defaultInt64 == otherMessage.defaultInt64) &&
      self.hasDefaultUint32 == otherMessage.hasDefaultUint32 &&
      (!self.hasDefaultUint32 || self.defaultUint32 == otherMessage.defaultUint32) &&
      self.hasDefaultUint64 == otherMessage.hasDefaultUint64 &&
      (!self.hasDefaultUint64 || self.defaultUint64 == otherMessage.defaultUint64) &&
      self.hasDefaultSint32 == otherMessage.hasDefaultSint32 &&
      (!self.hasDefaultSint32 || self.defaultSint32 == otherMessage.defaultSint32) &&
      self.hasDefaultSint64 == otherMessage.hasDefaultSint64 &&
      (!self.hasDefaultSint64 || self.defaultSint64 == otherMessage.defaultSint64) &&
      self.hasDefaultFixed32 == otherMessage.hasDefaultFixed32 &&
      (!self.hasDefaultFixed32 || self.defaultFixed32 == otherMessage.defaultFixed32) &&
      self.hasDefaultFixed64 == otherMessage.hasDefaultFixed64 &&
      (!self.hasDefaultFixed64 || self.defaultFixed64 == otherMessage.defaultFixed64) &&
      self.hasDefaultSfixed32 == otherMessage.hasDefaultSfixed32 &&
      (!self.hasDefaultSfixed32 || self.defaultSfixed32 == otherMessage.defaultSfixed32) &&
      self.hasDefaultSfixed64 == otherMessage.hasDefaultSfixed64 &&
      (!self.hasDefaultSfixed64 || self.defaultSfixed64 == otherMessage.defaultSfixed64) &&
      self.hasDefaultFloat == otherMessage.hasDefaultFloat &&
      (!self.hasDefaultFloat || self.defaultFloat == otherMessage.defaultFloat) &&
      self.hasDefaultDouble == otherMessage.hasDefaultDouble &&
      (!self.hasDefaultDouble || self.defaultDouble == otherMessage.defaultDouble) &&
      self.hasDefaultBool == otherMessage.hasDefaultBool &&
      (!self.hasDefaultBool || self.defaultBool == otherMessage.defaultBool) &&
      self.hasDefaultString == otherMessage.hasDefaultString &&
      (!self.hasDefaultString || [self.defaultString isEqual:otherMessage.defaultString]) &&
      self.hasDefaultBytes == otherMessage.hasDefaultBytes &&
      (!self.hasDefaultBytes || [self.defaultBytes isEqual:otherMessage.defaultBytes]) &&
      self.hasDefaultNestedEnum == otherMessage.hasDefaultNestedEnum &&
      (!self.hasDefaultNestedEnum || self.defaultNestedEnum == otherMessage.defaultNestedEnum) &&
      self.hasDefaultStringPiece == otherMessage.hasDefaultStringPiece &&
      (!self.hasDefaultStringPiece || [self.defaultStringPiece isEqual:otherMessage.defaultStringPiece]) &&
      self.hasDefaultCord == otherMessage.hasDefaultCord &&
      (!self.hasDefaultCord || [self.defaultCord isEqual:otherMessage.defaultCord]) &&
      self.hasOneofUint32 == otherMessage.hasOneofUint32 &&
      (!self.hasOneofUint32 || self.oneofUint32 == otherMessage.oneofUint32) &&
      self.hasOneofNestedMessage == otherMessage.hasOneofNestedMessage &&
      (!self.hasOneofNestedMessage || [self.oneofNestedMessage isEqual:otherMessage.oneofNestedMessage]) &&
      self.hasOneofString == otherMessage.hasOneofString &&
      (!self.hasOneofString || [self.oneofString isEqual:otherMessage.oneofString]) &&
      self.hasOneofBytes == otherMessage.hasOneofBytes &&
      (!self.hasOneofBytes || [self.oneofBytes isEqual:otherMessage.oneofBytes]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOptionalInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalInt32] hash];
  }
  if (self.hasOptionalInt64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalInt64] hash];
  }
  if (self.hasOptionalUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalUint32] hash];
  }
  if (self.hasOptionalUint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalUint64] hash];
  }
  if (self.hasOptionalSint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalSint32] hash];
  }
  if (self.hasOptionalSint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalSint64] hash];
  }
  if (self.hasOptionalFixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalFixed32] hash];
  }
  if (self.hasOptionalFixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalFixed64] hash];
  }
  if (self.hasOptionalSfixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalSfixed32] hash];
  }
  if (self.hasOptionalSfixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalSfixed64] hash];
  }
  if (self.hasOptionalFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.optionalFloat] hash];
  }
  if (self.hasOptionalDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.optionalDouble] hash];
  }
  if (self.hasOptionalBool) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.optionalBool] hash];
  }
  if (self.hasOptionalString) {
    hashCode = hashCode * 31 + [self.optionalString hash];
  }
  if (self.hasOptionalBytes) {
    hashCode = hashCode * 31 + [self.optionalBytes hash];
  }
  if (self.hasOptionalGroup) {
    hashCode = hashCode * 31 + [self.optionalGroup hash];
  }
  if (self.hasOptionalNestedMessage) {
    hashCode = hashCode * 31 + [self.optionalNestedMessage hash];
  }
  if (self.hasOptionalNestedEnum) {
    hashCode = hashCode * 31 + self.optionalNestedEnum;
  }
  if (self.hasOptionalStringPiece) {
    hashCode = hashCode * 31 + [self.optionalStringPiece hash];
  }
  if (self.hasOptionalCord) {
    hashCode = hashCode * 31 + [self.optionalCord hash];
  }
  if (self.hasOptionalLazyMessage) {
    hashCode = hashCode * 31 + [self.optionalLazyMessage hash];
  }
  [self.repeatedInt32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedInt64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedUint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedUint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSfixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSfixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFloatArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedDoubleArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedBoolArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedStringArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedBytesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedNestedEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedCordArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDefaultInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultInt32] hash];
  }
  if (self.hasDefaultInt64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultInt64] hash];
  }
  if (self.hasDefaultUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultUint32] hash];
  }
  if (self.hasDefaultUint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultUint64] hash];
  }
  if (self.hasDefaultSint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultSint32] hash];
  }
  if (self.hasDefaultSint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultSint64] hash];
  }
  if (self.hasDefaultFixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultFixed32] hash];
  }
  if (self.hasDefaultFixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultFixed64] hash];
  }
  if (self.hasDefaultSfixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultSfixed32] hash];
  }
  if (self.hasDefaultSfixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultSfixed64] hash];
  }
  if (self.hasDefaultFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.defaultFloat] hash];
  }
  if (self.hasDefaultDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.defaultDouble] hash];
  }
  if (self.hasDefaultBool) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.defaultBool] hash];
  }
  if (self.hasDefaultString) {
    hashCode = hashCode * 31 + [self.defaultString hash];
  }
  if (self.hasDefaultBytes) {
    hashCode = hashCode * 31 + [self.defaultBytes hash];
  }
  if (self.hasDefaultNestedEnum) {
    hashCode = hashCode * 31 + self.defaultNestedEnum;
  }
  if (self.hasDefaultStringPiece) {
    hashCode = hashCode * 31 + [self.defaultStringPiece hash];
  }
  if (self.hasDefaultCord) {
    hashCode = hashCode * 31 + [self.defaultCord hash];
  }
  if (self.hasOneofUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oneofUint32] hash];
  }
  if (self.hasOneofNestedMessage) {
    hashCode = hashCode * 31 + [self.oneofNestedMessage hash];
  }
  if (self.hasOneofString) {
    hashCode = hashCode * 31 + [self.oneofString hash];
  }
  if (self.hasOneofBytes) {
    hashCode = hashCode * 31 + [self.oneofBytes hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL TestAllTypesNestedEnumIsValidValue(TestAllTypesNestedEnum value) {
  switch (value) {
    case TestAllTypesNestedEnumFoo:
    case TestAllTypesNestedEnumBar:
    case TestAllTypesNestedEnumBaz:
    case TestAllTypesNestedEnumNeg:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTestAllTypesNestedEnum(TestAllTypesNestedEnum value) {
  switch (value) {
    case TestAllTypesNestedEnumFoo:
      return @"TestAllTypesNestedEnumFoo";
    case TestAllTypesNestedEnumBar:
      return @"TestAllTypesNestedEnumBar";
    case TestAllTypesNestedEnumBaz:
      return @"TestAllTypesNestedEnumBaz";
    case TestAllTypesNestedEnumNeg:
      return @"TestAllTypesNestedEnumNeg";
    default:
      return nil;
  }
}

@interface TestAllTypesNestedMessage ()
@property SInt32 bb;
@end

@implementation TestAllTypesNestedMessage

- (BOOL) hasBb {
  return !!hasBb_;
}
- (void) setHasBb:(BOOL) _value_ {
  hasBb_ = !!_value_;
}
@synthesize bb;
- (instancetype) init {
  if ((self = [super init])) {
    self.bb = 0;
  }
  return self;
}
static TestAllTypesNestedMessage* defaultTestAllTypesNestedMessageInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesNestedMessage class]) {
    defaultTestAllTypesNestedMessageInstance = [[TestAllTypesNestedMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesNestedMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesNestedMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBb) {
    [output writeInt32:1 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBb) {
    size_ += computeInt32Size(1, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesNestedMessage*) parseFromData:(NSData*) data {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromData:data] build];
}
+ (TestAllTypesNestedMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesNestedMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesNestedMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesNestedMessageBuilder*) builder {
  return [[TestAllTypesNestedMessageBuilder alloc] init];
}
+ (TestAllTypesNestedMessageBuilder*) builderWithPrototype:(TestAllTypesNestedMessage*) prototype {
  return [[TestAllTypesNestedMessage builder] mergeFrom:prototype];
}
- (TestAllTypesNestedMessageBuilder*) builder {
  return [TestAllTypesNestedMessage builder];
}
- (TestAllTypesNestedMessageBuilder*) toBuilder {
  return [TestAllTypesNestedMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bb", [NSNumber numberWithInteger:self.bb]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBb) {
    [dictionary setObject: [NSNumber numberWithInteger:self.bb] forKey: @"bb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesNestedMessage class]]) {
    return NO;
  }
  TestAllTypesNestedMessage *otherMessage = other;
  return
      self.hasBb == otherMessage.hasBb &&
      (!self.hasBb || self.bb == otherMessage.bb) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBb) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bb] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllTypesNestedMessageBuilder()
@property (strong) TestAllTypesNestedMessage* resultNestedMessage;
@end

@implementation TestAllTypesNestedMessageBuilder
@synthesize resultNestedMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNestedMessage = [[TestAllTypesNestedMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNestedMessage;
}
- (TestAllTypesNestedMessageBuilder*) clear {
  self.resultNestedMessage = [[TestAllTypesNestedMessage alloc] init];
  return self;
}
- (TestAllTypesNestedMessageBuilder*) clone {
  return [TestAllTypesNestedMessage builderWithPrototype:resultNestedMessage];
}
- (TestAllTypesNestedMessage*) defaultInstance {
  return [TestAllTypesNestedMessage defaultInstance];
}
- (TestAllTypesNestedMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesNestedMessage*) buildPartial {
  TestAllTypesNestedMessage* returnMe = resultNestedMessage;
  self.resultNestedMessage = nil;
  return returnMe;
}
- (TestAllTypesNestedMessageBuilder*) mergeFrom:(TestAllTypesNestedMessage*) other {
  if (other == [TestAllTypesNestedMessage defaultInstance]) {
    return self;
  }
  if (other.hasBb) {
    [self setBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBb:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasBb {
  return resultNestedMessage.hasBb;
}
- (SInt32) bb {
  return resultNestedMessage.bb;
}
- (TestAllTypesNestedMessageBuilder*) setBb:(SInt32) value {
  resultNestedMessage.hasBb = YES;
  resultNestedMessage.bb = value;
  return self;
}
- (TestAllTypesNestedMessageBuilder*) clearBb {
  resultNestedMessage.hasBb = NO;
  resultNestedMessage.bb = 0;
  return self;
}
@end

@interface TestAllTypesOptionalGroup ()
@property SInt32 a;
@end

@implementation TestAllTypesOptionalGroup

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static TestAllTypesOptionalGroup* defaultTestAllTypesOptionalGroupInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesOptionalGroup class]) {
    defaultTestAllTypesOptionalGroupInstance = [[TestAllTypesOptionalGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesOptionalGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesOptionalGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesOptionalGroup*) parseFromData:(NSData*) data {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromData:data] build];
}
+ (TestAllTypesOptionalGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesOptionalGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesOptionalGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesOptionalGroupBuilder*) builder {
  return [[TestAllTypesOptionalGroupBuilder alloc] init];
}
+ (TestAllTypesOptionalGroupBuilder*) builderWithPrototype:(TestAllTypesOptionalGroup*) prototype {
  return [[TestAllTypesOptionalGroup builder] mergeFrom:prototype];
}
- (TestAllTypesOptionalGroupBuilder*) builder {
  return [TestAllTypesOptionalGroup builder];
}
- (TestAllTypesOptionalGroupBuilder*) toBuilder {
  return [TestAllTypesOptionalGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesOptionalGroup class]]) {
    return NO;
  }
  TestAllTypesOptionalGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllTypesOptionalGroupBuilder()
@property (strong) TestAllTypesOptionalGroup* resultOptionalGroup;
@end

@implementation TestAllTypesOptionalGroupBuilder
@synthesize resultOptionalGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOptionalGroup = [[TestAllTypesOptionalGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOptionalGroup;
}
- (TestAllTypesOptionalGroupBuilder*) clear {
  self.resultOptionalGroup = [[TestAllTypesOptionalGroup alloc] init];
  return self;
}
- (TestAllTypesOptionalGroupBuilder*) clone {
  return [TestAllTypesOptionalGroup builderWithPrototype:resultOptionalGroup];
}
- (TestAllTypesOptionalGroup*) defaultInstance {
  return [TestAllTypesOptionalGroup defaultInstance];
}
- (TestAllTypesOptionalGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesOptionalGroup*) buildPartial {
  TestAllTypesOptionalGroup* returnMe = resultOptionalGroup;
  self.resultOptionalGroup = nil;
  return returnMe;
}
- (TestAllTypesOptionalGroupBuilder*) mergeFrom:(TestAllTypesOptionalGroup*) other {
  if (other == [TestAllTypesOptionalGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultOptionalGroup.hasA;
}
- (SInt32) a {
  return resultOptionalGroup.a;
}
- (TestAllTypesOptionalGroupBuilder*) setA:(SInt32) value {
  resultOptionalGroup.hasA = YES;
  resultOptionalGroup.a = value;
  return self;
}
- (TestAllTypesOptionalGroupBuilder*) clearA {
  resultOptionalGroup.hasA = NO;
  resultOptionalGroup.a = 0;
  return self;
}
@end

@interface TestAllTypesRepeatedGroup ()
@property SInt32 a;
@end

@implementation TestAllTypesRepeatedGroup

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static TestAllTypesRepeatedGroup* defaultTestAllTypesRepeatedGroupInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesRepeatedGroup class]) {
    defaultTestAllTypesRepeatedGroupInstance = [[TestAllTypesRepeatedGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesRepeatedGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesRepeatedGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesRepeatedGroup*) parseFromData:(NSData*) data {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromData:data] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesRepeatedGroupBuilder*) builder {
  return [[TestAllTypesRepeatedGroupBuilder alloc] init];
}
+ (TestAllTypesRepeatedGroupBuilder*) builderWithPrototype:(TestAllTypesRepeatedGroup*) prototype {
  return [[TestAllTypesRepeatedGroup builder] mergeFrom:prototype];
}
- (TestAllTypesRepeatedGroupBuilder*) builder {
  return [TestAllTypesRepeatedGroup builder];
}
- (TestAllTypesRepeatedGroupBuilder*) toBuilder {
  return [TestAllTypesRepeatedGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesRepeatedGroup class]]) {
    return NO;
  }
  TestAllTypesRepeatedGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllTypesRepeatedGroupBuilder()
@property (strong) TestAllTypesRepeatedGroup* resultRepeatedGroup;
@end

@implementation TestAllTypesRepeatedGroupBuilder
@synthesize resultRepeatedGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeatedGroup = [[TestAllTypesRepeatedGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeatedGroup;
}
- (TestAllTypesRepeatedGroupBuilder*) clear {
  self.resultRepeatedGroup = [[TestAllTypesRepeatedGroup alloc] init];
  return self;
}
- (TestAllTypesRepeatedGroupBuilder*) clone {
  return [TestAllTypesRepeatedGroup builderWithPrototype:resultRepeatedGroup];
}
- (TestAllTypesRepeatedGroup*) defaultInstance {
  return [TestAllTypesRepeatedGroup defaultInstance];
}
- (TestAllTypesRepeatedGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesRepeatedGroup*) buildPartial {
  TestAllTypesRepeatedGroup* returnMe = resultRepeatedGroup;
  self.resultRepeatedGroup = nil;
  return returnMe;
}
- (TestAllTypesRepeatedGroupBuilder*) mergeFrom:(TestAllTypesRepeatedGroup*) other {
  if (other == [TestAllTypesRepeatedGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultRepeatedGroup.hasA;
}
- (SInt32) a {
  return resultRepeatedGroup.a;
}
- (TestAllTypesRepeatedGroupBuilder*) setA:(SInt32) value {
  resultRepeatedGroup.hasA = YES;
  resultRepeatedGroup.a = value;
  return self;
}
- (TestAllTypesRepeatedGroupBuilder*) clearA {
  resultRepeatedGroup.hasA = NO;
  resultRepeatedGroup.a = 0;
  return self;
}
@end

@interface TestAllTypesBuilder()
@property (strong) TestAllTypes* resultTestAllTypes;
@end

@implementation TestAllTypesBuilder
@synthesize resultTestAllTypes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestAllTypes = [[TestAllTypes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestAllTypes;
}
- (TestAllTypesBuilder*) clear {
  self.resultTestAllTypes = [[TestAllTypes alloc] init];
  return self;
}
- (TestAllTypesBuilder*) clone {
  return [TestAllTypes builderWithPrototype:resultTestAllTypes];
}
- (TestAllTypes*) defaultInstance {
  return [TestAllTypes defaultInstance];
}
- (TestAllTypes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypes*) buildPartial {
  TestAllTypes* returnMe = resultTestAllTypes;
  self.resultTestAllTypes = nil;
  return returnMe;
}
- (TestAllTypesBuilder*) mergeFrom:(TestAllTypes*) other {
  if (other == [TestAllTypes defaultInstance]) {
    return self;
  }
  if (other.hasOptionalInt32) {
    [self setOptionalInt32:other.optionalInt32];
  }
  if (other.hasOptionalInt64) {
    [self setOptionalInt64:other.optionalInt64];
  }
  if (other.hasOptionalUint32) {
    [self setOptionalUint32:other.optionalUint32];
  }
  if (other.hasOptionalUint64) {
    [self setOptionalUint64:other.optionalUint64];
  }
  if (other.hasOptionalSint32) {
    [self setOptionalSint32:other.optionalSint32];
  }
  if (other.hasOptionalSint64) {
    [self setOptionalSint64:other.optionalSint64];
  }
  if (other.hasOptionalFixed32) {
    [self setOptionalFixed32:other.optionalFixed32];
  }
  if (other.hasOptionalFixed64) {
    [self setOptionalFixed64:other.optionalFixed64];
  }
  if (other.hasOptionalSfixed32) {
    [self setOptionalSfixed32:other.optionalSfixed32];
  }
  if (other.hasOptionalSfixed64) {
    [self setOptionalSfixed64:other.optionalSfixed64];
  }
  if (other.hasOptionalFloat) {
    [self setOptionalFloat:other.optionalFloat];
  }
  if (other.hasOptionalDouble) {
    [self setOptionalDouble:other.optionalDouble];
  }
  if (other.hasOptionalBool) {
    [self setOptionalBool:other.optionalBool];
  }
  if (other.hasOptionalString) {
    [self setOptionalString:other.optionalString];
  }
  if (other.hasOptionalBytes) {
    [self setOptionalBytes:other.optionalBytes];
  }
  if (other.hasOptionalGroup) {
    [self mergeOptionalGroup:other.optionalGroup];
  }
  if (other.hasOptionalNestedMessage) {
    [self mergeOptionalNestedMessage:other.optionalNestedMessage];
  }
  if (other.hasOptionalNestedEnum) {
    [self setOptionalNestedEnum:other.optionalNestedEnum];
  }
  if (other.hasOptionalStringPiece) {
    [self setOptionalStringPiece:other.optionalStringPiece];
  }
  if (other.hasOptionalCord) {
    [self setOptionalCord:other.optionalCord];
  }
  if (other.hasOptionalLazyMessage) {
    [self mergeOptionalLazyMessage:other.optionalLazyMessage];
  }
  if (other.repeatedInt32Array.count > 0) {
    if (resultTestAllTypes.repeatedInt32Array == nil) {
      resultTestAllTypes.repeatedInt32Array = [other.repeatedInt32Array copy];
    } else {
      [resultTestAllTypes.repeatedInt32Array appendArray:other.repeatedInt32Array];
    }
  }
  if (other.repeatedInt64Array.count > 0) {
    if (resultTestAllTypes.repeatedInt64Array == nil) {
      resultTestAllTypes.repeatedInt64Array = [other.repeatedInt64Array copy];
    } else {
      [resultTestAllTypes.repeatedInt64Array appendArray:other.repeatedInt64Array];
    }
  }
  if (other.repeatedUint32Array.count > 0) {
    if (resultTestAllTypes.repeatedUint32Array == nil) {
      resultTestAllTypes.repeatedUint32Array = [other.repeatedUint32Array copy];
    } else {
      [resultTestAllTypes.repeatedUint32Array appendArray:other.repeatedUint32Array];
    }
  }
  if (other.repeatedUint64Array.count > 0) {
    if (resultTestAllTypes.repeatedUint64Array == nil) {
      resultTestAllTypes.repeatedUint64Array = [other.repeatedUint64Array copy];
    } else {
      [resultTestAllTypes.repeatedUint64Array appendArray:other.repeatedUint64Array];
    }
  }
  if (other.repeatedSint32Array.count > 0) {
    if (resultTestAllTypes.repeatedSint32Array == nil) {
      resultTestAllTypes.repeatedSint32Array = [other.repeatedSint32Array copy];
    } else {
      [resultTestAllTypes.repeatedSint32Array appendArray:other.repeatedSint32Array];
    }
  }
  if (other.repeatedSint64Array.count > 0) {
    if (resultTestAllTypes.repeatedSint64Array == nil) {
      resultTestAllTypes.repeatedSint64Array = [other.repeatedSint64Array copy];
    } else {
      [resultTestAllTypes.repeatedSint64Array appendArray:other.repeatedSint64Array];
    }
  }
  if (other.repeatedFixed32Array.count > 0) {
    if (resultTestAllTypes.repeatedFixed32Array == nil) {
      resultTestAllTypes.repeatedFixed32Array = [other.repeatedFixed32Array copy];
    } else {
      [resultTestAllTypes.repeatedFixed32Array appendArray:other.repeatedFixed32Array];
    }
  }
  if (other.repeatedFixed64Array.count > 0) {
    if (resultTestAllTypes.repeatedFixed64Array == nil) {
      resultTestAllTypes.repeatedFixed64Array = [other.repeatedFixed64Array copy];
    } else {
      [resultTestAllTypes.repeatedFixed64Array appendArray:other.repeatedFixed64Array];
    }
  }
  if (other.repeatedSfixed32Array.count > 0) {
    if (resultTestAllTypes.repeatedSfixed32Array == nil) {
      resultTestAllTypes.repeatedSfixed32Array = [other.repeatedSfixed32Array copy];
    } else {
      [resultTestAllTypes.repeatedSfixed32Array appendArray:other.repeatedSfixed32Array];
    }
  }
  if (other.repeatedSfixed64Array.count > 0) {
    if (resultTestAllTypes.repeatedSfixed64Array == nil) {
      resultTestAllTypes.repeatedSfixed64Array = [other.repeatedSfixed64Array copy];
    } else {
      [resultTestAllTypes.repeatedSfixed64Array appendArray:other.repeatedSfixed64Array];
    }
  }
  if (other.repeatedFloatArray.count > 0) {
    if (resultTestAllTypes.repeatedFloatArray == nil) {
      resultTestAllTypes.repeatedFloatArray = [other.repeatedFloatArray copy];
    } else {
      [resultTestAllTypes.repeatedFloatArray appendArray:other.repeatedFloatArray];
    }
  }
  if (other.repeatedDoubleArray.count > 0) {
    if (resultTestAllTypes.repeatedDoubleArray == nil) {
      resultTestAllTypes.repeatedDoubleArray = [other.repeatedDoubleArray copy];
    } else {
      [resultTestAllTypes.repeatedDoubleArray appendArray:other.repeatedDoubleArray];
    }
  }
  if (other.repeatedBoolArray.count > 0) {
    if (resultTestAllTypes.repeatedBoolArray == nil) {
      resultTestAllTypes.repeatedBoolArray = [other.repeatedBoolArray copy];
    } else {
      [resultTestAllTypes.repeatedBoolArray appendArray:other.repeatedBoolArray];
    }
  }
  if (other.repeatedStringArray.count > 0) {
    if (resultTestAllTypes.repeatedStringArray == nil) {
      resultTestAllTypes.repeatedStringArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringArray];
    } else {
      [resultTestAllTypes.repeatedStringArray addObjectsFromArray:other.repeatedStringArray];
    }
  }
  if (other.repeatedBytesArray.count > 0) {
    if (resultTestAllTypes.repeatedBytesArray == nil) {
      resultTestAllTypes.repeatedBytesArray = [[NSMutableArray alloc] initWithArray:other.repeatedBytesArray];
    } else {
      [resultTestAllTypes.repeatedBytesArray addObjectsFromArray:other.repeatedBytesArray];
    }
  }
  if (other.repeatedGroupArray.count > 0) {
    if (resultTestAllTypes.repeatedGroupArray == nil) {
      resultTestAllTypes.repeatedGroupArray = [[NSMutableArray alloc] initWithArray:other.repeatedGroupArray];
    } else {
      [resultTestAllTypes.repeatedGroupArray addObjectsFromArray:other.repeatedGroupArray];
    }
  }
  if (other.repeatedNestedMessageArray.count > 0) {
    if (resultTestAllTypes.repeatedNestedMessageArray == nil) {
      resultTestAllTypes.repeatedNestedMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedNestedMessageArray];
    } else {
      [resultTestAllTypes.repeatedNestedMessageArray addObjectsFromArray:other.repeatedNestedMessageArray];
    }
  }
  if (other.repeatedNestedEnumArray.count > 0) {
    if (resultTestAllTypes.repeatedNestedEnumArray == nil) {
      resultTestAllTypes.repeatedNestedEnumArray = [other.repeatedNestedEnumArray copy];
    } else {
      [resultTestAllTypes.repeatedNestedEnumArray appendArray:other.repeatedNestedEnumArray];
    }
  }
  if (other.repeatedStringPieceArray.count > 0) {
    if (resultTestAllTypes.repeatedStringPieceArray == nil) {
      resultTestAllTypes.repeatedStringPieceArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringPieceArray];
    } else {
      [resultTestAllTypes.repeatedStringPieceArray addObjectsFromArray:other.repeatedStringPieceArray];
    }
  }
  if (other.repeatedCordArray.count > 0) {
    if (resultTestAllTypes.repeatedCordArray == nil) {
      resultTestAllTypes.repeatedCordArray = [[NSMutableArray alloc] initWithArray:other.repeatedCordArray];
    } else {
      [resultTestAllTypes.repeatedCordArray addObjectsFromArray:other.repeatedCordArray];
    }
  }
  if (other.repeatedLazyMessageArray.count > 0) {
    if (resultTestAllTypes.repeatedLazyMessageArray == nil) {
      resultTestAllTypes.repeatedLazyMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedLazyMessageArray];
    } else {
      [resultTestAllTypes.repeatedLazyMessageArray addObjectsFromArray:other.repeatedLazyMessageArray];
    }
  }
  if (other.hasDefaultInt32) {
    [self setDefaultInt32:other.defaultInt32];
  }
  if (other.hasDefaultInt64) {
    [self setDefaultInt64:other.defaultInt64];
  }
  if (other.hasDefaultUint32) {
    [self setDefaultUint32:other.defaultUint32];
  }
  if (other.hasDefaultUint64) {
    [self setDefaultUint64:other.defaultUint64];
  }
  if (other.hasDefaultSint32) {
    [self setDefaultSint32:other.defaultSint32];
  }
  if (other.hasDefaultSint64) {
    [self setDefaultSint64:other.defaultSint64];
  }
  if (other.hasDefaultFixed32) {
    [self setDefaultFixed32:other.defaultFixed32];
  }
  if (other.hasDefaultFixed64) {
    [self setDefaultFixed64:other.defaultFixed64];
  }
  if (other.hasDefaultSfixed32) {
    [self setDefaultSfixed32:other.defaultSfixed32];
  }
  if (other.hasDefaultSfixed64) {
    [self setDefaultSfixed64:other.defaultSfixed64];
  }
  if (other.hasDefaultFloat) {
    [self setDefaultFloat:other.defaultFloat];
  }
  if (other.hasDefaultDouble) {
    [self setDefaultDouble:other.defaultDouble];
  }
  if (other.hasDefaultBool) {
    [self setDefaultBool:other.defaultBool];
  }
  if (other.hasDefaultString) {
    [self setDefaultString:other.defaultString];
  }
  if (other.hasDefaultBytes) {
    [self setDefaultBytes:other.defaultBytes];
  }
  if (other.hasDefaultNestedEnum) {
    [self setDefaultNestedEnum:other.defaultNestedEnum];
  }
  if (other.hasDefaultStringPiece) {
    [self setDefaultStringPiece:other.defaultStringPiece];
  }
  if (other.hasDefaultCord) {
    [self setDefaultCord:other.defaultCord];
  }
  if (other.hasOneofUint32) {
    [self setOneofUint32:other.oneofUint32];
  }
  if (other.hasOneofNestedMessage) {
    [self mergeOneofNestedMessage:other.oneofNestedMessage];
  }
  if (other.hasOneofString) {
    [self setOneofString:other.oneofString];
  }
  if (other.hasOneofBytes) {
    [self setOneofBytes:other.oneofBytes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOptionalInt32:[input readInt32]];
        break;
      }
      case 16: {
        [self setOptionalInt64:[input readInt64]];
        break;
      }
      case 24: {
        [self setOptionalUint32:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOptionalUint64:[input readUInt64]];
        break;
      }
      case 40: {
        [self setOptionalSint32:[input readSInt32]];
        break;
      }
      case 48: {
        [self setOptionalSint64:[input readSInt64]];
        break;
      }
      case 61: {
        [self setOptionalFixed32:[input readFixed32]];
        break;
      }
      case 65: {
        [self setOptionalFixed64:[input readFixed64]];
        break;
      }
      case 77: {
        [self setOptionalSfixed32:[input readSFixed32]];
        break;
      }
      case 81: {
        [self setOptionalSfixed64:[input readSFixed64]];
        break;
      }
      case 93: {
        [self setOptionalFloat:[input readFloat]];
        break;
      }
      case 97: {
        [self setOptionalDouble:[input readDouble]];
        break;
      }
      case 104: {
        [self setOptionalBool:[input readBool]];
        break;
      }
      case 114: {
        [self setOptionalString:[input readString]];
        break;
      }
      case 122: {
        [self setOptionalBytes:[input readData]];
        break;
      }
      case 131: {
        TestAllTypesOptionalGroupBuilder* subBuilder = [TestAllTypesOptionalGroup builder];
        if (self.hasOptionalGroup) {
          [subBuilder mergeFrom:self.optionalGroup];
        }
        [input readGroup:16 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroup:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        if (self.hasOptionalNestedMessage) {
          [subBuilder mergeFrom:self.optionalNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 168: {
        TestAllTypesNestedEnum value = (TestAllTypesNestedEnum)[input readEnum];
        if (TestAllTypesNestedEnumIsValidValue(value)) {
          [self setOptionalNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:21 value:value];
        }
        break;
      }
      case 194: {
        [self setOptionalStringPiece:[input readString]];
        break;
      }
      case 202: {
        [self setOptionalCord:[input readString]];
        break;
      }
      case 218: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        if (self.hasOptionalLazyMessage) {
          [subBuilder mergeFrom:self.optionalLazyMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalLazyMessage:[subBuilder buildPartial]];
        break;
      }
      case 248: {
        [self addRepeatedInt32:[input readInt32]];
        break;
      }
      case 256: {
        [self addRepeatedInt64:[input readInt64]];
        break;
      }
      case 264: {
        [self addRepeatedUint32:[input readUInt32]];
        break;
      }
      case 272: {
        [self addRepeatedUint64:[input readUInt64]];
        break;
      }
      case 280: {
        [self addRepeatedSint32:[input readSInt32]];
        break;
      }
      case 288: {
        [self addRepeatedSint64:[input readSInt64]];
        break;
      }
      case 301: {
        [self addRepeatedFixed32:[input readFixed32]];
        break;
      }
      case 305: {
        [self addRepeatedFixed64:[input readFixed64]];
        break;
      }
      case 317: {
        [self addRepeatedSfixed32:[input readSFixed32]];
        break;
      }
      case 321: {
        [self addRepeatedSfixed64:[input readSFixed64]];
        break;
      }
      case 333: {
        [self addRepeatedFloat:[input readFloat]];
        break;
      }
      case 337: {
        [self addRepeatedDouble:[input readDouble]];
        break;
      }
      case 344: {
        [self addRepeatedBool:[input readBool]];
        break;
      }
      case 354: {
        [self addRepeatedString:[input readString]];
        break;
      }
      case 362: {
        [self addRepeatedBytes:[input readData]];
        break;
      }
      case 371: {
        TestAllTypesRepeatedGroupBuilder* subBuilder = [TestAllTypesRepeatedGroup builder];
        [input readGroup:46 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedGroup:[subBuilder buildPartial]];
        break;
      }
      case 386: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 408: {
        TestAllTypesNestedEnum value = (TestAllTypesNestedEnum)[input readEnum];
        if (TestAllTypesNestedEnumIsValidValue(value)) {
          [self addRepeatedNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:51 value:value];
        }
        break;
      }
      case 434: {
        [self addRepeatedStringPiece:[input readString]];
        break;
      }
      case 442: {
        [self addRepeatedCord:[input readString]];
        break;
      }
      case 458: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedLazyMessage:[subBuilder buildPartial]];
        break;
      }
      case 488: {
        [self setDefaultInt32:[input readInt32]];
        break;
      }
      case 496: {
        [self setDefaultInt64:[input readInt64]];
        break;
      }
      case 504: {
        [self setDefaultUint32:[input readUInt32]];
        break;
      }
      case 512: {
        [self setDefaultUint64:[input readUInt64]];
        break;
      }
      case 520: {
        [self setDefaultSint32:[input readSInt32]];
        break;
      }
      case 528: {
        [self setDefaultSint64:[input readSInt64]];
        break;
      }
      case 541: {
        [self setDefaultFixed32:[input readFixed32]];
        break;
      }
      case 545: {
        [self setDefaultFixed64:[input readFixed64]];
        break;
      }
      case 557: {
        [self setDefaultSfixed32:[input readSFixed32]];
        break;
      }
      case 561: {
        [self setDefaultSfixed64:[input readSFixed64]];
        break;
      }
      case 573: {
        [self setDefaultFloat:[input readFloat]];
        break;
      }
      case 577: {
        [self setDefaultDouble:[input readDouble]];
        break;
      }
      case 584: {
        [self setDefaultBool:[input readBool]];
        break;
      }
      case 594: {
        [self setDefaultString:[input readString]];
        break;
      }
      case 602: {
        [self setDefaultBytes:[input readData]];
        break;
      }
      case 648: {
        TestAllTypesNestedEnum value = (TestAllTypesNestedEnum)[input readEnum];
        if (TestAllTypesNestedEnumIsValidValue(value)) {
          [self setDefaultNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:81 value:value];
        }
        break;
      }
      case 674: {
        [self setDefaultStringPiece:[input readString]];
        break;
      }
      case 682: {
        [self setDefaultCord:[input readString]];
        break;
      }
      case 888: {
        [self setOneofUint32:[input readUInt32]];
        break;
      }
      case 898: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        if (self.hasOneofNestedMessage) {
          [subBuilder mergeFrom:self.oneofNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOneofNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 906: {
        [self setOneofString:[input readString]];
        break;
      }
      case 914: {
        [self setOneofBytes:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasOptionalInt32 {
  return resultTestAllTypes.hasOptionalInt32;
}
- (SInt32) optionalInt32 {
  return resultTestAllTypes.optionalInt32;
}
- (TestAllTypesBuilder*) setOptionalInt32:(SInt32) value {
  resultTestAllTypes.hasOptionalInt32 = YES;
  resultTestAllTypes.optionalInt32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalInt32 {
  resultTestAllTypes.hasOptionalInt32 = NO;
  resultTestAllTypes.optionalInt32 = 0;
  return self;
}
- (BOOL) hasOptionalInt64 {
  return resultTestAllTypes.hasOptionalInt64;
}
- (SInt64) optionalInt64 {
  return resultTestAllTypes.optionalInt64;
}
- (TestAllTypesBuilder*) setOptionalInt64:(SInt64) value {
  resultTestAllTypes.hasOptionalInt64 = YES;
  resultTestAllTypes.optionalInt64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalInt64 {
  resultTestAllTypes.hasOptionalInt64 = NO;
  resultTestAllTypes.optionalInt64 = 0L;
  return self;
}
- (BOOL) hasOptionalUint32 {
  return resultTestAllTypes.hasOptionalUint32;
}
- (UInt32) optionalUint32 {
  return resultTestAllTypes.optionalUint32;
}
- (TestAllTypesBuilder*) setOptionalUint32:(UInt32) value {
  resultTestAllTypes.hasOptionalUint32 = YES;
  resultTestAllTypes.optionalUint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalUint32 {
  resultTestAllTypes.hasOptionalUint32 = NO;
  resultTestAllTypes.optionalUint32 = 0;
  return self;
}
- (BOOL) hasOptionalUint64 {
  return resultTestAllTypes.hasOptionalUint64;
}
- (UInt64) optionalUint64 {
  return resultTestAllTypes.optionalUint64;
}
- (TestAllTypesBuilder*) setOptionalUint64:(UInt64) value {
  resultTestAllTypes.hasOptionalUint64 = YES;
  resultTestAllTypes.optionalUint64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalUint64 {
  resultTestAllTypes.hasOptionalUint64 = NO;
  resultTestAllTypes.optionalUint64 = 0L;
  return self;
}
- (BOOL) hasOptionalSint32 {
  return resultTestAllTypes.hasOptionalSint32;
}
- (SInt32) optionalSint32 {
  return resultTestAllTypes.optionalSint32;
}
- (TestAllTypesBuilder*) setOptionalSint32:(SInt32) value {
  resultTestAllTypes.hasOptionalSint32 = YES;
  resultTestAllTypes.optionalSint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalSint32 {
  resultTestAllTypes.hasOptionalSint32 = NO;
  resultTestAllTypes.optionalSint32 = 0;
  return self;
}
- (BOOL) hasOptionalSint64 {
  return resultTestAllTypes.hasOptionalSint64;
}
- (SInt64) optionalSint64 {
  return resultTestAllTypes.optionalSint64;
}
- (TestAllTypesBuilder*) setOptionalSint64:(SInt64) value {
  resultTestAllTypes.hasOptionalSint64 = YES;
  resultTestAllTypes.optionalSint64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalSint64 {
  resultTestAllTypes.hasOptionalSint64 = NO;
  resultTestAllTypes.optionalSint64 = 0L;
  return self;
}
- (BOOL) hasOptionalFixed32 {
  return resultTestAllTypes.hasOptionalFixed32;
}
- (UInt32) optionalFixed32 {
  return resultTestAllTypes.optionalFixed32;
}
- (TestAllTypesBuilder*) setOptionalFixed32:(UInt32) value {
  resultTestAllTypes.hasOptionalFixed32 = YES;
  resultTestAllTypes.optionalFixed32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalFixed32 {
  resultTestAllTypes.hasOptionalFixed32 = NO;
  resultTestAllTypes.optionalFixed32 = 0;
  return self;
}
- (BOOL) hasOptionalFixed64 {
  return resultTestAllTypes.hasOptionalFixed64;
}
- (UInt64) optionalFixed64 {
  return resultTestAllTypes.optionalFixed64;
}
- (TestAllTypesBuilder*) setOptionalFixed64:(UInt64) value {
  resultTestAllTypes.hasOptionalFixed64 = YES;
  resultTestAllTypes.optionalFixed64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalFixed64 {
  resultTestAllTypes.hasOptionalFixed64 = NO;
  resultTestAllTypes.optionalFixed64 = 0L;
  return self;
}
- (BOOL) hasOptionalSfixed32 {
  return resultTestAllTypes.hasOptionalSfixed32;
}
- (SInt32) optionalSfixed32 {
  return resultTestAllTypes.optionalSfixed32;
}
- (TestAllTypesBuilder*) setOptionalSfixed32:(SInt32) value {
  resultTestAllTypes.hasOptionalSfixed32 = YES;
  resultTestAllTypes.optionalSfixed32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalSfixed32 {
  resultTestAllTypes.hasOptionalSfixed32 = NO;
  resultTestAllTypes.optionalSfixed32 = 0;
  return self;
}
- (BOOL) hasOptionalSfixed64 {
  return resultTestAllTypes.hasOptionalSfixed64;
}
- (SInt64) optionalSfixed64 {
  return resultTestAllTypes.optionalSfixed64;
}
- (TestAllTypesBuilder*) setOptionalSfixed64:(SInt64) value {
  resultTestAllTypes.hasOptionalSfixed64 = YES;
  resultTestAllTypes.optionalSfixed64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalSfixed64 {
  resultTestAllTypes.hasOptionalSfixed64 = NO;
  resultTestAllTypes.optionalSfixed64 = 0L;
  return self;
}
- (BOOL) hasOptionalFloat {
  return resultTestAllTypes.hasOptionalFloat;
}
- (Float32) optionalFloat {
  return resultTestAllTypes.optionalFloat;
}
- (TestAllTypesBuilder*) setOptionalFloat:(Float32) value {
  resultTestAllTypes.hasOptionalFloat = YES;
  resultTestAllTypes.optionalFloat = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalFloat {
  resultTestAllTypes.hasOptionalFloat = NO;
  resultTestAllTypes.optionalFloat = 0;
  return self;
}
- (BOOL) hasOptionalDouble {
  return resultTestAllTypes.hasOptionalDouble;
}
- (Float64) optionalDouble {
  return resultTestAllTypes.optionalDouble;
}
- (TestAllTypesBuilder*) setOptionalDouble:(Float64) value {
  resultTestAllTypes.hasOptionalDouble = YES;
  resultTestAllTypes.optionalDouble = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalDouble {
  resultTestAllTypes.hasOptionalDouble = NO;
  resultTestAllTypes.optionalDouble = 0;
  return self;
}
- (BOOL) hasOptionalBool {
  return resultTestAllTypes.hasOptionalBool;
}
- (BOOL) optionalBool {
  return resultTestAllTypes.optionalBool;
}
- (TestAllTypesBuilder*) setOptionalBool:(BOOL) value {
  resultTestAllTypes.hasOptionalBool = YES;
  resultTestAllTypes.optionalBool = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalBool {
  resultTestAllTypes.hasOptionalBool = NO;
  resultTestAllTypes.optionalBool = NO;
  return self;
}
- (BOOL) hasOptionalString {
  return resultTestAllTypes.hasOptionalString;
}
- (NSString*) optionalString {
  return resultTestAllTypes.optionalString;
}
- (TestAllTypesBuilder*) setOptionalString:(NSString*) value {
  resultTestAllTypes.hasOptionalString = YES;
  resultTestAllTypes.optionalString = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalString {
  resultTestAllTypes.hasOptionalString = NO;
  resultTestAllTypes.optionalString = @"";
  return self;
}
- (BOOL) hasOptionalBytes {
  return resultTestAllTypes.hasOptionalBytes;
}
- (NSData*) optionalBytes {
  return resultTestAllTypes.optionalBytes;
}
- (TestAllTypesBuilder*) setOptionalBytes:(NSData*) value {
  resultTestAllTypes.hasOptionalBytes = YES;
  resultTestAllTypes.optionalBytes = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalBytes {
  resultTestAllTypes.hasOptionalBytes = NO;
  resultTestAllTypes.optionalBytes = [NSData data];
  return self;
}
- (BOOL) hasOptionalGroup {
  return resultTestAllTypes.hasOptionalGroup;
}
- (TestAllTypesOptionalGroup*) optionalGroup {
  return resultTestAllTypes.optionalGroup;
}
- (TestAllTypesBuilder*) setOptionalGroup:(TestAllTypesOptionalGroup*) value {
  resultTestAllTypes.hasOptionalGroup = YES;
  resultTestAllTypes.optionalGroup = value;
  return self;
}
- (TestAllTypesBuilder*) setOptionalGroupBuilder:(TestAllTypesOptionalGroupBuilder*) builderForValue {
  return [self setOptionalGroup:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOptionalGroup:(TestAllTypesOptionalGroup*) value {
  if (resultTestAllTypes.hasOptionalGroup &&
      resultTestAllTypes.optionalGroup != [TestAllTypesOptionalGroup defaultInstance]) {
    resultTestAllTypes.optionalGroup =
      [[[TestAllTypesOptionalGroup builderWithPrototype:resultTestAllTypes.optionalGroup] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.optionalGroup = value;
  }
  resultTestAllTypes.hasOptionalGroup = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalGroup {
  resultTestAllTypes.hasOptionalGroup = NO;
  resultTestAllTypes.optionalGroup = [TestAllTypesOptionalGroup defaultInstance];
  return self;
}
- (BOOL) hasOptionalNestedMessage {
  return resultTestAllTypes.hasOptionalNestedMessage;
}
- (TestAllTypesNestedMessage*) optionalNestedMessage {
  return resultTestAllTypes.optionalNestedMessage;
}
- (TestAllTypesBuilder*) setOptionalNestedMessage:(TestAllTypesNestedMessage*) value {
  resultTestAllTypes.hasOptionalNestedMessage = YES;
  resultTestAllTypes.optionalNestedMessage = value;
  return self;
}
- (TestAllTypesBuilder*) setOptionalNestedMessageBuilder:(TestAllTypesNestedMessageBuilder*) builderForValue {
  return [self setOptionalNestedMessage:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOptionalNestedMessage:(TestAllTypesNestedMessage*) value {
  if (resultTestAllTypes.hasOptionalNestedMessage &&
      resultTestAllTypes.optionalNestedMessage != [TestAllTypesNestedMessage defaultInstance]) {
    resultTestAllTypes.optionalNestedMessage =
      [[[TestAllTypesNestedMessage builderWithPrototype:resultTestAllTypes.optionalNestedMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.optionalNestedMessage = value;
  }
  resultTestAllTypes.hasOptionalNestedMessage = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalNestedMessage {
  resultTestAllTypes.hasOptionalNestedMessage = NO;
  resultTestAllTypes.optionalNestedMessage = [TestAllTypesNestedMessage defaultInstance];
  return self;
}
- (BOOL) hasOptionalNestedEnum {
  return resultTestAllTypes.hasOptionalNestedEnum;
}
- (TestAllTypesNestedEnum) optionalNestedEnum {
  return resultTestAllTypes.optionalNestedEnum;
}
- (TestAllTypesBuilder*) setOptionalNestedEnum:(TestAllTypesNestedEnum) value {
  resultTestAllTypes.hasOptionalNestedEnum = YES;
  resultTestAllTypes.optionalNestedEnum = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalNestedEnum {
  resultTestAllTypes.hasOptionalNestedEnum = NO;
  resultTestAllTypes.optionalNestedEnum = TestAllTypesNestedEnumFoo;
  return self;
}
- (BOOL) hasOptionalStringPiece {
  return resultTestAllTypes.hasOptionalStringPiece;
}
- (NSString*) optionalStringPiece {
  return resultTestAllTypes.optionalStringPiece;
}
- (TestAllTypesBuilder*) setOptionalStringPiece:(NSString*) value {
  resultTestAllTypes.hasOptionalStringPiece = YES;
  resultTestAllTypes.optionalStringPiece = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalStringPiece {
  resultTestAllTypes.hasOptionalStringPiece = NO;
  resultTestAllTypes.optionalStringPiece = @"";
  return self;
}
- (BOOL) hasOptionalCord {
  return resultTestAllTypes.hasOptionalCord;
}
- (NSString*) optionalCord {
  return resultTestAllTypes.optionalCord;
}
- (TestAllTypesBuilder*) setOptionalCord:(NSString*) value {
  resultTestAllTypes.hasOptionalCord = YES;
  resultTestAllTypes.optionalCord = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalCord {
  resultTestAllTypes.hasOptionalCord = NO;
  resultTestAllTypes.optionalCord = @"";
  return self;
}
- (BOOL) hasOptionalLazyMessage {
  return resultTestAllTypes.hasOptionalLazyMessage;
}
- (TestAllTypesNestedMessage*) optionalLazyMessage {
  return resultTestAllTypes.optionalLazyMessage;
}
- (TestAllTypesBuilder*) setOptionalLazyMessage:(TestAllTypesNestedMessage*) value {
  resultTestAllTypes.hasOptionalLazyMessage = YES;
  resultTestAllTypes.optionalLazyMessage = value;
  return self;
}
- (TestAllTypesBuilder*) setOptionalLazyMessageBuilder:(TestAllTypesNestedMessageBuilder*) builderForValue {
  return [self setOptionalLazyMessage:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOptionalLazyMessage:(TestAllTypesNestedMessage*) value {
  if (resultTestAllTypes.hasOptionalLazyMessage &&
      resultTestAllTypes.optionalLazyMessage != [TestAllTypesNestedMessage defaultInstance]) {
    resultTestAllTypes.optionalLazyMessage =
      [[[TestAllTypesNestedMessage builderWithPrototype:resultTestAllTypes.optionalLazyMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.optionalLazyMessage = value;
  }
  resultTestAllTypes.hasOptionalLazyMessage = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalLazyMessage {
  resultTestAllTypes.hasOptionalLazyMessage = NO;
  resultTestAllTypes.optionalLazyMessage = [TestAllTypesNestedMessage defaultInstance];
  return self;
}
- (PBAppendableArray *)repeatedInt32 {
  return resultTestAllTypes.repeatedInt32Array;
}
- (SInt32)repeatedInt32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedInt32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedInt32:(SInt32)value {
  if (resultTestAllTypes.repeatedInt32Array == nil) {
    resultTestAllTypes.repeatedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedInt32Array addInt32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedInt32Array:(NSArray *)array {
  resultTestAllTypes.repeatedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedInt32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedInt32 {
  resultTestAllTypes.repeatedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedInt64 {
  return resultTestAllTypes.repeatedInt64Array;
}
- (SInt64)repeatedInt64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedInt64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedInt64:(SInt64)value {
  if (resultTestAllTypes.repeatedInt64Array == nil) {
    resultTestAllTypes.repeatedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestAllTypes.repeatedInt64Array addInt64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedInt64Array:(NSArray *)array {
  resultTestAllTypes.repeatedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedInt64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedInt64 {
  resultTestAllTypes.repeatedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint32 {
  return resultTestAllTypes.repeatedUint32Array;
}
- (UInt32)repeatedUint32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedUint32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedUint32:(UInt32)value {
  if (resultTestAllTypes.repeatedUint32Array == nil) {
    resultTestAllTypes.repeatedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestAllTypes.repeatedUint32Array addUint32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedUint32Array:(NSArray *)array {
  resultTestAllTypes.repeatedUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedUint32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedUint32 {
  resultTestAllTypes.repeatedUint32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint64 {
  return resultTestAllTypes.repeatedUint64Array;
}
- (UInt64)repeatedUint64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedUint64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedUint64:(UInt64)value {
  if (resultTestAllTypes.repeatedUint64Array == nil) {
    resultTestAllTypes.repeatedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestAllTypes.repeatedUint64Array addUint64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedUint64Array:(NSArray *)array {
  resultTestAllTypes.repeatedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedUint64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedUint64 {
  resultTestAllTypes.repeatedUint64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSint32 {
  return resultTestAllTypes.repeatedSint32Array;
}
- (SInt32)repeatedSint32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedSint32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedSint32:(SInt32)value {
  if (resultTestAllTypes.repeatedSint32Array == nil) {
    resultTestAllTypes.repeatedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedSint32Array addInt32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSint32Array:(NSArray *)array {
  resultTestAllTypes.repeatedSint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSint32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedSint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedSint32 {
  resultTestAllTypes.repeatedSint32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSint64 {
  return resultTestAllTypes.repeatedSint64Array;
}
- (SInt64)repeatedSint64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedSint64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedSint64:(SInt64)value {
  if (resultTestAllTypes.repeatedSint64Array == nil) {
    resultTestAllTypes.repeatedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestAllTypes.repeatedSint64Array addInt64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSint64Array:(NSArray *)array {
  resultTestAllTypes.repeatedSint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSint64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedSint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedSint64 {
  resultTestAllTypes.repeatedSint64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed32 {
  return resultTestAllTypes.repeatedFixed32Array;
}
- (UInt32)repeatedFixed32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedFixed32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedFixed32:(UInt32)value {
  if (resultTestAllTypes.repeatedFixed32Array == nil) {
    resultTestAllTypes.repeatedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestAllTypes.repeatedFixed32Array addUint32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFixed32Array:(NSArray *)array {
  resultTestAllTypes.repeatedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFixed32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedFixed32 {
  resultTestAllTypes.repeatedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed64 {
  return resultTestAllTypes.repeatedFixed64Array;
}
- (UInt64)repeatedFixed64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedFixed64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedFixed64:(UInt64)value {
  if (resultTestAllTypes.repeatedFixed64Array == nil) {
    resultTestAllTypes.repeatedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestAllTypes.repeatedFixed64Array addUint64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFixed64Array:(NSArray *)array {
  resultTestAllTypes.repeatedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFixed64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedFixed64 {
  resultTestAllTypes.repeatedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSfixed32 {
  return resultTestAllTypes.repeatedSfixed32Array;
}
- (SInt32)repeatedSfixed32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedSfixed32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedSfixed32:(SInt32)value {
  if (resultTestAllTypes.repeatedSfixed32Array == nil) {
    resultTestAllTypes.repeatedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedSfixed32Array addInt32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSfixed32Array:(NSArray *)array {
  resultTestAllTypes.repeatedSfixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSfixed32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedSfixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedSfixed32 {
  resultTestAllTypes.repeatedSfixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSfixed64 {
  return resultTestAllTypes.repeatedSfixed64Array;
}
- (SInt64)repeatedSfixed64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedSfixed64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedSfixed64:(SInt64)value {
  if (resultTestAllTypes.repeatedSfixed64Array == nil) {
    resultTestAllTypes.repeatedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestAllTypes.repeatedSfixed64Array addInt64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSfixed64Array:(NSArray *)array {
  resultTestAllTypes.repeatedSfixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSfixed64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedSfixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedSfixed64 {
  resultTestAllTypes.repeatedSfixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFloat {
  return resultTestAllTypes.repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedFloatAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedFloat:(Float32)value {
  if (resultTestAllTypes.repeatedFloatArray == nil) {
    resultTestAllTypes.repeatedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultTestAllTypes.repeatedFloatArray addFloat:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFloatArray:(NSArray *)array {
  resultTestAllTypes.repeatedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedFloat {
  resultTestAllTypes.repeatedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedDouble {
  return resultTestAllTypes.repeatedDoubleArray;
}
- (Float64)repeatedDoubleAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedDoubleAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedDouble:(Float64)value {
  if (resultTestAllTypes.repeatedDoubleArray == nil) {
    resultTestAllTypes.repeatedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [resultTestAllTypes.repeatedDoubleArray addDouble:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedDoubleArray:(NSArray *)array {
  resultTestAllTypes.repeatedDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedDouble {
  resultTestAllTypes.repeatedDoubleArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedBool {
  return resultTestAllTypes.repeatedBoolArray;
}
- (BOOL)repeatedBoolAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedBoolAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedBool:(BOOL)value {
  if (resultTestAllTypes.repeatedBoolArray == nil) {
    resultTestAllTypes.repeatedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [resultTestAllTypes.repeatedBoolArray addBool:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedBoolArray:(NSArray *)array {
  resultTestAllTypes.repeatedBoolArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedBoolValues:(const BOOL *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedBoolArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedBool {
  resultTestAllTypes.repeatedBoolArray = nil;
  return self;
}
- (NSMutableArray *)repeatedString {
  return resultTestAllTypes.repeatedStringArray;
}
- (NSString*)repeatedStringAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedStringAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedString:(NSString*)value {
  if (resultTestAllTypes.repeatedStringArray == nil) {
    resultTestAllTypes.repeatedStringArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedStringArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedStringArray:(NSArray *)array {
  resultTestAllTypes.repeatedStringArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedString {
  resultTestAllTypes.repeatedStringArray = nil;
  return self;
}
- (NSMutableArray *)repeatedBytes {
  return resultTestAllTypes.repeatedBytesArray;
}
- (NSData*)repeatedBytesAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedBytesAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedBytes:(NSData*)value {
  if (resultTestAllTypes.repeatedBytesArray == nil) {
    resultTestAllTypes.repeatedBytesArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedBytesArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedBytesArray:(NSArray *)array {
  resultTestAllTypes.repeatedBytesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedBytes {
  resultTestAllTypes.repeatedBytesArray = nil;
  return self;
}
- (NSMutableArray *)repeatedGroup {
  return resultTestAllTypes.repeatedGroupArray;
}
- (TestAllTypesRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedGroupAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedGroup:(TestAllTypesRepeatedGroup*)value {
  if (resultTestAllTypes.repeatedGroupArray == nil) {
    resultTestAllTypes.repeatedGroupArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedGroupArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedGroupArray:(NSArray *)array {
  resultTestAllTypes.repeatedGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedGroup {
  resultTestAllTypes.repeatedGroupArray = nil;
  return self;
}
- (NSMutableArray *)repeatedNestedMessage {
  return resultTestAllTypes.repeatedNestedMessageArray;
}
- (TestAllTypesNestedMessage*)repeatedNestedMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedNestedMessageAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedNestedMessage:(TestAllTypesNestedMessage*)value {
  if (resultTestAllTypes.repeatedNestedMessageArray == nil) {
    resultTestAllTypes.repeatedNestedMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedNestedMessageArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedNestedMessageArray:(NSArray *)array {
  resultTestAllTypes.repeatedNestedMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedNestedMessage {
  resultTestAllTypes.repeatedNestedMessageArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedNestedEnum {
  return resultTestAllTypes.repeatedNestedEnumArray;
}
- (TestAllTypesNestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedNestedEnumAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedNestedEnum:(TestAllTypesNestedEnum)value {
  if (resultTestAllTypes.repeatedNestedEnumArray == nil) {
    resultTestAllTypes.repeatedNestedEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedNestedEnumArray addEnum:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedNestedEnumArray:(NSArray *)array {
  resultTestAllTypes.repeatedNestedEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedNestedEnumValues:(const TestAllTypesNestedEnum *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedNestedEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedNestedEnum {
  resultTestAllTypes.repeatedNestedEnumArray = nil;
  return self;
}
- (NSMutableArray *)repeatedStringPiece {
  return resultTestAllTypes.repeatedStringPieceArray;
}
- (NSString*)repeatedStringPieceAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedStringPieceAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedStringPiece:(NSString*)value {
  if (resultTestAllTypes.repeatedStringPieceArray == nil) {
    resultTestAllTypes.repeatedStringPieceArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedStringPieceArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedStringPieceArray:(NSArray *)array {
  resultTestAllTypes.repeatedStringPieceArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedStringPiece {
  resultTestAllTypes.repeatedStringPieceArray = nil;
  return self;
}
- (NSMutableArray *)repeatedCord {
  return resultTestAllTypes.repeatedCordArray;
}
- (NSString*)repeatedCordAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedCordAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedCord:(NSString*)value {
  if (resultTestAllTypes.repeatedCordArray == nil) {
    resultTestAllTypes.repeatedCordArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedCordArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedCordArray:(NSArray *)array {
  resultTestAllTypes.repeatedCordArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedCord {
  resultTestAllTypes.repeatedCordArray = nil;
  return self;
}
- (NSMutableArray *)repeatedLazyMessage {
  return resultTestAllTypes.repeatedLazyMessageArray;
}
- (TestAllTypesNestedMessage*)repeatedLazyMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedLazyMessageAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedLazyMessage:(TestAllTypesNestedMessage*)value {
  if (resultTestAllTypes.repeatedLazyMessageArray == nil) {
    resultTestAllTypes.repeatedLazyMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedLazyMessageArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedLazyMessageArray:(NSArray *)array {
  resultTestAllTypes.repeatedLazyMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedLazyMessage {
  resultTestAllTypes.repeatedLazyMessageArray = nil;
  return self;
}
- (BOOL) hasDefaultInt32 {
  return resultTestAllTypes.hasDefaultInt32;
}
- (SInt32) defaultInt32 {
  return resultTestAllTypes.defaultInt32;
}
- (TestAllTypesBuilder*) setDefaultInt32:(SInt32) value {
  resultTestAllTypes.hasDefaultInt32 = YES;
  resultTestAllTypes.defaultInt32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultInt32 {
  resultTestAllTypes.hasDefaultInt32 = NO;
  resultTestAllTypes.defaultInt32 = 41;
  return self;
}
- (BOOL) hasDefaultInt64 {
  return resultTestAllTypes.hasDefaultInt64;
}
- (SInt64) defaultInt64 {
  return resultTestAllTypes.defaultInt64;
}
- (TestAllTypesBuilder*) setDefaultInt64:(SInt64) value {
  resultTestAllTypes.hasDefaultInt64 = YES;
  resultTestAllTypes.defaultInt64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultInt64 {
  resultTestAllTypes.hasDefaultInt64 = NO;
  resultTestAllTypes.defaultInt64 = 42L;
  return self;
}
- (BOOL) hasDefaultUint32 {
  return resultTestAllTypes.hasDefaultUint32;
}
- (UInt32) defaultUint32 {
  return resultTestAllTypes.defaultUint32;
}
- (TestAllTypesBuilder*) setDefaultUint32:(UInt32) value {
  resultTestAllTypes.hasDefaultUint32 = YES;
  resultTestAllTypes.defaultUint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultUint32 {
  resultTestAllTypes.hasDefaultUint32 = NO;
  resultTestAllTypes.defaultUint32 = 43;
  return self;
}
- (BOOL) hasDefaultUint64 {
  return resultTestAllTypes.hasDefaultUint64;
}
- (UInt64) defaultUint64 {
  return resultTestAllTypes.defaultUint64;
}
- (TestAllTypesBuilder*) setDefaultUint64:(UInt64) value {
  resultTestAllTypes.hasDefaultUint64 = YES;
  resultTestAllTypes.defaultUint64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultUint64 {
  resultTestAllTypes.hasDefaultUint64 = NO;
  resultTestAllTypes.defaultUint64 = 44L;
  return self;
}
- (BOOL) hasDefaultSint32 {
  return resultTestAllTypes.hasDefaultSint32;
}
- (SInt32) defaultSint32 {
  return resultTestAllTypes.defaultSint32;
}
- (TestAllTypesBuilder*) setDefaultSint32:(SInt32) value {
  resultTestAllTypes.hasDefaultSint32 = YES;
  resultTestAllTypes.defaultSint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultSint32 {
  resultTestAllTypes.hasDefaultSint32 = NO;
  resultTestAllTypes.defaultSint32 = -45;
  return self;
}
- (BOOL) hasDefaultSint64 {
  return resultTestAllTypes.hasDefaultSint64;
}
- (SInt64) defaultSint64 {
  return resultTestAllTypes.defaultSint64;
}
- (TestAllTypesBuilder*) setDefaultSint64:(SInt64) value {
  resultTestAllTypes.hasDefaultSint64 = YES;
  resultTestAllTypes.defaultSint64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultSint64 {
  resultTestAllTypes.hasDefaultSint64 = NO;
  resultTestAllTypes.defaultSint64 = 46L;
  return self;
}
- (BOOL) hasDefaultFixed32 {
  return resultTestAllTypes.hasDefaultFixed32;
}
- (UInt32) defaultFixed32 {
  return resultTestAllTypes.defaultFixed32;
}
- (TestAllTypesBuilder*) setDefaultFixed32:(UInt32) value {
  resultTestAllTypes.hasDefaultFixed32 = YES;
  resultTestAllTypes.defaultFixed32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultFixed32 {
  resultTestAllTypes.hasDefaultFixed32 = NO;
  resultTestAllTypes.defaultFixed32 = 47;
  return self;
}
- (BOOL) hasDefaultFixed64 {
  return resultTestAllTypes.hasDefaultFixed64;
}
- (UInt64) defaultFixed64 {
  return resultTestAllTypes.defaultFixed64;
}
- (TestAllTypesBuilder*) setDefaultFixed64:(UInt64) value {
  resultTestAllTypes.hasDefaultFixed64 = YES;
  resultTestAllTypes.defaultFixed64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultFixed64 {
  resultTestAllTypes.hasDefaultFixed64 = NO;
  resultTestAllTypes.defaultFixed64 = 48L;
  return self;
}
- (BOOL) hasDefaultSfixed32 {
  return resultTestAllTypes.hasDefaultSfixed32;
}
- (SInt32) defaultSfixed32 {
  return resultTestAllTypes.defaultSfixed32;
}
- (TestAllTypesBuilder*) setDefaultSfixed32:(SInt32) value {
  resultTestAllTypes.hasDefaultSfixed32 = YES;
  resultTestAllTypes.defaultSfixed32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultSfixed32 {
  resultTestAllTypes.hasDefaultSfixed32 = NO;
  resultTestAllTypes.defaultSfixed32 = 49;
  return self;
}
- (BOOL) hasDefaultSfixed64 {
  return resultTestAllTypes.hasDefaultSfixed64;
}
- (SInt64) defaultSfixed64 {
  return resultTestAllTypes.defaultSfixed64;
}
- (TestAllTypesBuilder*) setDefaultSfixed64:(SInt64) value {
  resultTestAllTypes.hasDefaultSfixed64 = YES;
  resultTestAllTypes.defaultSfixed64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultSfixed64 {
  resultTestAllTypes.hasDefaultSfixed64 = NO;
  resultTestAllTypes.defaultSfixed64 = -50L;
  return self;
}
- (BOOL) hasDefaultFloat {
  return resultTestAllTypes.hasDefaultFloat;
}
- (Float32) defaultFloat {
  return resultTestAllTypes.defaultFloat;
}
- (TestAllTypesBuilder*) setDefaultFloat:(Float32) value {
  resultTestAllTypes.hasDefaultFloat = YES;
  resultTestAllTypes.defaultFloat = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultFloat {
  resultTestAllTypes.hasDefaultFloat = NO;
  resultTestAllTypes.defaultFloat = 51.5;
  return self;
}
- (BOOL) hasDefaultDouble {
  return resultTestAllTypes.hasDefaultDouble;
}
- (Float64) defaultDouble {
  return resultTestAllTypes.defaultDouble;
}
- (TestAllTypesBuilder*) setDefaultDouble:(Float64) value {
  resultTestAllTypes.hasDefaultDouble = YES;
  resultTestAllTypes.defaultDouble = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultDouble {
  resultTestAllTypes.hasDefaultDouble = NO;
  resultTestAllTypes.defaultDouble = 52000;
  return self;
}
- (BOOL) hasDefaultBool {
  return resultTestAllTypes.hasDefaultBool;
}
- (BOOL) defaultBool {
  return resultTestAllTypes.defaultBool;
}
- (TestAllTypesBuilder*) setDefaultBool:(BOOL) value {
  resultTestAllTypes.hasDefaultBool = YES;
  resultTestAllTypes.defaultBool = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultBool {
  resultTestAllTypes.hasDefaultBool = NO;
  resultTestAllTypes.defaultBool = YES;
  return self;
}
- (BOOL) hasDefaultString {
  return resultTestAllTypes.hasDefaultString;
}
- (NSString*) defaultString {
  return resultTestAllTypes.defaultString;
}
- (TestAllTypesBuilder*) setDefaultString:(NSString*) value {
  resultTestAllTypes.hasDefaultString = YES;
  resultTestAllTypes.defaultString = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultString {
  resultTestAllTypes.hasDefaultString = NO;
  resultTestAllTypes.defaultString = @"hello";
  return self;
}
- (BOOL) hasDefaultBytes {
  return resultTestAllTypes.hasDefaultBytes;
}
- (NSData*) defaultBytes {
  return resultTestAllTypes.defaultBytes;
}
- (TestAllTypesBuilder*) setDefaultBytes:(NSData*) value {
  resultTestAllTypes.hasDefaultBytes = YES;
  resultTestAllTypes.defaultBytes = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultBytes {
  resultTestAllTypes.hasDefaultBytes = NO;
  resultTestAllTypes.defaultBytes = [NSData dataWithBytes:"world" length:5];
  return self;
}
- (BOOL) hasDefaultNestedEnum {
  return resultTestAllTypes.hasDefaultNestedEnum;
}
- (TestAllTypesNestedEnum) defaultNestedEnum {
  return resultTestAllTypes.defaultNestedEnum;
}
- (TestAllTypesBuilder*) setDefaultNestedEnum:(TestAllTypesNestedEnum) value {
  resultTestAllTypes.hasDefaultNestedEnum = YES;
  resultTestAllTypes.defaultNestedEnum = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultNestedEnum {
  resultTestAllTypes.hasDefaultNestedEnum = NO;
  resultTestAllTypes.defaultNestedEnum = TestAllTypesNestedEnumBar;
  return self;
}
- (BOOL) hasDefaultStringPiece {
  return resultTestAllTypes.hasDefaultStringPiece;
}
- (NSString*) defaultStringPiece {
  return resultTestAllTypes.defaultStringPiece;
}
- (TestAllTypesBuilder*) setDefaultStringPiece:(NSString*) value {
  resultTestAllTypes.hasDefaultStringPiece = YES;
  resultTestAllTypes.defaultStringPiece = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultStringPiece {
  resultTestAllTypes.hasDefaultStringPiece = NO;
  resultTestAllTypes.defaultStringPiece = @"abc";
  return self;
}
- (BOOL) hasDefaultCord {
  return resultTestAllTypes.hasDefaultCord;
}
- (NSString*) defaultCord {
  return resultTestAllTypes.defaultCord;
}
- (TestAllTypesBuilder*) setDefaultCord:(NSString*) value {
  resultTestAllTypes.hasDefaultCord = YES;
  resultTestAllTypes.defaultCord = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultCord {
  resultTestAllTypes.hasDefaultCord = NO;
  resultTestAllTypes.defaultCord = @"123";
  return self;
}
- (BOOL) hasOneofUint32 {
  return resultTestAllTypes.hasOneofUint32;
}
- (UInt32) oneofUint32 {
  return resultTestAllTypes.oneofUint32;
}
- (TestAllTypesBuilder*) setOneofUint32:(UInt32) value {
  resultTestAllTypes.hasOneofUint32 = YES;
  resultTestAllTypes.oneofUint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOneofUint32 {
  resultTestAllTypes.hasOneofUint32 = NO;
  resultTestAllTypes.oneofUint32 = 0;
  return self;
}
- (BOOL) hasOneofNestedMessage {
  return resultTestAllTypes.hasOneofNestedMessage;
}
- (TestAllTypesNestedMessage*) oneofNestedMessage {
  return resultTestAllTypes.oneofNestedMessage;
}
- (TestAllTypesBuilder*) setOneofNestedMessage:(TestAllTypesNestedMessage*) value {
  resultTestAllTypes.hasOneofNestedMessage = YES;
  resultTestAllTypes.oneofNestedMessage = value;
  return self;
}
- (TestAllTypesBuilder*) setOneofNestedMessageBuilder:(TestAllTypesNestedMessageBuilder*) builderForValue {
  return [self setOneofNestedMessage:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOneofNestedMessage:(TestAllTypesNestedMessage*) value {
  if (resultTestAllTypes.hasOneofNestedMessage &&
      resultTestAllTypes.oneofNestedMessage != [TestAllTypesNestedMessage defaultInstance]) {
    resultTestAllTypes.oneofNestedMessage =
      [[[TestAllTypesNestedMessage builderWithPrototype:resultTestAllTypes.oneofNestedMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.oneofNestedMessage = value;
  }
  resultTestAllTypes.hasOneofNestedMessage = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOneofNestedMessage {
  resultTestAllTypes.hasOneofNestedMessage = NO;
  resultTestAllTypes.oneofNestedMessage = [TestAllTypesNestedMessage defaultInstance];
  return self;
}
- (BOOL) hasOneofString {
  return resultTestAllTypes.hasOneofString;
}
- (NSString*) oneofString {
  return resultTestAllTypes.oneofString;
}
- (TestAllTypesBuilder*) setOneofString:(NSString*) value {
  resultTestAllTypes.hasOneofString = YES;
  resultTestAllTypes.oneofString = value;
  return self;
}
- (TestAllTypesBuilder*) clearOneofString {
  resultTestAllTypes.hasOneofString = NO;
  resultTestAllTypes.oneofString = @"";
  return self;
}
- (BOOL) hasOneofBytes {
  return resultTestAllTypes.hasOneofBytes;
}
- (NSData*) oneofBytes {
  return resultTestAllTypes.oneofBytes;
}
- (TestAllTypesBuilder*) setOneofBytes:(NSData*) value {
  resultTestAllTypes.hasOneofBytes = YES;
  resultTestAllTypes.oneofBytes = value;
  return self;
}
- (TestAllTypesBuilder*) clearOneofBytes {
  resultTestAllTypes.hasOneofBytes = NO;
  resultTestAllTypes.oneofBytes = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
