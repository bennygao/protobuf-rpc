// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Yingshibao.pb.h"
// @@protoc_insertion_point(imports)

@implementation YingshibaoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [YingshibaoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ModuleRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface UserInfo ()
@property (strong) NSString* nickName;
@property (strong) NSString* schoolName;
@property (strong) NSString* phone;
@property UInt32 examType;
@property (strong) NSString* channelName;
@end

@implementation UserInfo

- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasSchoolName {
  return !!hasSchoolName_;
}
- (void) setHasSchoolName:(BOOL) _value_ {
  hasSchoolName_ = !!_value_;
}
@synthesize schoolName;
- (BOOL) hasPhone {
  return !!hasPhone_;
}
- (void) setHasPhone:(BOOL) _value_ {
  hasPhone_ = !!_value_;
}
@synthesize phone;
- (BOOL) hasExamType {
  return !!hasExamType_;
}
- (void) setHasExamType:(BOOL) _value_ {
  hasExamType_ = !!_value_;
}
@synthesize examType;
- (BOOL) hasChannelName {
  return !!hasChannelName_;
}
- (void) setHasChannelName:(BOOL) _value_ {
  hasChannelName_ = !!_value_;
}
@synthesize channelName;
- (instancetype) init {
  if ((self = [super init])) {
    self.nickName = @"";
    self.schoolName = @"";
    self.phone = @"";
    self.examType = 0;
    self.channelName = @"";
  }
  return self;
}
static UserInfo* defaultUserInfoInstance = nil;
+ (void) initialize {
  if (self == [UserInfo class]) {
    defaultUserInfoInstance = [[UserInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultUserInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNickName) {
    return NO;
  }
  if (!self.hasPhone) {
    return NO;
  }
  if (!self.hasExamType) {
    return NO;
  }
  if (!self.hasChannelName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNickName) {
    [output writeString:1 value:self.nickName];
  }
  if (self.hasSchoolName) {
    [output writeString:2 value:self.schoolName];
  }
  if (self.hasPhone) {
    [output writeString:3 value:self.phone];
  }
  if (self.hasExamType) {
    [output writeUInt32:4 value:self.examType];
  }
  if (self.hasChannelName) {
    [output writeString:5 value:self.channelName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNickName) {
    size_ += computeStringSize(1, self.nickName);
  }
  if (self.hasSchoolName) {
    size_ += computeStringSize(2, self.schoolName);
  }
  if (self.hasPhone) {
    size_ += computeStringSize(3, self.phone);
  }
  if (self.hasExamType) {
    size_ += computeUInt32Size(4, self.examType);
  }
  if (self.hasChannelName) {
    size_ += computeStringSize(5, self.channelName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserInfo*) parseFromData:(NSData*) data {
  return (UserInfo*)[[[UserInfo builder] mergeFromData:data] build];
}
+ (UserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (UserInfo*)[[[UserInfo builder] mergeFromInputStream:input] build];
}
+ (UserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserInfo*)[[[UserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (UserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInfoBuilder*) builder {
  return [[UserInfoBuilder alloc] init];
}
+ (UserInfoBuilder*) builderWithPrototype:(UserInfo*) prototype {
  return [[UserInfo builder] mergeFrom:prototype];
}
- (UserInfoBuilder*) builder {
  return [UserInfo builder];
}
- (UserInfoBuilder*) toBuilder {
  return [UserInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasSchoolName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolName", self.schoolName];
  }
  if (self.hasPhone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phone", self.phone];
  }
  if (self.hasExamType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"examType", [NSNumber numberWithInteger:self.examType]];
  }
  if (self.hasChannelName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelName", self.channelName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNickName) {
    [dictionary setObject: self.nickName forKey: @"nickName"];
  }
  if (self.hasSchoolName) {
    [dictionary setObject: self.schoolName forKey: @"schoolName"];
  }
  if (self.hasPhone) {
    [dictionary setObject: self.phone forKey: @"phone"];
  }
  if (self.hasExamType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.examType] forKey: @"examType"];
  }
  if (self.hasChannelName) {
    [dictionary setObject: self.channelName forKey: @"channelName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserInfo class]]) {
    return NO;
  }
  UserInfo *otherMessage = other;
  return
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasSchoolName == otherMessage.hasSchoolName &&
      (!self.hasSchoolName || [self.schoolName isEqual:otherMessage.schoolName]) &&
      self.hasPhone == otherMessage.hasPhone &&
      (!self.hasPhone || [self.phone isEqual:otherMessage.phone]) &&
      self.hasExamType == otherMessage.hasExamType &&
      (!self.hasExamType || self.examType == otherMessage.examType) &&
      self.hasChannelName == otherMessage.hasChannelName &&
      (!self.hasChannelName || [self.channelName isEqual:otherMessage.channelName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasSchoolName) {
    hashCode = hashCode * 31 + [self.schoolName hash];
  }
  if (self.hasPhone) {
    hashCode = hashCode * 31 + [self.phone hash];
  }
  if (self.hasExamType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.examType] hash];
  }
  if (self.hasChannelName) {
    hashCode = hashCode * 31 + [self.channelName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserInfoBuilder()
@property (strong) UserInfo* resultUserInfo;
@end

@implementation UserInfoBuilder
@synthesize resultUserInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserInfo = [[UserInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserInfo;
}
- (UserInfoBuilder*) clear {
  self.resultUserInfo = [[UserInfo alloc] init];
  return self;
}
- (UserInfoBuilder*) clone {
  return [UserInfo builderWithPrototype:resultUserInfo];
}
- (UserInfo*) defaultInstance {
  return [UserInfo defaultInstance];
}
- (UserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserInfo*) buildPartial {
  UserInfo* returnMe = resultUserInfo;
  self.resultUserInfo = nil;
  return returnMe;
}
- (UserInfoBuilder*) mergeFrom:(UserInfo*) other {
  if (other == [UserInfo defaultInstance]) {
    return self;
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasSchoolName) {
    [self setSchoolName:other.schoolName];
  }
  if (other.hasPhone) {
    [self setPhone:other.phone];
  }
  if (other.hasExamType) {
    [self setExamType:other.examType];
  }
  if (other.hasChannelName) {
    [self setChannelName:other.channelName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNickName:[input readString]];
        break;
      }
      case 18: {
        [self setSchoolName:[input readString]];
        break;
      }
      case 26: {
        [self setPhone:[input readString]];
        break;
      }
      case 32: {
        [self setExamType:[input readUInt32]];
        break;
      }
      case 42: {
        [self setChannelName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasNickName {
  return resultUserInfo.hasNickName;
}
- (NSString*) nickName {
  return resultUserInfo.nickName;
}
- (UserInfoBuilder*) setNickName:(NSString*) value {
  resultUserInfo.hasNickName = YES;
  resultUserInfo.nickName = value;
  return self;
}
- (UserInfoBuilder*) clearNickName {
  resultUserInfo.hasNickName = NO;
  resultUserInfo.nickName = @"";
  return self;
}
- (BOOL) hasSchoolName {
  return resultUserInfo.hasSchoolName;
}
- (NSString*) schoolName {
  return resultUserInfo.schoolName;
}
- (UserInfoBuilder*) setSchoolName:(NSString*) value {
  resultUserInfo.hasSchoolName = YES;
  resultUserInfo.schoolName = value;
  return self;
}
- (UserInfoBuilder*) clearSchoolName {
  resultUserInfo.hasSchoolName = NO;
  resultUserInfo.schoolName = @"";
  return self;
}
- (BOOL) hasPhone {
  return resultUserInfo.hasPhone;
}
- (NSString*) phone {
  return resultUserInfo.phone;
}
- (UserInfoBuilder*) setPhone:(NSString*) value {
  resultUserInfo.hasPhone = YES;
  resultUserInfo.phone = value;
  return self;
}
- (UserInfoBuilder*) clearPhone {
  resultUserInfo.hasPhone = NO;
  resultUserInfo.phone = @"";
  return self;
}
- (BOOL) hasExamType {
  return resultUserInfo.hasExamType;
}
- (UInt32) examType {
  return resultUserInfo.examType;
}
- (UserInfoBuilder*) setExamType:(UInt32) value {
  resultUserInfo.hasExamType = YES;
  resultUserInfo.examType = value;
  return self;
}
- (UserInfoBuilder*) clearExamType {
  resultUserInfo.hasExamType = NO;
  resultUserInfo.examType = 0;
  return self;
}
- (BOOL) hasChannelName {
  return resultUserInfo.hasChannelName;
}
- (NSString*) channelName {
  return resultUserInfo.channelName;
}
- (UserInfoBuilder*) setChannelName:(NSString*) value {
  resultUserInfo.hasChannelName = YES;
  resultUserInfo.channelName = value;
  return self;
}
- (UserInfoBuilder*) clearChannelName {
  resultUserInfo.hasChannelName = NO;
  resultUserInfo.channelName = @"";
  return self;
}
@end

@interface RegisterResult ()
@property (strong) NSString* errorMessage;
@property SInt32 userId;
@property (strong) NSString* sessionId;
@end

@implementation RegisterResult

- (BOOL) hasErrorMessage {
  return !!hasErrorMessage_;
}
- (void) setHasErrorMessage:(BOOL) _value_ {
  hasErrorMessage_ = !!_value_;
}
@synthesize errorMessage;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (instancetype) init {
  if ((self = [super init])) {
    self.errorMessage = @"";
    self.userId = 0;
    self.sessionId = @"";
  }
  return self;
}
static RegisterResult* defaultRegisterResultInstance = nil;
+ (void) initialize {
  if (self == [RegisterResult class]) {
    defaultRegisterResultInstance = [[RegisterResult alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRegisterResultInstance;
}
- (instancetype) defaultInstance {
  return defaultRegisterResultInstance;
}
- (BOOL) isInitialized {
  if (!self.hasErrorMessage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasErrorMessage) {
    [output writeString:1 value:self.errorMessage];
  }
  if (self.hasUserId) {
    [output writeInt32:2 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasErrorMessage) {
    size_ += computeStringSize(1, self.errorMessage);
  }
  if (self.hasUserId) {
    size_ += computeInt32Size(2, self.userId);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RegisterResult*) parseFromData:(NSData*) data {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromData:data] build];
}
+ (RegisterResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegisterResult*) parseFromInputStream:(NSInputStream*) input {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromInputStream:input] build];
}
+ (RegisterResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromCodedInputStream:input] build];
}
+ (RegisterResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterResultBuilder*) builder {
  return [[RegisterResultBuilder alloc] init];
}
+ (RegisterResultBuilder*) builderWithPrototype:(RegisterResult*) prototype {
  return [[RegisterResult builder] mergeFrom:prototype];
}
- (RegisterResultBuilder*) builder {
  return [RegisterResult builder];
}
- (RegisterResultBuilder*) toBuilder {
  return [RegisterResult builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasErrorMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorMessage", self.errorMessage];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasErrorMessage) {
    [dictionary setObject: self.errorMessage forKey: @"errorMessage"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RegisterResult class]]) {
    return NO;
  }
  RegisterResult *otherMessage = other;
  return
      self.hasErrorMessage == otherMessage.hasErrorMessage &&
      (!self.hasErrorMessage || [self.errorMessage isEqual:otherMessage.errorMessage]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasErrorMessage) {
    hashCode = hashCode * 31 + [self.errorMessage hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RegisterResultBuilder()
@property (strong) RegisterResult* resultRegisterResult;
@end

@implementation RegisterResultBuilder
@synthesize resultRegisterResult;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRegisterResult = [[RegisterResult alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRegisterResult;
}
- (RegisterResultBuilder*) clear {
  self.resultRegisterResult = [[RegisterResult alloc] init];
  return self;
}
- (RegisterResultBuilder*) clone {
  return [RegisterResult builderWithPrototype:resultRegisterResult];
}
- (RegisterResult*) defaultInstance {
  return [RegisterResult defaultInstance];
}
- (RegisterResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegisterResult*) buildPartial {
  RegisterResult* returnMe = resultRegisterResult;
  self.resultRegisterResult = nil;
  return returnMe;
}
- (RegisterResultBuilder*) mergeFrom:(RegisterResult*) other {
  if (other == [RegisterResult defaultInstance]) {
    return self;
  }
  if (other.hasErrorMessage) {
    [self setErrorMessage:other.errorMessage];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegisterResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegisterResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setErrorMessage:[input readString]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasErrorMessage {
  return resultRegisterResult.hasErrorMessage;
}
- (NSString*) errorMessage {
  return resultRegisterResult.errorMessage;
}
- (RegisterResultBuilder*) setErrorMessage:(NSString*) value {
  resultRegisterResult.hasErrorMessage = YES;
  resultRegisterResult.errorMessage = value;
  return self;
}
- (RegisterResultBuilder*) clearErrorMessage {
  resultRegisterResult.hasErrorMessage = NO;
  resultRegisterResult.errorMessage = @"";
  return self;
}
- (BOOL) hasUserId {
  return resultRegisterResult.hasUserId;
}
- (SInt32) userId {
  return resultRegisterResult.userId;
}
- (RegisterResultBuilder*) setUserId:(SInt32) value {
  resultRegisterResult.hasUserId = YES;
  resultRegisterResult.userId = value;
  return self;
}
- (RegisterResultBuilder*) clearUserId {
  resultRegisterResult.hasUserId = NO;
  resultRegisterResult.userId = 0;
  return self;
}
- (BOOL) hasSessionId {
  return resultRegisterResult.hasSessionId;
}
- (NSString*) sessionId {
  return resultRegisterResult.sessionId;
}
- (RegisterResultBuilder*) setSessionId:(NSString*) value {
  resultRegisterResult.hasSessionId = YES;
  resultRegisterResult.sessionId = value;
  return self;
}
- (RegisterResultBuilder*) clearSessionId {
  resultRegisterResult.hasSessionId = NO;
  resultRegisterResult.sessionId = @"";
  return self;
}
@end

@interface Barrage ()
@property (strong) NSString* senderNickname;
@property (strong) NSString* message;
@end

@implementation Barrage

- (BOOL) hasSenderNickname {
  return !!hasSenderNickname_;
}
- (void) setHasSenderNickname:(BOOL) _value_ {
  hasSenderNickname_ = !!_value_;
}
@synthesize senderNickname;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (instancetype) init {
  if ((self = [super init])) {
    self.senderNickname = @"";
    self.message = @"";
  }
  return self;
}
static Barrage* defaultBarrageInstance = nil;
+ (void) initialize {
  if (self == [Barrage class]) {
    defaultBarrageInstance = [[Barrage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBarrageInstance;
}
- (instancetype) defaultInstance {
  return defaultBarrageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSenderNickname) {
    return NO;
  }
  if (!self.hasMessage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSenderNickname) {
    [output writeString:1 value:self.senderNickname];
  }
  if (self.hasMessage) {
    [output writeString:2 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSenderNickname) {
    size_ += computeStringSize(1, self.senderNickname);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(2, self.message);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Barrage*) parseFromData:(NSData*) data {
  return (Barrage*)[[[Barrage builder] mergeFromData:data] build];
}
+ (Barrage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Barrage*)[[[Barrage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Barrage*) parseFromInputStream:(NSInputStream*) input {
  return (Barrage*)[[[Barrage builder] mergeFromInputStream:input] build];
}
+ (Barrage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Barrage*)[[[Barrage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Barrage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Barrage*)[[[Barrage builder] mergeFromCodedInputStream:input] build];
}
+ (Barrage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Barrage*)[[[Barrage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BarrageBuilder*) builder {
  return [[BarrageBuilder alloc] init];
}
+ (BarrageBuilder*) builderWithPrototype:(Barrage*) prototype {
  return [[Barrage builder] mergeFrom:prototype];
}
- (BarrageBuilder*) builder {
  return [Barrage builder];
}
- (BarrageBuilder*) toBuilder {
  return [Barrage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSenderNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderNickname", self.senderNickname];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSenderNickname) {
    [dictionary setObject: self.senderNickname forKey: @"senderNickname"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Barrage class]]) {
    return NO;
  }
  Barrage *otherMessage = other;
  return
      self.hasSenderNickname == otherMessage.hasSenderNickname &&
      (!self.hasSenderNickname || [self.senderNickname isEqual:otherMessage.senderNickname]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSenderNickname) {
    hashCode = hashCode * 31 + [self.senderNickname hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BarrageBuilder()
@property (strong) Barrage* resultBarrage;
@end

@implementation BarrageBuilder
@synthesize resultBarrage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBarrage = [[Barrage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBarrage;
}
- (BarrageBuilder*) clear {
  self.resultBarrage = [[Barrage alloc] init];
  return self;
}
- (BarrageBuilder*) clone {
  return [Barrage builderWithPrototype:resultBarrage];
}
- (Barrage*) defaultInstance {
  return [Barrage defaultInstance];
}
- (Barrage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Barrage*) buildPartial {
  Barrage* returnMe = resultBarrage;
  self.resultBarrage = nil;
  return returnMe;
}
- (BarrageBuilder*) mergeFrom:(Barrage*) other {
  if (other == [Barrage defaultInstance]) {
    return self;
  }
  if (other.hasSenderNickname) {
    [self setSenderNickname:other.senderNickname];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BarrageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BarrageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSenderNickname:[input readString]];
        break;
      }
      case 18: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSenderNickname {
  return resultBarrage.hasSenderNickname;
}
- (NSString*) senderNickname {
  return resultBarrage.senderNickname;
}
- (BarrageBuilder*) setSenderNickname:(NSString*) value {
  resultBarrage.hasSenderNickname = YES;
  resultBarrage.senderNickname = value;
  return self;
}
- (BarrageBuilder*) clearSenderNickname {
  resultBarrage.hasSenderNickname = NO;
  resultBarrage.senderNickname = @"";
  return self;
}
- (BOOL) hasMessage {
  return resultBarrage.hasMessage;
}
- (NSString*) message {
  return resultBarrage.message;
}
- (BarrageBuilder*) setMessage:(NSString*) value {
  resultBarrage.hasMessage = YES;
  resultBarrage.message = value;
  return self;
}
- (BarrageBuilder*) clearMessage {
  resultBarrage.hasMessage = NO;
  resultBarrage.message = @"";
  return self;
}
@end

@interface None ()
@end

@implementation None

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static None* defaultNoneInstance = nil;
+ (void) initialize {
  if (self == [None class]) {
    defaultNoneInstance = [[None alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNoneInstance;
}
- (instancetype) defaultInstance {
  return defaultNoneInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (None*) parseFromData:(NSData*) data {
  return (None*)[[[None builder] mergeFromData:data] build];
}
+ (None*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (None*)[[[None builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (None*) parseFromInputStream:(NSInputStream*) input {
  return (None*)[[[None builder] mergeFromInputStream:input] build];
}
+ (None*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (None*)[[[None builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (None*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (None*)[[[None builder] mergeFromCodedInputStream:input] build];
}
+ (None*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (None*)[[[None builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NoneBuilder*) builder {
  return [[NoneBuilder alloc] init];
}
+ (NoneBuilder*) builderWithPrototype:(None*) prototype {
  return [[None builder] mergeFrom:prototype];
}
- (NoneBuilder*) builder {
  return [None builder];
}
- (NoneBuilder*) toBuilder {
  return [None builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[None class]]) {
    return NO;
  }
  None *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NoneBuilder()
@property (strong) None* resultNone;
@end

@implementation NoneBuilder
@synthesize resultNone;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNone = [[None alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNone;
}
- (NoneBuilder*) clear {
  self.resultNone = [[None alloc] init];
  return self;
}
- (NoneBuilder*) clone {
  return [None builderWithPrototype:resultNone];
}
- (None*) defaultInstance {
  return [None defaultInstance];
}
- (None*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (None*) buildPartial {
  None* returnMe = resultNone;
  self.resultNone = nil;
  return returnMe;
}
- (NoneBuilder*) mergeFrom:(None*) other {
  if (other == [None defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NoneBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NoneBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface ImportMessage ()
@property (strong) CourseInfo* courseInfo;
@property (strong) CourseList* courseList;
@end

@implementation ImportMessage

- (BOOL) hasCourseInfo {
  return !!hasCourseInfo_;
}
- (void) setHasCourseInfo:(BOOL) _value_ {
  hasCourseInfo_ = !!_value_;
}
@synthesize courseInfo;
- (BOOL) hasCourseList {
  return !!hasCourseList_;
}
- (void) setHasCourseList:(BOOL) _value_ {
  hasCourseList_ = !!_value_;
}
@synthesize courseList;
- (instancetype) init {
  if ((self = [super init])) {
    self.courseInfo = [CourseInfo defaultInstance];
    self.courseList = [CourseList defaultInstance];
  }
  return self;
}
static ImportMessage* defaultImportMessageInstance = nil;
+ (void) initialize {
  if (self == [ImportMessage class]) {
    defaultImportMessageInstance = [[ImportMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultImportMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultImportMessageInstance;
}
- (BOOL) isInitialized {
  if (self.hasCourseInfo) {
    if (!self.courseInfo.isInitialized) {
      return NO;
    }
  }
  if (self.hasCourseList) {
    if (!self.courseList.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCourseInfo) {
    [output writeMessage:1 value:self.courseInfo];
  }
  if (self.hasCourseList) {
    [output writeMessage:2 value:self.courseList];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCourseInfo) {
    size_ += computeMessageSize(1, self.courseInfo);
  }
  if (self.hasCourseList) {
    size_ += computeMessageSize(2, self.courseList);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ImportMessage*) parseFromData:(NSData*) data {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromData:data] build];
}
+ (ImportMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ImportMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromInputStream:input] build];
}
+ (ImportMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ImportMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ImportMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ImportMessage*)[[[ImportMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ImportMessageBuilder*) builder {
  return [[ImportMessageBuilder alloc] init];
}
+ (ImportMessageBuilder*) builderWithPrototype:(ImportMessage*) prototype {
  return [[ImportMessage builder] mergeFrom:prototype];
}
- (ImportMessageBuilder*) builder {
  return [ImportMessage builder];
}
- (ImportMessageBuilder*) toBuilder {
  return [ImportMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCourseInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"courseInfo"];
    [self.courseInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCourseList) {
    [output appendFormat:@"%@%@ {\n", indent, @"courseList"];
    [self.courseList writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCourseInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.courseInfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"courseInfo"];
  }
  if (self.hasCourseList) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.courseList storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"courseList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ImportMessage class]]) {
    return NO;
  }
  ImportMessage *otherMessage = other;
  return
      self.hasCourseInfo == otherMessage.hasCourseInfo &&
      (!self.hasCourseInfo || [self.courseInfo isEqual:otherMessage.courseInfo]) &&
      self.hasCourseList == otherMessage.hasCourseList &&
      (!self.hasCourseList || [self.courseList isEqual:otherMessage.courseList]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCourseInfo) {
    hashCode = hashCode * 31 + [self.courseInfo hash];
  }
  if (self.hasCourseList) {
    hashCode = hashCode * 31 + [self.courseList hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ImportMessageBuilder()
@property (strong) ImportMessage* resultImportMessage;
@end

@implementation ImportMessageBuilder
@synthesize resultImportMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImportMessage = [[ImportMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImportMessage;
}
- (ImportMessageBuilder*) clear {
  self.resultImportMessage = [[ImportMessage alloc] init];
  return self;
}
- (ImportMessageBuilder*) clone {
  return [ImportMessage builderWithPrototype:resultImportMessage];
}
- (ImportMessage*) defaultInstance {
  return [ImportMessage defaultInstance];
}
- (ImportMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ImportMessage*) buildPartial {
  ImportMessage* returnMe = resultImportMessage;
  self.resultImportMessage = nil;
  return returnMe;
}
- (ImportMessageBuilder*) mergeFrom:(ImportMessage*) other {
  if (other == [ImportMessage defaultInstance]) {
    return self;
  }
  if (other.hasCourseInfo) {
    [self mergeCourseInfo:other.courseInfo];
  }
  if (other.hasCourseList) {
    [self mergeCourseList:other.courseList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ImportMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ImportMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CourseInfoBuilder* subBuilder = [CourseInfo builder];
        if (self.hasCourseInfo) {
          [subBuilder mergeFrom:self.courseInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCourseInfo:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CourseListBuilder* subBuilder = [CourseList builder];
        if (self.hasCourseList) {
          [subBuilder mergeFrom:self.courseList];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCourseList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCourseInfo {
  return resultImportMessage.hasCourseInfo;
}
- (CourseInfo*) courseInfo {
  return resultImportMessage.courseInfo;
}
- (ImportMessageBuilder*) setCourseInfo:(CourseInfo*) value {
  resultImportMessage.hasCourseInfo = YES;
  resultImportMessage.courseInfo = value;
  return self;
}
- (ImportMessageBuilder*) setCourseInfoBuilder:(CourseInfoBuilder*) builderForValue {
  return [self setCourseInfo:[builderForValue build]];
}
- (ImportMessageBuilder*) mergeCourseInfo:(CourseInfo*) value {
  if (resultImportMessage.hasCourseInfo &&
      resultImportMessage.courseInfo != [CourseInfo defaultInstance]) {
    resultImportMessage.courseInfo =
      [[[CourseInfo builderWithPrototype:resultImportMessage.courseInfo] mergeFrom:value] buildPartial];
  } else {
    resultImportMessage.courseInfo = value;
  }
  resultImportMessage.hasCourseInfo = YES;
  return self;
}
- (ImportMessageBuilder*) clearCourseInfo {
  resultImportMessage.hasCourseInfo = NO;
  resultImportMessage.courseInfo = [CourseInfo defaultInstance];
  return self;
}
- (BOOL) hasCourseList {
  return resultImportMessage.hasCourseList;
}
- (CourseList*) courseList {
  return resultImportMessage.courseList;
}
- (ImportMessageBuilder*) setCourseList:(CourseList*) value {
  resultImportMessage.hasCourseList = YES;
  resultImportMessage.courseList = value;
  return self;
}
- (ImportMessageBuilder*) setCourseListBuilder:(CourseListBuilder*) builderForValue {
  return [self setCourseList:[builderForValue build]];
}
- (ImportMessageBuilder*) mergeCourseList:(CourseList*) value {
  if (resultImportMessage.hasCourseList &&
      resultImportMessage.courseList != [CourseList defaultInstance]) {
    resultImportMessage.courseList =
      [[[CourseList builderWithPrototype:resultImportMessage.courseList] mergeFrom:value] buildPartial];
  } else {
    resultImportMessage.courseList = value;
  }
  resultImportMessage.hasCourseList = YES;
  return self;
}
- (ImportMessageBuilder*) clearCourseList {
  resultImportMessage.hasCourseList = NO;
  resultImportMessage.courseList = [CourseList defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
