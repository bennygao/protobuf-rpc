// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Yingshibao.pb.h"
// @@protoc_insertion_point(imports)

@implementation YingshibaoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [YingshibaoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface UserInfo ()
@property (strong) NSString* nickName;
@property (strong) NSString* schoolName;
@property (strong) NSString* phone;
@property UInt32 examType;
@property (strong) NSString* channelName;
@end

@implementation UserInfo

- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasSchoolName {
  return !!hasSchoolName_;
}
- (void) setHasSchoolName:(BOOL) _value_ {
  hasSchoolName_ = !!_value_;
}
@synthesize schoolName;
- (BOOL) hasPhone {
  return !!hasPhone_;
}
- (void) setHasPhone:(BOOL) _value_ {
  hasPhone_ = !!_value_;
}
@synthesize phone;
- (BOOL) hasExamType {
  return !!hasExamType_;
}
- (void) setHasExamType:(BOOL) _value_ {
  hasExamType_ = !!_value_;
}
@synthesize examType;
- (BOOL) hasChannelName {
  return !!hasChannelName_;
}
- (void) setHasChannelName:(BOOL) _value_ {
  hasChannelName_ = !!_value_;
}
@synthesize channelName;
- (instancetype) init {
  if ((self = [super init])) {
    self.nickName = @"";
    self.schoolName = @"";
    self.phone = @"";
    self.examType = 0;
    self.channelName = @"";
  }
  return self;
}
static UserInfo* defaultUserInfoInstance = nil;
+ (void) initialize {
  if (self == [UserInfo class]) {
    defaultUserInfoInstance = [[UserInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultUserInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNickName) {
    return NO;
  }
  if (!self.hasPhone) {
    return NO;
  }
  if (!self.hasExamType) {
    return NO;
  }
  if (!self.hasChannelName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNickName) {
    [output writeString:1 value:self.nickName];
  }
  if (self.hasSchoolName) {
    [output writeString:2 value:self.schoolName];
  }
  if (self.hasPhone) {
    [output writeString:3 value:self.phone];
  }
  if (self.hasExamType) {
    [output writeUInt32:4 value:self.examType];
  }
  if (self.hasChannelName) {
    [output writeString:5 value:self.channelName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNickName) {
    size_ += computeStringSize(1, self.nickName);
  }
  if (self.hasSchoolName) {
    size_ += computeStringSize(2, self.schoolName);
  }
  if (self.hasPhone) {
    size_ += computeStringSize(3, self.phone);
  }
  if (self.hasExamType) {
    size_ += computeUInt32Size(4, self.examType);
  }
  if (self.hasChannelName) {
    size_ += computeStringSize(5, self.channelName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserInfo*) parseFromData:(NSData*) data {
  return (UserInfo*)[[[UserInfo builder] mergeFromData:data] build];
}
+ (UserInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserInfo*) parseFromInputStream:(NSInputStream*) input {
  return (UserInfo*)[[[UserInfo builder] mergeFromInputStream:input] build];
}
+ (UserInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserInfo*)[[[UserInfo builder] mergeFromCodedInputStream:input] build];
}
+ (UserInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInfo*)[[[UserInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInfoBuilder*) builder {
  return [[UserInfoBuilder alloc] init];
}
+ (UserInfoBuilder*) builderWithPrototype:(UserInfo*) prototype {
  return [[UserInfo builder] mergeFrom:prototype];
}
- (UserInfoBuilder*) builder {
  return [UserInfo builder];
}
- (UserInfoBuilder*) toBuilder {
  return [UserInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasSchoolName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"schoolName", self.schoolName];
  }
  if (self.hasPhone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phone", self.phone];
  }
  if (self.hasExamType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"examType", [NSNumber numberWithInteger:self.examType]];
  }
  if (self.hasChannelName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"channelName", self.channelName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNickName) {
    [dictionary setObject: self.nickName forKey: @"nickName"];
  }
  if (self.hasSchoolName) {
    [dictionary setObject: self.schoolName forKey: @"schoolName"];
  }
  if (self.hasPhone) {
    [dictionary setObject: self.phone forKey: @"phone"];
  }
  if (self.hasExamType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.examType] forKey: @"examType"];
  }
  if (self.hasChannelName) {
    [dictionary setObject: self.channelName forKey: @"channelName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserInfo class]]) {
    return NO;
  }
  UserInfo *otherMessage = other;
  return
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasSchoolName == otherMessage.hasSchoolName &&
      (!self.hasSchoolName || [self.schoolName isEqual:otherMessage.schoolName]) &&
      self.hasPhone == otherMessage.hasPhone &&
      (!self.hasPhone || [self.phone isEqual:otherMessage.phone]) &&
      self.hasExamType == otherMessage.hasExamType &&
      (!self.hasExamType || self.examType == otherMessage.examType) &&
      self.hasChannelName == otherMessage.hasChannelName &&
      (!self.hasChannelName || [self.channelName isEqual:otherMessage.channelName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasSchoolName) {
    hashCode = hashCode * 31 + [self.schoolName hash];
  }
  if (self.hasPhone) {
    hashCode = hashCode * 31 + [self.phone hash];
  }
  if (self.hasExamType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.examType] hash];
  }
  if (self.hasChannelName) {
    hashCode = hashCode * 31 + [self.channelName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserInfoBuilder()
@property (strong) UserInfo* resultUserInfo;
@end

@implementation UserInfoBuilder
@synthesize resultUserInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserInfo = [[UserInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserInfo;
}
- (UserInfoBuilder*) clear {
  self.resultUserInfo = [[UserInfo alloc] init];
  return self;
}
- (UserInfoBuilder*) clone {
  return [UserInfo builderWithPrototype:resultUserInfo];
}
- (UserInfo*) defaultInstance {
  return [UserInfo defaultInstance];
}
- (UserInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserInfo*) buildPartial {
  UserInfo* returnMe = resultUserInfo;
  self.resultUserInfo = nil;
  return returnMe;
}
- (UserInfoBuilder*) mergeFrom:(UserInfo*) other {
  if (other == [UserInfo defaultInstance]) {
    return self;
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasSchoolName) {
    [self setSchoolName:other.schoolName];
  }
  if (other.hasPhone) {
    [self setPhone:other.phone];
  }
  if (other.hasExamType) {
    [self setExamType:other.examType];
  }
  if (other.hasChannelName) {
    [self setChannelName:other.channelName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNickName:[input readString]];
        break;
      }
      case 18: {
        [self setSchoolName:[input readString]];
        break;
      }
      case 26: {
        [self setPhone:[input readString]];
        break;
      }
      case 32: {
        [self setExamType:[input readUInt32]];
        break;
      }
      case 42: {
        [self setChannelName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasNickName {
  return resultUserInfo.hasNickName;
}
- (NSString*) nickName {
  return resultUserInfo.nickName;
}
- (UserInfoBuilder*) setNickName:(NSString*) value {
  resultUserInfo.hasNickName = YES;
  resultUserInfo.nickName = value;
  return self;
}
- (UserInfoBuilder*) clearNickName {
  resultUserInfo.hasNickName = NO;
  resultUserInfo.nickName = @"";
  return self;
}
- (BOOL) hasSchoolName {
  return resultUserInfo.hasSchoolName;
}
- (NSString*) schoolName {
  return resultUserInfo.schoolName;
}
- (UserInfoBuilder*) setSchoolName:(NSString*) value {
  resultUserInfo.hasSchoolName = YES;
  resultUserInfo.schoolName = value;
  return self;
}
- (UserInfoBuilder*) clearSchoolName {
  resultUserInfo.hasSchoolName = NO;
  resultUserInfo.schoolName = @"";
  return self;
}
- (BOOL) hasPhone {
  return resultUserInfo.hasPhone;
}
- (NSString*) phone {
  return resultUserInfo.phone;
}
- (UserInfoBuilder*) setPhone:(NSString*) value {
  resultUserInfo.hasPhone = YES;
  resultUserInfo.phone = value;
  return self;
}
- (UserInfoBuilder*) clearPhone {
  resultUserInfo.hasPhone = NO;
  resultUserInfo.phone = @"";
  return self;
}
- (BOOL) hasExamType {
  return resultUserInfo.hasExamType;
}
- (UInt32) examType {
  return resultUserInfo.examType;
}
- (UserInfoBuilder*) setExamType:(UInt32) value {
  resultUserInfo.hasExamType = YES;
  resultUserInfo.examType = value;
  return self;
}
- (UserInfoBuilder*) clearExamType {
  resultUserInfo.hasExamType = NO;
  resultUserInfo.examType = 0;
  return self;
}
- (BOOL) hasChannelName {
  return resultUserInfo.hasChannelName;
}
- (NSString*) channelName {
  return resultUserInfo.channelName;
}
- (UserInfoBuilder*) setChannelName:(NSString*) value {
  resultUserInfo.hasChannelName = YES;
  resultUserInfo.channelName = value;
  return self;
}
- (UserInfoBuilder*) clearChannelName {
  resultUserInfo.hasChannelName = NO;
  resultUserInfo.channelName = @"";
  return self;
}
@end

@interface RegisterResult ()
@property (strong) NSString* errorMessage;
@property SInt32 userId;
@property (strong) NSString* sessionId;
@end

@implementation RegisterResult

- (BOOL) hasErrorMessage {
  return !!hasErrorMessage_;
}
- (void) setHasErrorMessage:(BOOL) _value_ {
  hasErrorMessage_ = !!_value_;
}
@synthesize errorMessage;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (instancetype) init {
  if ((self = [super init])) {
    self.errorMessage = @"";
    self.userId = 0;
    self.sessionId = @"";
  }
  return self;
}
static RegisterResult* defaultRegisterResultInstance = nil;
+ (void) initialize {
  if (self == [RegisterResult class]) {
    defaultRegisterResultInstance = [[RegisterResult alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRegisterResultInstance;
}
- (instancetype) defaultInstance {
  return defaultRegisterResultInstance;
}
- (BOOL) isInitialized {
  if (!self.hasErrorMessage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasErrorMessage) {
    [output writeString:1 value:self.errorMessage];
  }
  if (self.hasUserId) {
    [output writeInt32:2 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeString:3 value:self.sessionId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasErrorMessage) {
    size_ += computeStringSize(1, self.errorMessage);
  }
  if (self.hasUserId) {
    size_ += computeInt32Size(2, self.userId);
  }
  if (self.hasSessionId) {
    size_ += computeStringSize(3, self.sessionId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RegisterResult*) parseFromData:(NSData*) data {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromData:data] build];
}
+ (RegisterResult*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegisterResult*) parseFromInputStream:(NSInputStream*) input {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromInputStream:input] build];
}
+ (RegisterResult*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterResult*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromCodedInputStream:input] build];
}
+ (RegisterResult*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterResult*)[[[RegisterResult builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterResultBuilder*) builder {
  return [[RegisterResultBuilder alloc] init];
}
+ (RegisterResultBuilder*) builderWithPrototype:(RegisterResult*) prototype {
  return [[RegisterResult builder] mergeFrom:prototype];
}
- (RegisterResultBuilder*) builder {
  return [RegisterResult builder];
}
- (RegisterResultBuilder*) toBuilder {
  return [RegisterResult builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasErrorMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorMessage", self.errorMessage];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", self.sessionId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasErrorMessage) {
    [dictionary setObject: self.errorMessage forKey: @"errorMessage"];
  }
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: self.sessionId forKey: @"sessionId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RegisterResult class]]) {
    return NO;
  }
  RegisterResult *otherMessage = other;
  return
      self.hasErrorMessage == otherMessage.hasErrorMessage &&
      (!self.hasErrorMessage || [self.errorMessage isEqual:otherMessage.errorMessage]) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || [self.sessionId isEqual:otherMessage.sessionId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasErrorMessage) {
    hashCode = hashCode * 31 + [self.errorMessage hash];
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [self.sessionId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RegisterResultBuilder()
@property (strong) RegisterResult* resultRegisterResult;
@end

@implementation RegisterResultBuilder
@synthesize resultRegisterResult;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRegisterResult = [[RegisterResult alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRegisterResult;
}
- (RegisterResultBuilder*) clear {
  self.resultRegisterResult = [[RegisterResult alloc] init];
  return self;
}
- (RegisterResultBuilder*) clone {
  return [RegisterResult builderWithPrototype:resultRegisterResult];
}
- (RegisterResult*) defaultInstance {
  return [RegisterResult defaultInstance];
}
- (RegisterResult*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegisterResult*) buildPartial {
  RegisterResult* returnMe = resultRegisterResult;
  self.resultRegisterResult = nil;
  return returnMe;
}
- (RegisterResultBuilder*) mergeFrom:(RegisterResult*) other {
  if (other == [RegisterResult defaultInstance]) {
    return self;
  }
  if (other.hasErrorMessage) {
    [self setErrorMessage:other.errorMessage];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegisterResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegisterResultBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setErrorMessage:[input readString]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 26: {
        [self setSessionId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasErrorMessage {
  return resultRegisterResult.hasErrorMessage;
}
- (NSString*) errorMessage {
  return resultRegisterResult.errorMessage;
}
- (RegisterResultBuilder*) setErrorMessage:(NSString*) value {
  resultRegisterResult.hasErrorMessage = YES;
  resultRegisterResult.errorMessage = value;
  return self;
}
- (RegisterResultBuilder*) clearErrorMessage {
  resultRegisterResult.hasErrorMessage = NO;
  resultRegisterResult.errorMessage = @"";
  return self;
}
- (BOOL) hasUserId {
  return resultRegisterResult.hasUserId;
}
- (SInt32) userId {
  return resultRegisterResult.userId;
}
- (RegisterResultBuilder*) setUserId:(SInt32) value {
  resultRegisterResult.hasUserId = YES;
  resultRegisterResult.userId = value;
  return self;
}
- (RegisterResultBuilder*) clearUserId {
  resultRegisterResult.hasUserId = NO;
  resultRegisterResult.userId = 0;
  return self;
}
- (BOOL) hasSessionId {
  return resultRegisterResult.hasSessionId;
}
- (NSString*) sessionId {
  return resultRegisterResult.sessionId;
}
- (RegisterResultBuilder*) setSessionId:(NSString*) value {
  resultRegisterResult.hasSessionId = YES;
  resultRegisterResult.sessionId = value;
  return self;
}
- (RegisterResultBuilder*) clearSessionId {
  resultRegisterResult.hasSessionId = NO;
  resultRegisterResult.sessionId = @"";
  return self;
}
@end

@interface CourseType ()
@property UInt32 courseType;
@property UInt32 num;
@property UInt32 pageNum;
@end

@implementation CourseType

- (BOOL) hasCourseType {
  return !!hasCourseType_;
}
- (void) setHasCourseType:(BOOL) _value_ {
  hasCourseType_ = !!_value_;
}
@synthesize courseType;
- (BOOL) hasNum {
  return !!hasNum_;
}
- (void) setHasNum:(BOOL) _value_ {
  hasNum_ = !!_value_;
}
@synthesize num;
- (BOOL) hasPageNum {
  return !!hasPageNum_;
}
- (void) setHasPageNum:(BOOL) _value_ {
  hasPageNum_ = !!_value_;
}
@synthesize pageNum;
- (instancetype) init {
  if ((self = [super init])) {
    self.courseType = 0;
    self.num = 0;
    self.pageNum = 0;
  }
  return self;
}
static CourseType* defaultCourseTypeInstance = nil;
+ (void) initialize {
  if (self == [CourseType class]) {
    defaultCourseTypeInstance = [[CourseType alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCourseTypeInstance;
}
- (instancetype) defaultInstance {
  return defaultCourseTypeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCourseType) {
    return NO;
  }
  if (!self.hasNum) {
    return NO;
  }
  if (!self.hasPageNum) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCourseType) {
    [output writeUInt32:1 value:self.courseType];
  }
  if (self.hasNum) {
    [output writeUInt32:2 value:self.num];
  }
  if (self.hasPageNum) {
    [output writeUInt32:3 value:self.pageNum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCourseType) {
    size_ += computeUInt32Size(1, self.courseType);
  }
  if (self.hasNum) {
    size_ += computeUInt32Size(2, self.num);
  }
  if (self.hasPageNum) {
    size_ += computeUInt32Size(3, self.pageNum);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CourseType*) parseFromData:(NSData*) data {
  return (CourseType*)[[[CourseType builder] mergeFromData:data] build];
}
+ (CourseType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseType*)[[[CourseType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CourseType*) parseFromInputStream:(NSInputStream*) input {
  return (CourseType*)[[[CourseType builder] mergeFromInputStream:input] build];
}
+ (CourseType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseType*)[[[CourseType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CourseType*)[[[CourseType builder] mergeFromCodedInputStream:input] build];
}
+ (CourseType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseType*)[[[CourseType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseTypeBuilder*) builder {
  return [[CourseTypeBuilder alloc] init];
}
+ (CourseTypeBuilder*) builderWithPrototype:(CourseType*) prototype {
  return [[CourseType builder] mergeFrom:prototype];
}
- (CourseTypeBuilder*) builder {
  return [CourseType builder];
}
- (CourseTypeBuilder*) toBuilder {
  return [CourseType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCourseType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"courseType", [NSNumber numberWithInteger:self.courseType]];
  }
  if (self.hasNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"num", [NSNumber numberWithInteger:self.num]];
  }
  if (self.hasPageNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pageNum", [NSNumber numberWithInteger:self.pageNum]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCourseType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.courseType] forKey: @"courseType"];
  }
  if (self.hasNum) {
    [dictionary setObject: [NSNumber numberWithInteger:self.num] forKey: @"num"];
  }
  if (self.hasPageNum) {
    [dictionary setObject: [NSNumber numberWithInteger:self.pageNum] forKey: @"pageNum"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CourseType class]]) {
    return NO;
  }
  CourseType *otherMessage = other;
  return
      self.hasCourseType == otherMessage.hasCourseType &&
      (!self.hasCourseType || self.courseType == otherMessage.courseType) &&
      self.hasNum == otherMessage.hasNum &&
      (!self.hasNum || self.num == otherMessage.num) &&
      self.hasPageNum == otherMessage.hasPageNum &&
      (!self.hasPageNum || self.pageNum == otherMessage.pageNum) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCourseType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.courseType] hash];
  }
  if (self.hasNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.num] hash];
  }
  if (self.hasPageNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pageNum] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CourseTypeBuilder()
@property (strong) CourseType* resultCourseType;
@end

@implementation CourseTypeBuilder
@synthesize resultCourseType;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCourseType = [[CourseType alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCourseType;
}
- (CourseTypeBuilder*) clear {
  self.resultCourseType = [[CourseType alloc] init];
  return self;
}
- (CourseTypeBuilder*) clone {
  return [CourseType builderWithPrototype:resultCourseType];
}
- (CourseType*) defaultInstance {
  return [CourseType defaultInstance];
}
- (CourseType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CourseType*) buildPartial {
  CourseType* returnMe = resultCourseType;
  self.resultCourseType = nil;
  return returnMe;
}
- (CourseTypeBuilder*) mergeFrom:(CourseType*) other {
  if (other == [CourseType defaultInstance]) {
    return self;
  }
  if (other.hasCourseType) {
    [self setCourseType:other.courseType];
  }
  if (other.hasNum) {
    [self setNum:other.num];
  }
  if (other.hasPageNum) {
    [self setPageNum:other.pageNum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CourseTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CourseTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCourseType:[input readUInt32]];
        break;
      }
      case 16: {
        [self setNum:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPageNum:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCourseType {
  return resultCourseType.hasCourseType;
}
- (UInt32) courseType {
  return resultCourseType.courseType;
}
- (CourseTypeBuilder*) setCourseType:(UInt32) value {
  resultCourseType.hasCourseType = YES;
  resultCourseType.courseType = value;
  return self;
}
- (CourseTypeBuilder*) clearCourseType {
  resultCourseType.hasCourseType = NO;
  resultCourseType.courseType = 0;
  return self;
}
- (BOOL) hasNum {
  return resultCourseType.hasNum;
}
- (UInt32) num {
  return resultCourseType.num;
}
- (CourseTypeBuilder*) setNum:(UInt32) value {
  resultCourseType.hasNum = YES;
  resultCourseType.num = value;
  return self;
}
- (CourseTypeBuilder*) clearNum {
  resultCourseType.hasNum = NO;
  resultCourseType.num = 0;
  return self;
}
- (BOOL) hasPageNum {
  return resultCourseType.hasPageNum;
}
- (UInt32) pageNum {
  return resultCourseType.pageNum;
}
- (CourseTypeBuilder*) setPageNum:(UInt32) value {
  resultCourseType.hasPageNum = YES;
  resultCourseType.pageNum = value;
  return self;
}
- (CourseTypeBuilder*) clearPageNum {
  resultCourseType.hasPageNum = NO;
  resultCourseType.pageNum = 0;
  return self;
}
@end

@interface CourseInfo ()
@property SInt32 id;
@property (strong) NSString* name;
@property (strong) NSString* teacherName;
@property SInt32 price;
@property (strong) NSString* descritpion;
@end

@implementation CourseInfo

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasTeacherName {
  return !!hasTeacherName_;
}
- (void) setHasTeacherName:(BOOL) _value_ {
  hasTeacherName_ = !!_value_;
}
@synthesize teacherName;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) _value_ {
  hasPrice_ = !!_value_;
}
@synthesize price;
- (BOOL) hasDescritpion {
  return !!hasDescritpion_;
}
- (void) setHasDescritpion:(BOOL) _value_ {
  hasDescritpion_ = !!_value_;
}
@synthesize descritpion;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.teacherName = @"";
    self.price = 0;
    self.descritpion = @"";
  }
  return self;
}
static CourseInfo* defaultCourseInfoInstance = nil;
+ (void) initialize {
  if (self == [CourseInfo class]) {
    defaultCourseInfoInstance = [[CourseInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCourseInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultCourseInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasTeacherName) {
    return NO;
  }
  if (!self.hasPrice) {
    return NO;
  }
  if (!self.hasDescritpion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasTeacherName) {
    [output writeString:3 value:self.teacherName];
  }
  if (self.hasPrice) {
    [output writeInt32:4 value:self.price];
  }
  if (self.hasDescritpion) {
    [output writeString:5 value:self.descritpion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasTeacherName) {
    size_ += computeStringSize(3, self.teacherName);
  }
  if (self.hasPrice) {
    size_ += computeInt32Size(4, self.price);
  }
  if (self.hasDescritpion) {
    size_ += computeStringSize(5, self.descritpion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CourseInfo*) parseFromData:(NSData*) data {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromData:data] build];
}
+ (CourseInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CourseInfo*) parseFromInputStream:(NSInputStream*) input {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromInputStream:input] build];
}
+ (CourseInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromCodedInputStream:input] build];
}
+ (CourseInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseInfo*)[[[CourseInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseInfoBuilder*) builder {
  return [[CourseInfoBuilder alloc] init];
}
+ (CourseInfoBuilder*) builderWithPrototype:(CourseInfo*) prototype {
  return [[CourseInfo builder] mergeFrom:prototype];
}
- (CourseInfoBuilder*) builder {
  return [CourseInfo builder];
}
- (CourseInfoBuilder*) toBuilder {
  return [CourseInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasTeacherName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teacherName", self.teacherName];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithInteger:self.price]];
  }
  if (self.hasDescritpion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"descritpion", self.descritpion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasTeacherName) {
    [dictionary setObject: self.teacherName forKey: @"teacherName"];
  }
  if (self.hasPrice) {
    [dictionary setObject: [NSNumber numberWithInteger:self.price] forKey: @"price"];
  }
  if (self.hasDescritpion) {
    [dictionary setObject: self.descritpion forKey: @"descritpion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CourseInfo class]]) {
    return NO;
  }
  CourseInfo *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasTeacherName == otherMessage.hasTeacherName &&
      (!self.hasTeacherName || [self.teacherName isEqual:otherMessage.teacherName]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasDescritpion == otherMessage.hasDescritpion &&
      (!self.hasDescritpion || [self.descritpion isEqual:otherMessage.descritpion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasTeacherName) {
    hashCode = hashCode * 31 + [self.teacherName hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.price] hash];
  }
  if (self.hasDescritpion) {
    hashCode = hashCode * 31 + [self.descritpion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CourseInfoBuilder()
@property (strong) CourseInfo* resultCourseInfo;
@end

@implementation CourseInfoBuilder
@synthesize resultCourseInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCourseInfo = [[CourseInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCourseInfo;
}
- (CourseInfoBuilder*) clear {
  self.resultCourseInfo = [[CourseInfo alloc] init];
  return self;
}
- (CourseInfoBuilder*) clone {
  return [CourseInfo builderWithPrototype:resultCourseInfo];
}
- (CourseInfo*) defaultInstance {
  return [CourseInfo defaultInstance];
}
- (CourseInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CourseInfo*) buildPartial {
  CourseInfo* returnMe = resultCourseInfo;
  self.resultCourseInfo = nil;
  return returnMe;
}
- (CourseInfoBuilder*) mergeFrom:(CourseInfo*) other {
  if (other == [CourseInfo defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTeacherName) {
    [self setTeacherName:other.teacherName];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasDescritpion) {
    [self setDescritpion:other.descritpion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CourseInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CourseInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setTeacherName:[input readString]];
        break;
      }
      case 32: {
        [self setPrice:[input readInt32]];
        break;
      }
      case 42: {
        [self setDescritpion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultCourseInfo.hasId;
}
- (SInt32) id {
  return resultCourseInfo.id;
}
- (CourseInfoBuilder*) setId:(SInt32) value {
  resultCourseInfo.hasId = YES;
  resultCourseInfo.id = value;
  return self;
}
- (CourseInfoBuilder*) clearId {
  resultCourseInfo.hasId = NO;
  resultCourseInfo.id = 0;
  return self;
}
- (BOOL) hasName {
  return resultCourseInfo.hasName;
}
- (NSString*) name {
  return resultCourseInfo.name;
}
- (CourseInfoBuilder*) setName:(NSString*) value {
  resultCourseInfo.hasName = YES;
  resultCourseInfo.name = value;
  return self;
}
- (CourseInfoBuilder*) clearName {
  resultCourseInfo.hasName = NO;
  resultCourseInfo.name = @"";
  return self;
}
- (BOOL) hasTeacherName {
  return resultCourseInfo.hasTeacherName;
}
- (NSString*) teacherName {
  return resultCourseInfo.teacherName;
}
- (CourseInfoBuilder*) setTeacherName:(NSString*) value {
  resultCourseInfo.hasTeacherName = YES;
  resultCourseInfo.teacherName = value;
  return self;
}
- (CourseInfoBuilder*) clearTeacherName {
  resultCourseInfo.hasTeacherName = NO;
  resultCourseInfo.teacherName = @"";
  return self;
}
- (BOOL) hasPrice {
  return resultCourseInfo.hasPrice;
}
- (SInt32) price {
  return resultCourseInfo.price;
}
- (CourseInfoBuilder*) setPrice:(SInt32) value {
  resultCourseInfo.hasPrice = YES;
  resultCourseInfo.price = value;
  return self;
}
- (CourseInfoBuilder*) clearPrice {
  resultCourseInfo.hasPrice = NO;
  resultCourseInfo.price = 0;
  return self;
}
- (BOOL) hasDescritpion {
  return resultCourseInfo.hasDescritpion;
}
- (NSString*) descritpion {
  return resultCourseInfo.descritpion;
}
- (CourseInfoBuilder*) setDescritpion:(NSString*) value {
  resultCourseInfo.hasDescritpion = YES;
  resultCourseInfo.descritpion = value;
  return self;
}
- (CourseInfoBuilder*) clearDescritpion {
  resultCourseInfo.hasDescritpion = NO;
  resultCourseInfo.descritpion = @"";
  return self;
}
@end

@interface CourseList ()
@property SInt32 num;
@property (strong) NSMutableArray * listArray;
@end

@implementation CourseList

- (BOOL) hasNum {
  return !!hasNum_;
}
- (void) setHasNum:(BOOL) _value_ {
  hasNum_ = !!_value_;
}
@synthesize num;
@synthesize listArray;
@dynamic list;
- (instancetype) init {
  if ((self = [super init])) {
    self.num = 0;
  }
  return self;
}
static CourseList* defaultCourseListInstance = nil;
+ (void) initialize {
  if (self == [CourseList class]) {
    defaultCourseListInstance = [[CourseList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCourseListInstance;
}
- (instancetype) defaultInstance {
  return defaultCourseListInstance;
}
- (NSArray *)list {
  return listArray;
}
- (CourseInfo*)listAtIndex:(NSUInteger)index {
  return [listArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasNum) {
    return NO;
  }
  __block BOOL isInitlist = YES;
   [self.list enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitlist = NO;
      *stop = YES;
    }
  }];
  if (!isInitlist) return isInitlist;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNum) {
    [output writeInt32:1 value:self.num];
  }
  [self.listArray enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNum) {
    size_ += computeInt32Size(1, self.num);
  }
  [self.listArray enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CourseList*) parseFromData:(NSData*) data {
  return (CourseList*)[[[CourseList builder] mergeFromData:data] build];
}
+ (CourseList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseList*)[[[CourseList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CourseList*) parseFromInputStream:(NSInputStream*) input {
  return (CourseList*)[[[CourseList builder] mergeFromInputStream:input] build];
}
+ (CourseList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseList*)[[[CourseList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CourseList*)[[[CourseList builder] mergeFromCodedInputStream:input] build];
}
+ (CourseList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CourseList*)[[[CourseList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CourseListBuilder*) builder {
  return [[CourseListBuilder alloc] init];
}
+ (CourseListBuilder*) builderWithPrototype:(CourseList*) prototype {
  return [[CourseList builder] mergeFrom:prototype];
}
- (CourseListBuilder*) builder {
  return [CourseList builder];
}
- (CourseListBuilder*) toBuilder {
  return [CourseList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"num", [NSNumber numberWithInteger:self.num]];
  }
  [self.listArray enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"list"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNum) {
    [dictionary setObject: [NSNumber numberWithInteger:self.num] forKey: @"num"];
  }
  for (CourseInfo* element in self.listArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"list"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CourseList class]]) {
    return NO;
  }
  CourseList *otherMessage = other;
  return
      self.hasNum == otherMessage.hasNum &&
      (!self.hasNum || self.num == otherMessage.num) &&
      [self.listArray isEqualToArray:otherMessage.listArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.num] hash];
  }
  [self.listArray enumerateObjectsUsingBlock:^(CourseInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CourseListBuilder()
@property (strong) CourseList* resultCourseList;
@end

@implementation CourseListBuilder
@synthesize resultCourseList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCourseList = [[CourseList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCourseList;
}
- (CourseListBuilder*) clear {
  self.resultCourseList = [[CourseList alloc] init];
  return self;
}
- (CourseListBuilder*) clone {
  return [CourseList builderWithPrototype:resultCourseList];
}
- (CourseList*) defaultInstance {
  return [CourseList defaultInstance];
}
- (CourseList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CourseList*) buildPartial {
  CourseList* returnMe = resultCourseList;
  self.resultCourseList = nil;
  return returnMe;
}
- (CourseListBuilder*) mergeFrom:(CourseList*) other {
  if (other == [CourseList defaultInstance]) {
    return self;
  }
  if (other.hasNum) {
    [self setNum:other.num];
  }
  if (other.listArray.count > 0) {
    if (resultCourseList.listArray == nil) {
      resultCourseList.listArray = [[NSMutableArray alloc] initWithArray:other.listArray];
    } else {
      [resultCourseList.listArray addObjectsFromArray:other.listArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CourseListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CourseListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNum:[input readInt32]];
        break;
      }
      case 18: {
        CourseInfoBuilder* subBuilder = [CourseInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNum {
  return resultCourseList.hasNum;
}
- (SInt32) num {
  return resultCourseList.num;
}
- (CourseListBuilder*) setNum:(SInt32) value {
  resultCourseList.hasNum = YES;
  resultCourseList.num = value;
  return self;
}
- (CourseListBuilder*) clearNum {
  resultCourseList.hasNum = NO;
  resultCourseList.num = 0;
  return self;
}
- (NSMutableArray *)list {
  return resultCourseList.listArray;
}
- (CourseInfo*)listAtIndex:(NSUInteger)index {
  return [resultCourseList listAtIndex:index];
}
- (CourseListBuilder *)addList:(CourseInfo*)value {
  if (resultCourseList.listArray == nil) {
    resultCourseList.listArray = [[NSMutableArray alloc]init];
  }
  [resultCourseList.listArray addObject:value];
  return self;
}
- (CourseListBuilder *)setListArray:(NSArray *)array {
  resultCourseList.listArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (CourseListBuilder *)clearList {
  resultCourseList.listArray = nil;
  return self;
}
@end

@interface Barrage ()
@property (strong) NSString* senderNickname;
@property (strong) NSString* message;
@end

@implementation Barrage

- (BOOL) hasSenderNickname {
  return !!hasSenderNickname_;
}
- (void) setHasSenderNickname:(BOOL) _value_ {
  hasSenderNickname_ = !!_value_;
}
@synthesize senderNickname;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (instancetype) init {
  if ((self = [super init])) {
    self.senderNickname = @"";
    self.message = @"";
  }
  return self;
}
static Barrage* defaultBarrageInstance = nil;
+ (void) initialize {
  if (self == [Barrage class]) {
    defaultBarrageInstance = [[Barrage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBarrageInstance;
}
- (instancetype) defaultInstance {
  return defaultBarrageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSenderNickname) {
    return NO;
  }
  if (!self.hasMessage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSenderNickname) {
    [output writeString:1 value:self.senderNickname];
  }
  if (self.hasMessage) {
    [output writeString:2 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSenderNickname) {
    size_ += computeStringSize(1, self.senderNickname);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(2, self.message);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Barrage*) parseFromData:(NSData*) data {
  return (Barrage*)[[[Barrage builder] mergeFromData:data] build];
}
+ (Barrage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Barrage*)[[[Barrage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Barrage*) parseFromInputStream:(NSInputStream*) input {
  return (Barrage*)[[[Barrage builder] mergeFromInputStream:input] build];
}
+ (Barrage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Barrage*)[[[Barrage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Barrage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Barrage*)[[[Barrage builder] mergeFromCodedInputStream:input] build];
}
+ (Barrage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Barrage*)[[[Barrage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BarrageBuilder*) builder {
  return [[BarrageBuilder alloc] init];
}
+ (BarrageBuilder*) builderWithPrototype:(Barrage*) prototype {
  return [[Barrage builder] mergeFrom:prototype];
}
- (BarrageBuilder*) builder {
  return [Barrage builder];
}
- (BarrageBuilder*) toBuilder {
  return [Barrage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSenderNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderNickname", self.senderNickname];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSenderNickname) {
    [dictionary setObject: self.senderNickname forKey: @"senderNickname"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Barrage class]]) {
    return NO;
  }
  Barrage *otherMessage = other;
  return
      self.hasSenderNickname == otherMessage.hasSenderNickname &&
      (!self.hasSenderNickname || [self.senderNickname isEqual:otherMessage.senderNickname]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSenderNickname) {
    hashCode = hashCode * 31 + [self.senderNickname hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BarrageBuilder()
@property (strong) Barrage* resultBarrage;
@end

@implementation BarrageBuilder
@synthesize resultBarrage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBarrage = [[Barrage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBarrage;
}
- (BarrageBuilder*) clear {
  self.resultBarrage = [[Barrage alloc] init];
  return self;
}
- (BarrageBuilder*) clone {
  return [Barrage builderWithPrototype:resultBarrage];
}
- (Barrage*) defaultInstance {
  return [Barrage defaultInstance];
}
- (Barrage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Barrage*) buildPartial {
  Barrage* returnMe = resultBarrage;
  self.resultBarrage = nil;
  return returnMe;
}
- (BarrageBuilder*) mergeFrom:(Barrage*) other {
  if (other == [Barrage defaultInstance]) {
    return self;
  }
  if (other.hasSenderNickname) {
    [self setSenderNickname:other.senderNickname];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BarrageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BarrageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSenderNickname:[input readString]];
        break;
      }
      case 18: {
        [self setMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSenderNickname {
  return resultBarrage.hasSenderNickname;
}
- (NSString*) senderNickname {
  return resultBarrage.senderNickname;
}
- (BarrageBuilder*) setSenderNickname:(NSString*) value {
  resultBarrage.hasSenderNickname = YES;
  resultBarrage.senderNickname = value;
  return self;
}
- (BarrageBuilder*) clearSenderNickname {
  resultBarrage.hasSenderNickname = NO;
  resultBarrage.senderNickname = @"";
  return self;
}
- (BOOL) hasMessage {
  return resultBarrage.hasMessage;
}
- (NSString*) message {
  return resultBarrage.message;
}
- (BarrageBuilder*) setMessage:(NSString*) value {
  resultBarrage.hasMessage = YES;
  resultBarrage.message = value;
  return self;
}
- (BarrageBuilder*) clearMessage {
  resultBarrage.hasMessage = NO;
  resultBarrage.message = @"";
  return self;
}
@end

@interface None ()
@end

@implementation None

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static None* defaultNoneInstance = nil;
+ (void) initialize {
  if (self == [None class]) {
    defaultNoneInstance = [[None alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNoneInstance;
}
- (instancetype) defaultInstance {
  return defaultNoneInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (None*) parseFromData:(NSData*) data {
  return (None*)[[[None builder] mergeFromData:data] build];
}
+ (None*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (None*)[[[None builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (None*) parseFromInputStream:(NSInputStream*) input {
  return (None*)[[[None builder] mergeFromInputStream:input] build];
}
+ (None*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (None*)[[[None builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (None*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (None*)[[[None builder] mergeFromCodedInputStream:input] build];
}
+ (None*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (None*)[[[None builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NoneBuilder*) builder {
  return [[NoneBuilder alloc] init];
}
+ (NoneBuilder*) builderWithPrototype:(None*) prototype {
  return [[None builder] mergeFrom:prototype];
}
- (NoneBuilder*) builder {
  return [None builder];
}
- (NoneBuilder*) toBuilder {
  return [None builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[None class]]) {
    return NO;
  }
  None *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NoneBuilder()
@property (strong) None* resultNone;
@end

@implementation NoneBuilder
@synthesize resultNone;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNone = [[None alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNone;
}
- (NoneBuilder*) clear {
  self.resultNone = [[None alloc] init];
  return self;
}
- (NoneBuilder*) clone {
  return [None builderWithPrototype:resultNone];
}
- (None*) defaultInstance {
  return [None defaultInstance];
}
- (None*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (None*) buildPartial {
  None* returnMe = resultNone;
  self.resultNone = nil;
  return returnMe;
}
- (NoneBuilder*) mergeFrom:(None*) other {
  if (other == [None defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NoneBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NoneBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end


// @@protoc_insertion_point(global_scope)
