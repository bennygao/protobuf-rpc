syntax = "proto2";

option java_multiple_files = true;
option java_package = "com.yingshibao.app.idl";

package yingshibao;

// 用户注册请求信息
message UserInfo {
	/* 
     * 昵称
     */
	required string nickName = 1; 
	
	// 学校名称
	optional string schoolName = 2; 
	
	// 手机号码
	required string phone = 3; 
	
	// 考试类型 
	required uint32 examType = 4; // 1:四级英语 2:六级英语 3:考研英语 4:考研政治 5:考研数学 6:高考
	
	// 用户来源渠道
	required string channelName = 5;
}

// 用户注册响应信息
message RegisterResult {
	// 错误信息，如果注册成功为null；如果发生错误，存放导致错误的原因。
	required string errorMessage = 1; 
	
	// 用户ID，注册成功时存放服务器生成的userId。
	optional int32 userId = 2;
	
	// sessionId，注册成功时自动登录了，存放服务器生成的sessionId。
	optional string sessionId = 3;
}

// 弹幕消息
message Barrage {
	// 发弹幕用户昵称
	required string senderNickname = 1;

	// 弹幕消息
	required string message = 2;
}

// 空消息
message None {
}

// 引用import的message
message ImportMessage {
	optional CourseInfo courseInfo = 1;
	optional CourseList courseList = 2;
}

// 课程类型
message CourseType {
	// 课程类型 1:我的课程（已报名、已订购); 2:全部课程
	required uint32 courseType = 1;
	
	// 指定返回列表中最大课程个数
	required uint32 num = 2;
	
	// 指定返回第几页
	required uint32 pageNum = 3;
}

// 课程信息
message CourseInfo {
	// 课程ID
	required int32 id = 1;
	
	// 课程名称
	required string name = 2;
	
	// 老师姓名
	required string teacherName = 3;
	
	// 课程价格, 0:免费; 其他金额为课程价格，以分为单位。
	required int32 price = 4;
	
	// 课程简介
	required string descritpion = 5;
}

// 课程列表
message CourseList {
	// 列表实际条数
	required int32 num = 1;
	
	// 课程列表
	repeated CourseInfo list = 2; 
}

// This proto includes every type of field in both singular and repeated
// forms.
message TestAllTypes {
  message NestedMessage {
    // The field name "b" fails to compile in proto1 because it conflicts with
    // a local variable named "b" in one of the generated methods.  Doh.
    // This file needs to compile in proto1 to test backwards-compatibility.
    optional int32 bb = 1;
  }

  enum NestedEnum {
    FOO = 1;
    BAR = 2;
    BAZ = 3;
    NEG = -1;  // Intentionally negative.
  }

  // Singular
  optional    int32 optional_int32    =  1;
  optional    int64 optional_int64    =  2;
  optional   uint32 optional_uint32   =  3;
  optional   uint64 optional_uint64   =  4;
  optional   sint32 optional_sint32   =  5;
  optional   sint64 optional_sint64   =  6;
  optional  fixed32 optional_fixed32  =  7;
  optional  fixed64 optional_fixed64  =  8;
  optional sfixed32 optional_sfixed32 =  9;
  optional sfixed64 optional_sfixed64 = 10;
  optional    float optional_float    = 11;
  optional   double optional_double   = 12;
  optional     bool optional_bool     = 13;
  optional   string optional_string   = 14;
  optional    bytes optional_bytes    = 15;

  optional group OptionalGroup = 16 {
    optional int32 a = 17;
  }

  optional NestedMessage                        optional_nested_message  = 18;

  optional NestedEnum                           optional_nested_enum     = 21;

  optional string optional_string_piece = 24 [ctype=STRING_PIECE];
  optional string optional_cord = 25 [ctype=CORD];

  optional NestedMessage optional_lazy_message = 27 [lazy=true];

  // Repeated
  repeated    int32 repeated_int32    = 31;
  repeated    int64 repeated_int64    = 32;
  repeated   uint32 repeated_uint32   = 33;
  repeated   uint64 repeated_uint64   = 34;
  repeated   sint32 repeated_sint32   = 35;
  repeated   sint64 repeated_sint64   = 36;
  repeated  fixed32 repeated_fixed32  = 37;
  repeated  fixed64 repeated_fixed64  = 38;
  repeated sfixed32 repeated_sfixed32 = 39;
  repeated sfixed64 repeated_sfixed64 = 40;
  repeated    float repeated_float    = 41;
  repeated   double repeated_double   = 42;
  repeated     bool repeated_bool     = 43;
  repeated   string repeated_string   = 44;
  repeated    bytes repeated_bytes    = 45;

  repeated group RepeatedGroup = 46 {
    optional int32 a = 47;
  }

  repeated NestedMessage                        repeated_nested_message  = 48;

  repeated NestedEnum                           repeated_nested_enum     = 51;

  repeated string repeated_string_piece = 54 [ctype=STRING_PIECE];
  repeated string repeated_cord = 55 [ctype=CORD];

  repeated NestedMessage repeated_lazy_message = 57 [lazy=true];

  // Singular with defaults
  optional    int32 default_int32    = 61 [default =  41    ];
  optional    int64 default_int64    = 62 [default =  42    ];
  optional   uint32 default_uint32   = 63 [default =  43    ];
  optional   uint64 default_uint64   = 64 [default =  44    ];
  optional   sint32 default_sint32   = 65 [default = -45    ];
  optional   sint64 default_sint64   = 66 [default =  46    ];
  optional  fixed32 default_fixed32  = 67 [default =  47    ];
  optional  fixed64 default_fixed64  = 68 [default =  48    ];
  optional sfixed32 default_sfixed32 = 69 [default =  49    ];
  optional sfixed64 default_sfixed64 = 70 [default = -50    ];
  optional    float default_float    = 71 [default =  51.5  ];
  optional   double default_double   = 72 [default =  52e3  ];
  optional     bool default_bool     = 73 [default = true   ];
  optional   string default_string   = 74 [default = "hello"];
  optional    bytes default_bytes    = 75 [default = "world"];

  optional NestedEnum  default_nested_enum  = 81 [default = BAR        ];

  optional string default_string_piece = 84 [ctype=STRING_PIECE,default="abc"];
  optional string default_cord = 85 [ctype=CORD,default="123"];

  // For oneof test
  oneof oneof_field {
    uint32 oneof_uint32 = 111;
    NestedMessage oneof_nested_message = 112;
    string oneof_string = 113;
    bytes oneof_bytes = 114;
  }
}
